# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from common.vault.oas.api_client import ApiClient


class CoreAPIAccountsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def batch_get_account_migrations(self, ids, **kwargs):  # noqa: E501
        """Retrieves one or more account migrations by account migration ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_account_migrations(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: A list of the IDs of account migrations that are to be retrieved. Required; must be non-empty.  Required. Min length: 1 characters. (required)
        :return: AccountsBatchGetAccountMigrationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_get_account_migrations_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_get_account_migrations_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def batch_get_account_migrations_with_http_info(self, ids, **kwargs):  # noqa: E501
        """Retrieves one or more account migrations by account migration ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_account_migrations_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: A list of the IDs of account migrations that are to be retrieved. Required; must be non-empty.  Required. Min length: 1 characters. (required)
        :return: AccountsBatchGetAccountMigrationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_get_account_migrations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `batch_get_account_migrations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account-migrations:batchGet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsBatchGetAccountMigrationsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_get_account_update_batches(self, ids, **kwargs):  # noqa: E501
        """Retrieves one or more account update batches by account update batch ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_account_update_batches(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: A list of the IDs of account update batches that are to be retrieved. Required; must be non-empty.  Required. Min length: 1 characters. (required)
        :return: AccountsBatchGetAccountUpdateBatchesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_get_account_update_batches_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_get_account_update_batches_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def batch_get_account_update_batches_with_http_info(self, ids, **kwargs):  # noqa: E501
        """Retrieves one or more account update batches by account update batch ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_account_update_batches_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: A list of the IDs of account update batches that are to be retrieved. Required; must be non-empty.  Required. Min length: 1 characters. (required)
        :return: AccountsBatchGetAccountUpdateBatchesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_get_account_update_batches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `batch_get_account_update_batches`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account-update-batches:batchGet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsBatchGetAccountUpdateBatchesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_get_account_updates(self, ids, **kwargs):  # noqa: E501
        """Retrieves one or more account updates based on their account update IDs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_account_updates(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: A list of the IDs of account updates that are to be retrieved. Required; must be non-empty.  Required. Min length: 1 characters. (required)
        :return: AccountsBatchGetAccountUpdatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_get_account_updates_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_get_account_updates_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def batch_get_account_updates_with_http_info(self, ids, **kwargs):  # noqa: E501
        """Retrieves one or more account updates based on their account update IDs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_account_updates_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: A list of the IDs of account updates that are to be retrieved. Required; must be non-empty.  Required. Min length: 1 characters. (required)
        :return: AccountsBatchGetAccountUpdatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_get_account_updates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `batch_get_account_updates`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account-updates:batchGet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsBatchGetAccountUpdatesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_account(self, body, **kwargs):  # noqa: E501
        """Creates an account for a customer. The account can be created with a status of OPEN or PENDING.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountsCreateAccountRequest body: (required)
        :return: AccountsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_account_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_account_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_account_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates an account for a customer. The account can be created with a status of OPEN or PENDING.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountsCreateAccountRequest body: (required)
        :return: AccountsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_account_migration(self, body, **kwargs):  # noqa: E501
        """Creates an account migration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account_migration(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountsCreateAccountMigrationRequest body: (required)
        :return: AccountsAccountMigration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_account_migration_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_account_migration_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_account_migration_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates an account migration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account_migration_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountsCreateAccountMigrationRequest body: (required)
        :return: AccountsAccountMigration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account_migration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_account_migration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account-migrations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsAccountMigration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_account_update(self, body, **kwargs):  # noqa: E501
        """Registers a request for an account update to be created and executed asynchronously. The account_id field is required for the creation of an account update. The ID of an account update can be specified for create requests. An account update can be created to either update the instance parameter values, the product version of an account or to retry a closure update.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountsCreateAccountUpdateRequest body: (required)
        :return: AccountsAccountUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_account_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_account_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_account_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """Registers a request for an account update to be created and executed asynchronously. The account_id field is required for the creation of an account update. The ID of an account update can be specified for create requests. An account update can be created to either update the instance parameter values, the product version of an account or to retry a closure update.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountsCreateAccountUpdateRequest body: (required)
        :return: AccountsAccountUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_account_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account-updates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsAccountUpdate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_account_update_batch(self, body, **kwargs):  # noqa: E501
        """Creates a batch of account updates. Account update batches are used to update multiple accounts.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account_update_batch(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountsCreateAccountUpdateBatchRequest body: (required)
        :return: AccountsAccountUpdateBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_account_update_batch_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_account_update_batch_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_account_update_batch_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a batch of account updates. Account update batches are used to update multiple accounts.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account_update_batch_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountsCreateAccountUpdateBatchRequest body: (required)
        :return: AccountsAccountUpdateBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account_update_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_account_update_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account-update-batches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsAccountUpdateBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account(self, id, **kwargs):  # noqa: E501
        """Retrieves a specified account of the customer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the account to be retrieved. Required. (required)
        :param str view: View of the data to return. Optional; default ACCOUNT_VIEW_BASIC.
        :param list[str] fields_to_include: A list of fields to display, which are omitted by default.
        :param datetime instance_param_vals_effective_timestamp: The returned instance parameter values will be calculated as of this timestamp.
        :return: AccountsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a specified account of the customer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the account to be retrieved. Required. (required)
        :param str view: View of the data to return. Optional; default ACCOUNT_VIEW_BASIC.
        :param list[str] fields_to_include: A list of fields to display, which are omitted by default.
        :param datetime instance_param_vals_effective_timestamp: The returned instance parameter values will be calculated as of this timestamp.
        :return: AccountsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'view', 'fields_to_include', 'instance_param_vals_effective_timestamp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501
        if 'fields_to_include' in params:
            query_params.append(('fields_to_include', params['fields_to_include']))  # noqa: E501
            collection_formats['fields_to_include'] = 'multi'  # noqa: E501
        if 'instance_param_vals_effective_timestamp' in params:
            query_params.append(('instance_param_vals_effective_timestamp', params['instance_param_vals_effective_timestamp']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_schedule_assoc(self, id, **kwargs):  # noqa: E501
        """Retrieves a specified association between an account and a Schedule.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_schedule_assoc(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Account Schedule association that is to be retrieved. Required. (required)
        :return: AccountsAccountScheduleAssoc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_schedule_assoc_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_schedule_assoc_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_account_schedule_assoc_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a specified association between an account and a Schedule.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_schedule_assoc_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Account Schedule association that is to be retrieved. Required. (required)
        :return: AccountsAccountScheduleAssoc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_schedule_assoc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_account_schedule_assoc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account-schedule-assocs/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsAccountScheduleAssoc',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_update(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific account update by account update ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the account update that is to be retrieved. Required. (required)
        :return: AccountsAccountUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_account_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific account update by account update ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the account update that is to be retrieved. Required. (required)
        :return: AccountsAccountUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_account_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account-updates/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsAccountUpdate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_account_migrations(self, **kwargs):  # noqa: E501
        """Lists and filters account migrations.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_account_migrations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] statuses: The statuses of account migrations; these are used to filter on. Optional.
        :param int page_size: The number of results to be listed. Required; must be non-zero.
        :param str page_token: Token of the page the results are to be retrieved from. If empty, returns the first page of results. Optional.
        :return: AccountsListAccountMigrationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_account_migrations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_account_migrations_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_account_migrations_with_http_info(self, **kwargs):  # noqa: E501
        """Lists and filters account migrations.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_account_migrations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] statuses: The statuses of account migrations; these are used to filter on. Optional.
        :param int page_size: The number of results to be listed. Required; must be non-zero.
        :param str page_token: Token of the page the results are to be retrieved from. If empty, returns the first page of results. Optional.
        :return: AccountsListAccountMigrationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['statuses', 'page_size', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_account_migrations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'statuses' in params:
            query_params.append(('statuses', params['statuses']))  # noqa: E501
            collection_formats['statuses'] = 'multi'  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account-migrations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsListAccountMigrationsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_account_param_timeseries(self, account_id, **kwargs):  # noqa: E501
        """Lists the timeseries for the parameters on an account. This endpoint will change once we have a more generalised method for returning timeseries.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_account_param_timeseries(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The account ID a parameter timeseries is to be retrieved for. (required)
        :return: AccountsListAccountParamTimeseriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_account_param_timeseries_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_account_param_timeseries_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def list_account_param_timeseries_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Lists the timeseries for the parameters on an account. This endpoint will change once we have a more generalised method for returning timeseries.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_account_param_timeseries_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The account ID a parameter timeseries is to be retrieved for. (required)
        :return: AccountsListAccountParamTimeseriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_account_param_timeseries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `list_account_param_timeseries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}:paramTimeseries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsListAccountParamTimeseriesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_account_schedule_assocs(self, account_id, page_size, **kwargs):  # noqa: E501
        """Lists the associations of an account and its Schedules.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_account_schedule_assocs(account_id, page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The account ID that Account Schedule associations are to be listed for.  Required. (required)
        :param int page_size: The number of results to be listed.  Required. Min: 1. Max: 500. (required)
        :param str page_token: Token of the page the results are to be retrieved from. If empty, returns the first page of results. Optional.
        :return: AccountsListAccountScheduleAssocsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_account_schedule_assocs_with_http_info(account_id, page_size, **kwargs)  # noqa: E501
        else:
            (data) = self.list_account_schedule_assocs_with_http_info(account_id, page_size, **kwargs)  # noqa: E501
            return data

    def list_account_schedule_assocs_with_http_info(self, account_id, page_size, **kwargs):  # noqa: E501
        """Lists the associations of an account and its Schedules.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_account_schedule_assocs_with_http_info(account_id, page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The account ID that Account Schedule associations are to be listed for.  Required. (required)
        :param int page_size: The number of results to be listed.  Required. Min: 1. Max: 500. (required)
        :param str page_token: Token of the page the results are to be retrieved from. If empty, returns the first page of results. Optional.
        :return: AccountsListAccountScheduleAssocsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'page_size', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_account_schedule_assocs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `list_account_schedule_assocs`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `list_account_schedule_assocs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account-schedule-assocs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsListAccountScheduleAssocsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_account_update_batches(self, **kwargs):  # noqa: E501
        """Lists and filters account update batches.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_account_update_batches(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] account_migration_ids: The IDs of the account migrations that account update batches are to be listed for. Required; must be non-empty.
        :param int page_size: The number of results to be listed. Required; must be non-zero.
        :param str page_token: The token of the page the results are to be retrieved from. If empty, returns the first page of results. Optional.
        :return: AccountsListAccountUpdateBatchesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_account_update_batches_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_account_update_batches_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_account_update_batches_with_http_info(self, **kwargs):  # noqa: E501
        """Lists and filters account update batches.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_account_update_batches_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] account_migration_ids: The IDs of the account migrations that account update batches are to be listed for. Required; must be non-empty.
        :param int page_size: The number of results to be listed. Required; must be non-zero.
        :param str page_token: The token of the page the results are to be retrieved from. If empty, returns the first page of results. Optional.
        :return: AccountsListAccountUpdateBatchesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_migration_ids', 'page_size', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_account_update_batches" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_migration_ids' in params:
            query_params.append(('account_migration_ids', params['account_migration_ids']))  # noqa: E501
            collection_formats['account_migration_ids'] = 'multi'  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account-update-batches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsListAccountUpdateBatchesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_account_updates(self, **kwargs):  # noqa: E501
        """Lists and filters account updates for a specified account ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_account_updates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The ID of the account that updates are to be listed for. Required.
        :param list[str] statuses: Statuses of account updates to filter on. Optional.
        :param int page_size: The number of results to be listed. Required; must be non-zero.
        :param str page_token: Token of the page the results are to be retrieved from. If empty, returns the first page of results. Optional.
        :return: AccountsListAccountUpdatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_account_updates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_account_updates_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_account_updates_with_http_info(self, **kwargs):  # noqa: E501
        """Lists and filters account updates for a specified account ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_account_updates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The ID of the account that updates are to be listed for. Required.
        :param list[str] statuses: Statuses of account updates to filter on. Optional.
        :param int page_size: The number of results to be listed. Required; must be non-zero.
        :param str page_token: Token of the page the results are to be retrieved from. If empty, returns the first page of results. Optional.
        :return: AccountsListAccountUpdatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'statuses', 'page_size', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_account_updates" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501
        if 'statuses' in params:
            query_params.append(('statuses', params['statuses']))  # noqa: E501
            collection_formats['statuses'] = 'multi'  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account-updates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsListAccountUpdatesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_accounts(self, page_size, **kwargs):  # noqa: E501
        """Retrieves all the accounts for a customer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_accounts(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to be listed.  Required. Min: 1. Max: 1000. (required)
        :param str stakeholder_id: The  ID of the stakeholder whose accounts are to be listed. Optional.
        :param str view: The view of the data to be returned. Optional.
        :param str page_token: Token of the page the results are to be retrieved from. If empty, returns the first page of results. Optional.
        :param list[str] account_statuses: List of inclusive OR account status filters. Must be URL encoded. Optional.
        :param list[str] product_version_ids: List of inclusive OR product version ID filters. Must be URL encoded. Optional.
        :param RangesTimestampRange opening_timestamp_range:
        :param RangesTimestampRange closing_timestamp_range:
        :return: AccountsListAccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_accounts_with_http_info(page_size, **kwargs)  # noqa: E501
        else:
            (data) = self.list_accounts_with_http_info(page_size, **kwargs)  # noqa: E501
            return data

    def list_accounts_with_http_info(self, page_size, **kwargs):  # noqa: E501
        """Retrieves all the accounts for a customer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_accounts_with_http_info(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to be listed.  Required. Min: 1. Max: 1000. (required)
        :param str stakeholder_id: The  ID of the stakeholder whose accounts are to be listed. Optional.
        :param str view: The view of the data to be returned. Optional.
        :param str page_token: Token of the page the results are to be retrieved from. If empty, returns the first page of results. Optional.
        :param list[str] account_statuses: List of inclusive OR account status filters. Must be URL encoded. Optional.
        :param list[str] product_version_ids: List of inclusive OR product version ID filters. Must be URL encoded. Optional.
        :param RangesTimestampRange opening_timestamp_range:
        :param RangesTimestampRange closing_timestamp_range:
        :return: AccountsListAccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'stakeholder_id', 'view', 'page_token', 'account_statuses', 'product_version_ids', 'opening_timestamp_range', 'closing_timestamp_range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `list_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'stakeholder_id' in params:
            query_params.append(('stakeholder_id', params['stakeholder_id']))  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501
        if 'account_statuses' in params:
            query_params.append(('account_statuses', params['account_statuses']))  # noqa: E501
            collection_formats['account_statuses'] = 'multi'  # noqa: E501
        if 'product_version_ids' in params:
            query_params.append(('product_version_ids', params['product_version_ids']))  # noqa: E501
            collection_formats['product_version_ids'] = 'multi'  # noqa: E501
        if 'opening_timestamp_range' in params:
            query_params.append(('opening_timestamp_range', params['opening_timestamp_range']))  # noqa: E501
        if 'closing_timestamp_range' in params:
            query_params.append(('closing_timestamp_range', params['closing_timestamp_range']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsListAccountsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_account(self, body, account_id, **kwargs):  # noqa: E501
        """Updates a customer's account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_account(body, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountsUpdateAccountRequest body: (required)
        :param str account_id: A unique ID for an account. Optional for create requests. (required)
        :return: AccountsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_account_with_http_info(body, account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_account_with_http_info(body, account_id, **kwargs)  # noqa: E501
            return data

    def update_account_with_http_info(self, body, account_id, **kwargs):  # noqa: E501
        """Updates a customer's account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_account_with_http_info(body, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountsUpdateAccountRequest body: (required)
        :param str account_id: A unique ID for an account. Optional for create requests. (required)
        :return: AccountsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_account`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `update_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account.id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account.id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_account_details(self, body, account_id, **kwargs):  # noqa: E501
        """Updates the details of an account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_account_details(body, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountsUpdateAccountDetailsRequest body: (required)
        :param str account_id: The account that is to be updated. Required. (required)
        :return: AccountsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_account_details_with_http_info(body, account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_account_details_with_http_info(body, account_id, **kwargs)  # noqa: E501
            return data

    def update_account_details_with_http_info(self, body, account_id, **kwargs):  # noqa: E501
        """Updates the details of an account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_account_details_with_http_info(body, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountsUpdateAccountDetailsRequest body: (required)
        :param str account_id: The account that is to be updated. Required. (required)
        :return: AccountsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_account_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_account_details`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `update_account_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}:updateDetails', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_account_migration(self, body, account_migration_id, **kwargs):  # noqa: E501
        """Updates an account migration. Only updates to the account migration status are currently supported.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_account_migration(body, account_migration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountsUpdateAccountMigrationRequest body: (required)
        :param str account_migration_id: A unique identifier for the account migration. Optional. (required)
        :return: AccountsAccountMigration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_account_migration_with_http_info(body, account_migration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_account_migration_with_http_info(body, account_migration_id, **kwargs)  # noqa: E501
            return data

    def update_account_migration_with_http_info(self, body, account_migration_id, **kwargs):  # noqa: E501
        """Updates an account migration. Only updates to the account migration status are currently supported.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_account_migration_with_http_info(body, account_migration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountsUpdateAccountMigrationRequest body: (required)
        :param str account_migration_id: A unique identifier for the account migration. Optional. (required)
        :return: AccountsAccountMigration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'account_migration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_account_migration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_account_migration`")  # noqa: E501
        # verify the required parameter 'account_migration_id' is set
        if ('account_migration_id' not in params or
                params['account_migration_id'] is None):
            raise ValueError("Missing the required parameter `account_migration_id` when calling `update_account_migration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_migration_id' in params:
            path_params['account_migration.id'] = params['account_migration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account-migrations/{account_migration.id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsAccountMigration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
