# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from common.vault.oas.api_client import ApiClient


class CoreAPIBalancesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_balance(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific balance. */v1/balance* has been *deprecated* in *2.2.0* and will be removed in *4.0.0*. _Use /v1/balances instead._  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_balance(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the balance to be retrieved. Required. (required)
        :return: BalancesBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_balance_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_balance_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_balance_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific balance. */v1/balance* has been *deprecated* in *2.2.0* and will be removed in *4.0.0*. _Use /v1/balances instead._  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_balance_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the balance to be retrieved. Required. (required)
        :return: BalancesBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_balance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_balance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/balances/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BalancesBalance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_balance2(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific balance. */v1/balance* has been *deprecated* in *2.2.0* and will be removed in *4.0.0*. _Use /v1/balances instead._  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_balance2(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the balance to be retrieved. Required. (required)
        :return: BalancesBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_balance2_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_balance2_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_balance2_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific balance. */v1/balance* has been *deprecated* in *2.2.0* and will be removed in *4.0.0*. _Use /v1/balances instead._  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_balance2_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the balance to be retrieved. Required. (required)
        :return: BalancesBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_balance2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_balance2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/balance/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BalancesBalance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_balances(self, account_id, page_size, **kwargs):  # noqa: E501
        """Retrieves balances for the supplied account ID with optional filters applied. This can be used to query either historical balance time series or the latest balances of an account.  # noqa: E501

        In cases of backdated postings, multiple balances may be generated for a given posting instruction batch. This endpoint will always return the last updated balance for each batch.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_balances(account_id, page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The ID of the account the balances belong to. Required.  Required. (required)
        :param int page_size: The number of results to be retrieved. Required.  Required. Min: 1. Max: 100. (required)
        :param str posting_instruction_batch_id: The posting instruction batch ID that initially created the balance. Optional.
        :param ListBalancesRequestTimeRange time_range:
        :param bool live: A live filter restricts the result to the last update for every combination of account ID, address, phase, asset and denomination. Cannot be set if time range is set.
        :param list[str] order_by: The order the returned balances are sorted in. Optional.
        :param str page_token: The token of the page the results are to be retrieved from. If empty, this is the first page of results. Optional.
        :return: BalancesListBalancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_balances_with_http_info(account_id, page_size, **kwargs)  # noqa: E501
        else:
            (data) = self.list_balances_with_http_info(account_id, page_size, **kwargs)  # noqa: E501
            return data

    def list_balances_with_http_info(self, account_id, page_size, **kwargs):  # noqa: E501
        """Retrieves balances for the supplied account ID with optional filters applied. This can be used to query either historical balance time series or the latest balances of an account.  # noqa: E501

        In cases of backdated postings, multiple balances may be generated for a given posting instruction batch. This endpoint will always return the last updated balance for each batch.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_balances_with_http_info(account_id, page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The ID of the account the balances belong to. Required.  Required. (required)
        :param int page_size: The number of results to be retrieved. Required.  Required. Min: 1. Max: 100. (required)
        :param str posting_instruction_batch_id: The posting instruction batch ID that initially created the balance. Optional.
        :param ListBalancesRequestTimeRange time_range:
        :param bool live: A live filter restricts the result to the last update for every combination of account ID, address, phase, asset and denomination. Cannot be set if time range is set.
        :param list[str] order_by: The order the returned balances are sorted in. Optional.
        :param str page_token: The token of the page the results are to be retrieved from. If empty, this is the first page of results. Optional.
        :return: BalancesListBalancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'page_size', 'posting_instruction_batch_id', 'time_range', 'live', 'order_by', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_balances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `list_balances`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `list_balances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501
        if 'posting_instruction_batch_id' in params:
            query_params.append(('posting_instruction_batch_id', params['posting_instruction_batch_id']))  # noqa: E501
        if 'time_range' in params:
            query_params.append(('time_range', params['time_range']))  # noqa: E501
        if 'live' in params:
            query_params.append(('live', params['live']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'multi'  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/balances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BalancesListBalancesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_balances_live(self, page_size, **kwargs):  # noqa: E501
        """Retrieves the latest balances for the supplied account IDs ordered by decreasing value timestamp value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_balances_live(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to be retrieved. Required.  Required. Min: 1. Max: 10000. (required)
        :param list[str] account_ids: The IDs of the accounts the balances belong to. Required.
        :param list[str] account_addresses: Filters results by account address. Optional.
        :param str page_token: The token of the page the results are to be retrieved from. If empty, this is the first page of results. Optional.
        :return: BalancesListBalancesLiveResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_balances_live_with_http_info(page_size, **kwargs)  # noqa: E501
        else:
            (data) = self.list_balances_live_with_http_info(page_size, **kwargs)  # noqa: E501
            return data

    def list_balances_live_with_http_info(self, page_size, **kwargs):  # noqa: E501
        """Retrieves the latest balances for the supplied account IDs ordered by decreasing value timestamp value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_balances_live_with_http_info(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to be retrieved. Required.  Required. Min: 1. Max: 10000. (required)
        :param list[str] account_ids: The IDs of the accounts the balances belong to. Required.
        :param list[str] account_addresses: Filters results by account address. Optional.
        :param str page_token: The token of the page the results are to be retrieved from. If empty, this is the first page of results. Optional.
        :return: BalancesListBalancesLiveResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'account_ids', 'account_addresses', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_balances_live" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `list_balances_live`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_ids' in params:
            query_params.append(('account_ids', params['account_ids']))  # noqa: E501
            collection_formats['account_ids'] = 'multi'  # noqa: E501
        if 'account_addresses' in params:
            query_params.append(('account_addresses', params['account_addresses']))  # noqa: E501
            collection_formats['account_addresses'] = 'multi'  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/balances/live', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BalancesListBalancesLiveResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_balances_time_range(self, page_size, **kwargs):  # noqa: E501
        """Retrieves a time range of balances for the supplied account IDs ordered by decreasing value timestamp value. This includes all balance events within the time range and the latest state of the balances as of the `from_time`, if provided, which could be prior to the time range.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_balances_time_range(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to be retrieved. Required.  Required. Min: 1. Max: 10000. (required)
        :param list[str] account_ids: The IDs of the accounts the balances belong to. Required.
        :param list[str] account_addresses: Filters results by account address.
        :param datetime from_time: The earliest time in the time range of the returned balances. Optional. If included, will also return the latest balance event before the `from_time` for comparison. If omitted, the results will start from the first available balance event.
        :param datetime to_time: The latest time in the time range of the returned balances. Optional. If omitted, the results will end at the last available balance event.
        :param str page_token: Token of the page the results are to be retrieved from. If empty, this is the first page of results. Optional.
        :return: BalancesListBalancesTimeRangeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_balances_time_range_with_http_info(page_size, **kwargs)  # noqa: E501
        else:
            (data) = self.list_balances_time_range_with_http_info(page_size, **kwargs)  # noqa: E501
            return data

    def list_balances_time_range_with_http_info(self, page_size, **kwargs):  # noqa: E501
        """Retrieves a time range of balances for the supplied account IDs ordered by decreasing value timestamp value. This includes all balance events within the time range and the latest state of the balances as of the `from_time`, if provided, which could be prior to the time range.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_balances_time_range_with_http_info(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to be retrieved. Required.  Required. Min: 1. Max: 10000. (required)
        :param list[str] account_ids: The IDs of the accounts the balances belong to. Required.
        :param list[str] account_addresses: Filters results by account address.
        :param datetime from_time: The earliest time in the time range of the returned balances. Optional. If included, will also return the latest balance event before the `from_time` for comparison. If omitted, the results will start from the first available balance event.
        :param datetime to_time: The latest time in the time range of the returned balances. Optional. If omitted, the results will end at the last available balance event.
        :param str page_token: Token of the page the results are to be retrieved from. If empty, this is the first page of results. Optional.
        :return: BalancesListBalancesTimeRangeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'account_ids', 'account_addresses', 'from_time', 'to_time', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_balances_time_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `list_balances_time_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_ids' in params:
            query_params.append(('account_ids', params['account_ids']))  # noqa: E501
            collection_formats['account_ids'] = 'multi'  # noqa: E501
        if 'account_addresses' in params:
            query_params.append(('account_addresses', params['account_addresses']))  # noqa: E501
            collection_formats['account_addresses'] = 'multi'  # noqa: E501
        if 'from_time' in params:
            query_params.append(('from_time', params['from_time']))  # noqa: E501
        if 'to_time' in params:
            query_params.append(('to_time', params['to_time']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/balances/timerange', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BalancesListBalancesTimeRangeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
