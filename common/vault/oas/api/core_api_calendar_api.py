# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from common.vault.oas.api_client import ApiClient


class CoreAPICalendarApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def batch_get_calendar_events(self, **kwargs):  # noqa: E501
        """BatchGetCalendarEvents retrieves a list of Calendar Events using their IDs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_calendar_events(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: Maps the Calendar ID to the requested Calendars.
        :return: CalendarBatchGetCalendarEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_get_calendar_events_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.batch_get_calendar_events_with_http_info(**kwargs)  # noqa: E501
            return data

    def batch_get_calendar_events_with_http_info(self, **kwargs):  # noqa: E501
        """BatchGetCalendarEvents retrieves a list of Calendar Events using their IDs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_calendar_events_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: Maps the Calendar ID to the requested Calendars.
        :return: CalendarBatchGetCalendarEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_get_calendar_events" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/calendar-event:batchGet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalendarBatchGetCalendarEventsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def calculate_calendar_period(self, calendar_id, **kwargs):  # noqa: E501
        """CalculateCalendarPeriod calculates the number of period resolution units from the start epoch of the Calendar to the given time.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calculate_calendar_period(calendar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str calendar_id: The Calendar ID that will be used when calculating the number of period resolution units from the Calendar's start epoch. (required)
        :param datetime timestamp: The latest time that the number of period resolution units is calculated up to. Defaults to the current time.
        :return: CalendarCalendarPeriod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.calculate_calendar_period_with_http_info(calendar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.calculate_calendar_period_with_http_info(calendar_id, **kwargs)  # noqa: E501
            return data

    def calculate_calendar_period_with_http_info(self, calendar_id, **kwargs):  # noqa: E501
        """CalculateCalendarPeriod calculates the number of period resolution units from the start epoch of the Calendar to the given time.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calculate_calendar_period_with_http_info(calendar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str calendar_id: The Calendar ID that will be used when calculating the number of period resolution units from the Calendar's start epoch. (required)
        :param datetime timestamp: The latest time that the number of period resolution units is calculated up to. Defaults to the current time.
        :return: CalendarCalendarPeriod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['calendar_id', 'timestamp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calculate_calendar_period" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'calendar_id' is set
        if ('calendar_id' not in params or
                params['calendar_id'] is None):
            raise ValueError("Missing the required parameter `calendar_id` when calling `calculate_calendar_period`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'calendar_id' in params:
            path_params['calendar_id'] = params['calendar_id']  # noqa: E501

        query_params = []
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/calendar/{calendar_id}:calculatePeriod', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalendarCalendarPeriod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_current_calendar_period(self, body, calendar_id, **kwargs):  # noqa: E501
        """ChangeCurrentCalendarPeriod changes the duration of the current calendar period.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_current_calendar_period(body, calendar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalendarChangeCurrentCalendarPeriodRequest body: (required)
        :param str calendar_id: ID of the calendar. (required)
        :return: CalendarCalendarPeriod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_current_calendar_period_with_http_info(body, calendar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_current_calendar_period_with_http_info(body, calendar_id, **kwargs)  # noqa: E501
            return data

    def change_current_calendar_period_with_http_info(self, body, calendar_id, **kwargs):  # noqa: E501
        """ChangeCurrentCalendarPeriod changes the duration of the current calendar period.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_current_calendar_period_with_http_info(body, calendar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalendarChangeCurrentCalendarPeriodRequest body: (required)
        :param str calendar_id: ID of the calendar. (required)
        :return: CalendarCalendarPeriod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'calendar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_current_calendar_period" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `change_current_calendar_period`")  # noqa: E501
        # verify the required parameter 'calendar_id' is set
        if ('calendar_id' not in params or
                params['calendar_id'] is None):
            raise ValueError("Missing the required parameter `calendar_id` when calling `change_current_calendar_period`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'calendar_id' in params:
            path_params['calendar_id'] = params['calendar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/calendar/{calendar_id}/period/current:change', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalendarCalendarPeriod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_calendar(self, body, **kwargs):  # noqa: E501
        """CreateCalendar creates a Calendar.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_calendar(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalendarCreateCalendarRequest body: (required)
        :return: CalendarCalendar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_calendar_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_calendar_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_calendar_with_http_info(self, body, **kwargs):  # noqa: E501
        """CreateCalendar creates a Calendar.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_calendar_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalendarCreateCalendarRequest body: (required)
        :return: CalendarCalendar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_calendar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_calendar`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/calendar', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalendarCalendar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_calendar_event(self, body, **kwargs):  # noqa: E501
        """CreateCalendarEvent creates a Calendar Event. From Vault **4.0.0** onwards, only active Calendar Events set in the future and associated with active Calendars can be created.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_calendar_event(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalendarCreateCalendarEventRequest body: (required)
        :return: CalendarCalendarEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_calendar_event_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_calendar_event_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_calendar_event_with_http_info(self, body, **kwargs):  # noqa: E501
        """CreateCalendarEvent creates a Calendar Event. From Vault **4.0.0** onwards, only active Calendar Events set in the future and associated with active Calendars can be created.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_calendar_event_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalendarCreateCalendarEventRequest body: (required)
        :return: CalendarCalendarEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_calendar_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_calendar_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/calendar-event', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalendarCalendarEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_calendar_period_descriptor(self, body, **kwargs):  # noqa: E501
        """CreateCalendarPeriodDescriptor creates a Calendar Period Descriptor.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_calendar_period_descriptor(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalendarCreateCalendarPeriodDescriptorRequest body: (required)
        :return: CalendarCalendarPeriodDescriptor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_calendar_period_descriptor_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_calendar_period_descriptor_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_calendar_period_descriptor_with_http_info(self, body, **kwargs):  # noqa: E501
        """CreateCalendarPeriodDescriptor creates a Calendar Period Descriptor.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_calendar_period_descriptor_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalendarCreateCalendarPeriodDescriptorRequest body: (required)
        :return: CalendarCalendarPeriodDescriptor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_calendar_period_descriptor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_calendar_period_descriptor`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/calendar-period-descriptor', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalendarCalendarPeriodDescriptor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_calendar(self, id, **kwargs):  # noqa: E501
        """GetCalendar retrieves a Calendar using its ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_calendar(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Maps the ID to the requested Calendar. (required)
        :return: CalendarCalendar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_calendar_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_calendar_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_calendar_with_http_info(self, id, **kwargs):  # noqa: E501
        """GetCalendar retrieves a Calendar using its ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_calendar_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Maps the ID to the requested Calendar. (required)
        :return: CalendarCalendar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_calendar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_calendar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/calendar/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalendarCalendar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_calendar_event(self, id, **kwargs):  # noqa: E501
        """GetCalendarEvent retrieves a Calendar Event using its ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_calendar_event(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Maps the ID to the requested CalendarEvent. (required)
        :return: CalendarCalendarEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_calendar_event_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_calendar_event_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_calendar_event_with_http_info(self, id, **kwargs):  # noqa: E501
        """GetCalendarEvent retrieves a Calendar Event using its ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_calendar_event_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Maps the ID to the requested CalendarEvent. (required)
        :return: CalendarCalendarEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_calendar_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_calendar_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/calendar-event/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalendarCalendarEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_calendar_events(self, page_size, **kwargs):  # noqa: E501
        """ListCalendarEvents retrieves a list of Calendar Events that occur within a specified time range.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_calendar_events(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to be listed. Must be non-zero.  Required. (required)
        :param list[str] calendar_ids: Filters by Calendars IDs; if this is not set, all Calendars will be included.
        :param list[str] calendar_event_names: Filters by Calendar Event names; if filter criteria are not given, all Calendar Event names will be listed.
        :param bool is_active:
        :param RangesTimestampRange calendar_timestamp_range:
        :param str page_token: Token of the page the results are to be retrieved from. If set, all other filtering parameters are ignored.
        :param str active_calendar_event:
        :return: CalendarListCalendarEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_calendar_events_with_http_info(page_size, **kwargs)  # noqa: E501
        else:
            (data) = self.list_calendar_events_with_http_info(page_size, **kwargs)  # noqa: E501
            return data

    def list_calendar_events_with_http_info(self, page_size, **kwargs):  # noqa: E501
        """ListCalendarEvents retrieves a list of Calendar Events that occur within a specified time range.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_calendar_events_with_http_info(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to be listed. Must be non-zero.  Required. (required)
        :param list[str] calendar_ids: Filters by Calendars IDs; if this is not set, all Calendars will be included.
        :param list[str] calendar_event_names: Filters by Calendar Event names; if filter criteria are not given, all Calendar Event names will be listed.
        :param bool is_active:
        :param RangesTimestampRange calendar_timestamp_range:
        :param str page_token: Token of the page the results are to be retrieved from. If set, all other filtering parameters are ignored.
        :param str active_calendar_event:
        :return: CalendarListCalendarEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'calendar_ids', 'calendar_event_names', 'is_active', 'calendar_timestamp_range', 'page_token', 'active_calendar_event']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_calendar_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `list_calendar_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'calendar_ids' in params:
            query_params.append(('calendar_ids', params['calendar_ids']))  # noqa: E501
            collection_formats['calendar_ids'] = 'multi'  # noqa: E501
        if 'calendar_event_names' in params:
            query_params.append(('calendar_event_names', params['calendar_event_names']))  # noqa: E501
            collection_formats['calendar_event_names'] = 'multi'  # noqa: E501
        if 'is_active' in params:
            query_params.append(('is_active', params['is_active']))  # noqa: E501
        if 'calendar_timestamp_range' in params:
            query_params.append(('calendar_timestamp_range', params['calendar_timestamp_range']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501
        if 'active_calendar_event' in params:
            query_params.append(('active_calendar_event', params['active_calendar_event']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/calendar-event', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalendarListCalendarEventsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_calendars(self, page_size, **kwargs):  # noqa: E501
        """ListCalendars retrieves a list of Calendars.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_calendars(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to be listed. Must be non-zero.  Required. (required)
        :param str page_token: If a page token is supplied, the page size value must match the original value used to generate the token. Optional.
        :param list[str] order_by: The ordering of the results. Optional.
        :param CalendarNamePatternMatch name_pattern_match:
        :return: CalendarListCalendarsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_calendars_with_http_info(page_size, **kwargs)  # noqa: E501
        else:
            (data) = self.list_calendars_with_http_info(page_size, **kwargs)  # noqa: E501
            return data

    def list_calendars_with_http_info(self, page_size, **kwargs):  # noqa: E501
        """ListCalendars retrieves a list of Calendars.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_calendars_with_http_info(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to be listed. Must be non-zero.  Required. (required)
        :param str page_token: If a page token is supplied, the page size value must match the original value used to generate the token. Optional.
        :param list[str] order_by: The ordering of the results. Optional.
        :param CalendarNamePatternMatch name_pattern_match:
        :return: CalendarListCalendarsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'page_token', 'order_by', 'name_pattern_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_calendars" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `list_calendars`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'multi'  # noqa: E501
        if 'name_pattern_match' in params:
            query_params.append(('name_pattern_match', params['name_pattern_match']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/calendars', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalendarListCalendarsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_calendar(self, body, calendar_id, **kwargs):  # noqa: E501
        """UpdateCalendar updates a Calendar based on a provided Calendar ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_calendar(body, calendar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalendarUpdateCalendarRequest body: (required)
        :param str calendar_id: The ID of the calendar that is to be updated. (required)
        :return: CalendarCalendar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_calendar_with_http_info(body, calendar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_calendar_with_http_info(body, calendar_id, **kwargs)  # noqa: E501
            return data

    def update_calendar_with_http_info(self, body, calendar_id, **kwargs):  # noqa: E501
        """UpdateCalendar updates a Calendar based on a provided Calendar ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_calendar_with_http_info(body, calendar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalendarUpdateCalendarRequest body: (required)
        :param str calendar_id: The ID of the calendar that is to be updated. (required)
        :return: CalendarCalendar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'calendar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_calendar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_calendar`")  # noqa: E501
        # verify the required parameter 'calendar_id' is set
        if ('calendar_id' not in params or
                params['calendar_id'] is None):
            raise ValueError("Missing the required parameter `calendar_id` when calling `update_calendar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'calendar_id' in params:
            path_params['calendar_id'] = params['calendar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/calendar/{calendar_id}:updateDetails', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalendarCalendar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_calendar_event(self, body, calendar_event_id, **kwargs):  # noqa: E501
        """UpdateCalendarEvent updates a Calendar Event based on a provided Calendar Event ID. From Vault **4.0.0** onwards, an inactive Calendar Event can only have the `is_active` field updated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_calendar_event(body, calendar_event_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalendarUpdateCalendarEventRequest body: (required)
        :param str calendar_event_id: The ID of the calendar event that is to be updated. (required)
        :return: CalendarCalendarEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_calendar_event_with_http_info(body, calendar_event_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_calendar_event_with_http_info(body, calendar_event_id, **kwargs)  # noqa: E501
            return data

    def update_calendar_event_with_http_info(self, body, calendar_event_id, **kwargs):  # noqa: E501
        """UpdateCalendarEvent updates a Calendar Event based on a provided Calendar Event ID. From Vault **4.0.0** onwards, an inactive Calendar Event can only have the `is_active` field updated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_calendar_event_with_http_info(body, calendar_event_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CalendarUpdateCalendarEventRequest body: (required)
        :param str calendar_event_id: The ID of the calendar event that is to be updated. (required)
        :return: CalendarCalendarEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'calendar_event_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_calendar_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_calendar_event`")  # noqa: E501
        # verify the required parameter 'calendar_event_id' is set
        if ('calendar_event_id' not in params or
                params['calendar_event_id'] is None):
            raise ValueError("Missing the required parameter `calendar_event_id` when calling `update_calendar_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'calendar_event_id' in params:
            path_params['calendar_event_id'] = params['calendar_event_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/calendar-event/{calendar_event_id}:updateDetails', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalendarCalendarEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
