# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from common.vault.oas.api_client import ApiClient


class CoreAPILedgerBalancesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_ledger_balance(self, id, **kwargs):  # noqa: E501
        """Retrieves a Ledger Balance by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ledger_balance(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Ledger Balance to be retrieved. Required. (required)
        :return: LedgerBalancesLedgerBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ledger_balance_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ledger_balance_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_ledger_balance_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a Ledger Balance by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ledger_balance_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Ledger Balance to be retrieved. Required. (required)
        :return: LedgerBalancesLedgerBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ledger_balance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ledger_balance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/ledger-balances/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LedgerBalancesLedgerBalance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_ledger_balances(self, ledger_timestamp, **kwargs):  # noqa: E501
        """Lists Ledger Balances for the supplied account IDs at a specified timestamp. The timestamp refers to the Postings Ledger insertion time, thus a Ledger Balance is the sum of all postings up to that Postings Ledger insertion timestamp.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ledger_balances(ledger_timestamp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime ledger_timestamp: The Postings Ledger timestamp at which to retrieve Ledger Balances. Required.  Required. (required)
        :param list[str] account_ids: The IDs of the accounts that Ledger Balances are to be listed for. Required.
        :param int page_size: The number of results to be retrieved. Required. Validated in the ledger balance service.
        :param str page_token: The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.
        :return: LedgerBalancesListLedgerBalancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_ledger_balances_with_http_info(ledger_timestamp, **kwargs)  # noqa: E501
        else:
            (data) = self.list_ledger_balances_with_http_info(ledger_timestamp, **kwargs)  # noqa: E501
            return data

    def list_ledger_balances_with_http_info(self, ledger_timestamp, **kwargs):  # noqa: E501
        """Lists Ledger Balances for the supplied account IDs at a specified timestamp. The timestamp refers to the Postings Ledger insertion time, thus a Ledger Balance is the sum of all postings up to that Postings Ledger insertion timestamp.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ledger_balances_with_http_info(ledger_timestamp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime ledger_timestamp: The Postings Ledger timestamp at which to retrieve Ledger Balances. Required.  Required. (required)
        :param list[str] account_ids: The IDs of the accounts that Ledger Balances are to be listed for. Required.
        :param int page_size: The number of results to be retrieved. Required. Validated in the ledger balance service.
        :param str page_token: The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.
        :return: LedgerBalancesListLedgerBalancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ledger_timestamp', 'account_ids', 'page_size', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_ledger_balances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ledger_timestamp' is set
        if ('ledger_timestamp' not in params or
                params['ledger_timestamp'] is None):
            raise ValueError("Missing the required parameter `ledger_timestamp` when calling `list_ledger_balances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_ids' in params:
            query_params.append(('account_ids', params['account_ids']))  # noqa: E501
            collection_formats['account_ids'] = 'multi'  # noqa: E501
        if 'ledger_timestamp' in params:
            query_params.append(('ledger_timestamp', params['ledger_timestamp']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/ledger-balances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LedgerBalancesListLedgerBalancesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
