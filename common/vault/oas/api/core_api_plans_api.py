# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from common.vault.oas.api_client import ApiClient


class CoreAPIPlansApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def batch_get_account_plan_assocs(self, ids, **kwargs):  # noqa: E501
        """Retrieves one or more account plan associations using the account plan association ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_account_plan_assocs(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: A list of the IDs of the account plan associations that are to be retrieved. Required; must be non-empty.  Required. Min length: 1 characters. (required)
        :return: PlansBatchGetAccountPlanAssocsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_get_account_plan_assocs_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_get_account_plan_assocs_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def batch_get_account_plan_assocs_with_http_info(self, ids, **kwargs):  # noqa: E501
        """Retrieves one or more account plan associations using the account plan association ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_account_plan_assocs_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: A list of the IDs of the account plan associations that are to be retrieved. Required; must be non-empty.  Required. Min length: 1 characters. (required)
        :return: PlansBatchGetAccountPlanAssocsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_get_account_plan_assocs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `batch_get_account_plan_assocs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account-plan-assocs:batchGet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlansBatchGetAccountPlanAssocsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_get_plan_migrations(self, ids, **kwargs):  # noqa: E501
        """Retrieves one or more plan migrations using the plan migration ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_plan_migrations(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: IDs of the plan migrations to get. Mandatory.  Required. Min length: 1 characters. (required)
        :return: PlansBatchGetPlanMigrationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_get_plan_migrations_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_get_plan_migrations_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def batch_get_plan_migrations_with_http_info(self, ids, **kwargs):  # noqa: E501
        """Retrieves one or more plan migrations using the plan migration ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_plan_migrations_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: IDs of the plan migrations to get. Mandatory.  Required. Min length: 1 characters. (required)
        :return: PlansBatchGetPlanMigrationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_get_plan_migrations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `batch_get_plan_migrations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/plan-migrations:batchGet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlansBatchGetPlanMigrationsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_get_plan_updates(self, ids, **kwargs):  # noqa: E501
        """Retrieves one or more plan updates using the plan update ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_plan_updates(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: A list of the IDs of the plan updates that are to be retrieved. Required; must be non-empty.  Required. Min length: 1 characters. (required)
        :return: PlansBatchGetPlanUpdatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_get_plan_updates_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_get_plan_updates_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def batch_get_plan_updates_with_http_info(self, ids, **kwargs):  # noqa: E501
        """Retrieves one or more plan updates using the plan update ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_plan_updates_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: A list of the IDs of the plan updates that are to be retrieved. Required; must be non-empty.  Required. Min length: 1 characters. (required)
        :return: PlansBatchGetPlanUpdatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_get_plan_updates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `batch_get_plan_updates`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/plan-updates:batchGet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlansBatchGetPlanUpdatesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_get_plans(self, ids, **kwargs):  # noqa: E501
        """Retrieves one or more plans using the plan ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_plans(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: A list of the IDs of the plans that are to be retrieved. Required; must be non-empty.  Required. Min length: 1 characters. (required)
        :return: PlansBatchGetPlansResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_get_plans_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_get_plans_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def batch_get_plans_with_http_info(self, ids, **kwargs):  # noqa: E501
        """Retrieves one or more plans using the plan ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_plans_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: A list of the IDs of the plans that are to be retrieved. Required; must be non-empty.  Required. Min length: 1 characters. (required)
        :return: PlansBatchGetPlansResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_get_plans" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `batch_get_plans`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/plans:batchGet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlansBatchGetPlansResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_plan(self, body, **kwargs):  # noqa: E501
        """Creates a plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_plan(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlansCreatePlanRequest body: (required)
        :return: PlansPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_plan_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_plan_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_plan_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_plan_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlansCreatePlanRequest body: (required)
        :return: PlansPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/plans', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlansPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_plan_migration(self, body, **kwargs):  # noqa: E501
        """Creates a plan migration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_plan_migration(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlansCreatePlanMigrationRequest body: (required)
        :return: PlansPlanMigration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_plan_migration_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_plan_migration_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_plan_migration_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a plan migration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_plan_migration_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlansCreatePlanMigrationRequest body: (required)
        :return: PlansPlanMigration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_plan_migration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_plan_migration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/plan-migrations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlansPlanMigration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_plan_update(self, body, **kwargs):  # noqa: E501
        """Creates a plan update.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_plan_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlansCreatePlanUpdateRequest body: (required)
        :return: PlansPlanUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_plan_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_plan_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_plan_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a plan update.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_plan_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlansCreatePlanUpdateRequest body: (required)
        :return: PlansPlanUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_plan_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_plan_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/plan-updates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlansPlanUpdate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_account_plan_assocs(self, page_size, **kwargs):  # noqa: E501
        """Retrieves account plan associations using the provided filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_account_plan_assocs(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to be retrieved. Required.  Required. Min: 1. Max: 100. (required)
        :param list[str] account_ids: The IDs of accounts that account plan associations are to be listed for. Optional.
        :param list[str] plan_ids: The IDs of plans that account plan associations are to be listed for. Optional.
        :param RangesTimestampRange start_timestamp_range:
        :param RangesTimestampRange end_timestamp_range:
        :param str page_token: The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.
        :return: PlansListAccountPlanAssocsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_account_plan_assocs_with_http_info(page_size, **kwargs)  # noqa: E501
        else:
            (data) = self.list_account_plan_assocs_with_http_info(page_size, **kwargs)  # noqa: E501
            return data

    def list_account_plan_assocs_with_http_info(self, page_size, **kwargs):  # noqa: E501
        """Retrieves account plan associations using the provided filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_account_plan_assocs_with_http_info(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to be retrieved. Required.  Required. Min: 1. Max: 100. (required)
        :param list[str] account_ids: The IDs of accounts that account plan associations are to be listed for. Optional.
        :param list[str] plan_ids: The IDs of plans that account plan associations are to be listed for. Optional.
        :param RangesTimestampRange start_timestamp_range:
        :param RangesTimestampRange end_timestamp_range:
        :param str page_token: The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.
        :return: PlansListAccountPlanAssocsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'account_ids', 'plan_ids', 'start_timestamp_range', 'end_timestamp_range', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_account_plan_assocs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `list_account_plan_assocs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_ids' in params:
            query_params.append(('account_ids', params['account_ids']))  # noqa: E501
            collection_formats['account_ids'] = 'multi'  # noqa: E501
        if 'plan_ids' in params:
            query_params.append(('plan_ids', params['plan_ids']))  # noqa: E501
            collection_formats['plan_ids'] = 'multi'  # noqa: E501
        if 'start_timestamp_range' in params:
            query_params.append(('start_timestamp_range', params['start_timestamp_range']))  # noqa: E501
        if 'end_timestamp_range' in params:
            query_params.append(('end_timestamp_range', params['end_timestamp_range']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account-plan-assocs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlansListAccountPlanAssocsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_plan_migrations(self, page_size, **kwargs):  # noqa: E501
        """Lists all plan migrations with optional filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_plan_migrations(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: Number of results to be retrieved. Must be non-zero.  Required. Min: 1. Max: 100. (required)
        :param list[str] statuses: Statuses of plan migrations to filter on. Optional.
        :param str page_token: Token of the page from which to retrieve the results. If empty, the first page of results will be returned. Optional.
        :return: PlansListPlanMigrationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_plan_migrations_with_http_info(page_size, **kwargs)  # noqa: E501
        else:
            (data) = self.list_plan_migrations_with_http_info(page_size, **kwargs)  # noqa: E501
            return data

    def list_plan_migrations_with_http_info(self, page_size, **kwargs):  # noqa: E501
        """Lists all plan migrations with optional filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_plan_migrations_with_http_info(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: Number of results to be retrieved. Must be non-zero.  Required. Min: 1. Max: 100. (required)
        :param list[str] statuses: Statuses of plan migrations to filter on. Optional.
        :param str page_token: Token of the page from which to retrieve the results. If empty, the first page of results will be returned. Optional.
        :return: PlansListPlanMigrationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'statuses', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_plan_migrations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `list_plan_migrations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'statuses' in params:
            query_params.append(('statuses', params['statuses']))  # noqa: E501
            collection_formats['statuses'] = 'multi'  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/plan-migrations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlansListPlanMigrationsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_plan_schedules(self, page_size, **kwargs):  # noqa: E501
        """Retrieves plan schedules using the provided filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_plan_schedules(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to be retrieved. Required.  Required. Min: 1. Max: 20. (required)
        :param str plan_id: The plan ID that plan schedules are to be listed for. Required; must be non-empty.
        :param str page_token: The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.
        :return: PlansListPlanSchedulesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_plan_schedules_with_http_info(page_size, **kwargs)  # noqa: E501
        else:
            (data) = self.list_plan_schedules_with_http_info(page_size, **kwargs)  # noqa: E501
            return data

    def list_plan_schedules_with_http_info(self, page_size, **kwargs):  # noqa: E501
        """Retrieves plan schedules using the provided filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_plan_schedules_with_http_info(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to be retrieved. Required.  Required. Min: 1. Max: 20. (required)
        :param str plan_id: The plan ID that plan schedules are to be listed for. Required; must be non-empty.
        :param str page_token: The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.
        :return: PlansListPlanSchedulesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'plan_id', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_plan_schedules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `list_plan_schedules`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'plan_id' in params:
            query_params.append(('plan_id', params['plan_id']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/plan-schedules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlansListPlanSchedulesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_plan_updates(self, page_size, **kwargs):  # noqa: E501
        """Retrieves plan updates using the provided filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_plan_updates(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to be retrieved. Required.  Required. Min: 1. Max: 100. (required)
        :param list[str] plan_ids: The IDs of plans that plan updates are to be listed for. At least one of plan_ids and job_ids is required; must be non-empty.
        :param list[str] job_ids: IDs of the jobs that plan updates are to be listed for. At least one of plan_ids and job_ids is required.
        :param list[str] statuses: The statuses of plan updates to filter on. Optional.
        :param str page_token: The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.
        :return: PlansListPlanUpdatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_plan_updates_with_http_info(page_size, **kwargs)  # noqa: E501
        else:
            (data) = self.list_plan_updates_with_http_info(page_size, **kwargs)  # noqa: E501
            return data

    def list_plan_updates_with_http_info(self, page_size, **kwargs):  # noqa: E501
        """Retrieves plan updates using the provided filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_plan_updates_with_http_info(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to be retrieved. Required.  Required. Min: 1. Max: 100. (required)
        :param list[str] plan_ids: The IDs of plans that plan updates are to be listed for. At least one of plan_ids and job_ids is required; must be non-empty.
        :param list[str] job_ids: IDs of the jobs that plan updates are to be listed for. At least one of plan_ids and job_ids is required.
        :param list[str] statuses: The statuses of plan updates to filter on. Optional.
        :param str page_token: The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.
        :return: PlansListPlanUpdatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'plan_ids', 'job_ids', 'statuses', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_plan_updates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `list_plan_updates`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'plan_ids' in params:
            query_params.append(('plan_ids', params['plan_ids']))  # noqa: E501
            collection_formats['plan_ids'] = 'multi'  # noqa: E501
        if 'job_ids' in params:
            query_params.append(('job_ids', params['job_ids']))  # noqa: E501
            collection_formats['job_ids'] = 'multi'  # noqa: E501
        if 'statuses' in params:
            query_params.append(('statuses', params['statuses']))  # noqa: E501
            collection_formats['statuses'] = 'multi'  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/plan-updates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlansListPlanUpdatesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
