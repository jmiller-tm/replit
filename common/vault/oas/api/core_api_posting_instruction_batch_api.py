# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from common.vault.oas.api_client import ApiClient


class CoreAPIPostingInstructionBatchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def batch_get_async_operations(self, **kwargs):  # noqa: E501
        """Retrieves multiple AsyncOperations. The IDs provided must belong to AsyncOperations returned by /v1/posting-instruction-batches:asyncCreate.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_async_operations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: The IDs of the AsyncOperations to retrieve.
        :return: AsyncOperationsBatchGetAsyncOperationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_get_async_operations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.batch_get_async_operations_with_http_info(**kwargs)  # noqa: E501
            return data

    def batch_get_async_operations_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves multiple AsyncOperations. The IDs provided must belong to AsyncOperations returned by /v1/posting-instruction-batches:asyncCreate.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_async_operations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: The IDs of the AsyncOperations to retrieve.
        :return: AsyncOperationsBatchGetAsyncOperationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_get_async_operations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/posting-instruction-batches/async-operations:batchGet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncOperationsBatchGetAsyncOperationsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_get_posting_instruction_batches(self, ids, **kwargs):  # noqa: E501
        """Retrieves one or more posting instruction batches by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_posting_instruction_batches(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: A list of IDs of posting instruction batches to retrieve. Required; must be non-empty. This field must contain a valid UUID in the canonical 8-4-4-4-12 form. Required. (required)
        :return: PostingInstructionBatchesBatchGetPostingInstructionBatchesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_get_posting_instruction_batches_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_get_posting_instruction_batches_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def batch_get_posting_instruction_batches_with_http_info(self, ids, **kwargs):  # noqa: E501
        """Retrieves one or more posting instruction batches by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_posting_instruction_batches_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: A list of IDs of posting instruction batches to retrieve. Required; must be non-empty. This field must contain a valid UUID in the canonical 8-4-4-4-12 form. Required. (required)
        :return: PostingInstructionBatchesBatchGetPostingInstructionBatchesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_get_posting_instruction_batches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `batch_get_posting_instruction_batches`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/posting-instruction-batches:batchGet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingInstructionBatchesBatchGetPostingInstructionBatchesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_posting_instruction_batch_async(self, body, **kwargs):  # noqa: E501
        """Creates and returns an AsyncOperation to submit a PostingInstructionBatchRequest to the Postings API. The status of the posting instruction batch request can be checked by calling BatchGetAsyncOperations on the AsyncOperation ID.  # noqa: E501

        The Postings API is idempotent to duplicate PostingInstructionBatchRequest, and will respond idempotently to PostingInstructionBatchRequest messages with the same <client_id-request_id>. The CreatePostingInstructionBatchAsync endpoint is not idempotent and will create multiple AsyncOperation resources on duplicate calls.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_posting_instruction_batch_async(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1postingInstructionBatchesCreatePostingInstructionBatchRequest body: (required)
        :return: AsyncOperationsAsyncOperation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_posting_instruction_batch_async_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_posting_instruction_batch_async_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_posting_instruction_batch_async_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates and returns an AsyncOperation to submit a PostingInstructionBatchRequest to the Postings API. The status of the posting instruction batch request can be checked by calling BatchGetAsyncOperations on the AsyncOperation ID.  # noqa: E501

        The Postings API is idempotent to duplicate PostingInstructionBatchRequest, and will respond idempotently to PostingInstructionBatchRequest messages with the same <client_id-request_id>. The CreatePostingInstructionBatchAsync endpoint is not idempotent and will create multiple AsyncOperation resources on duplicate calls.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_posting_instruction_batch_async_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1postingInstructionBatchesCreatePostingInstructionBatchRequest body: (required)
        :return: AsyncOperationsAsyncOperation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_posting_instruction_batch_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_posting_instruction_batch_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/posting-instruction-batches:asyncCreate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncOperationsAsyncOperation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_posting_instruction_batch(self, id, **kwargs):  # noqa: E501
        """Retrieves a posting instruction batch by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_posting_instruction_batch(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the posting instruction batch to retrieve. (required)
        :return: V1PostingInstructionBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_posting_instruction_batch_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_posting_instruction_batch_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_posting_instruction_batch_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a posting instruction batch by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_posting_instruction_batch_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the posting instruction batch to retrieve. (required)
        :return: V1PostingInstructionBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_posting_instruction_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_posting_instruction_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/posting-instruction-batches/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1PostingInstructionBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_posting_instruction_batches(self, page_size, **kwargs):  # noqa: E501
        """Lists and filters posting instruction batches. Multiple filter parameters are joined by a logical AND operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_posting_instruction_batches(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to retrieve. Required; non-zero.  Required. Min: 1. Max: 100. (required)
        :param list[str] account_ids: Filters posting instruction batches by the `account_ids` of their associated posting instructions. Optional.
        :param list[str] client_batch_ids: Filters posting instruction batches by their `client_batch_ids`. Optional.
        :param list[str] payment_device_tokens:
        :param list[str] client_transaction_ids: Filters posting instruction batches by the `client_transaction_ids` of their associated posting instructions. Optional.
        :param str page_token: The token of the page to retrieve results from. If left empty, the first page of results will be returned. Optional.
        :param str order_by_direction: The direction to order results in, by `value_timestamp`. Optional.
        :param datetime start_time: Filters posting instruction batches by `value_timestamp`. The earliest posting instruction batch returned in the list will have been created after or at `start_time`. Optional.
        :param datetime end_time: Filters posting instruction batches by `value_timestamp`. The latest posting instruction batch returned in the list will have been created before `end_time`. Optional.
        :return: PostingInstructionBatchesListPostingInstructionBatchesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_posting_instruction_batches_with_http_info(page_size, **kwargs)  # noqa: E501
        else:
            (data) = self.list_posting_instruction_batches_with_http_info(page_size, **kwargs)  # noqa: E501
            return data

    def list_posting_instruction_batches_with_http_info(self, page_size, **kwargs):  # noqa: E501
        """Lists and filters posting instruction batches. Multiple filter parameters are joined by a logical AND operator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_posting_instruction_batches_with_http_info(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of results to retrieve. Required; non-zero.  Required. Min: 1. Max: 100. (required)
        :param list[str] account_ids: Filters posting instruction batches by the `account_ids` of their associated posting instructions. Optional.
        :param list[str] client_batch_ids: Filters posting instruction batches by their `client_batch_ids`. Optional.
        :param list[str] payment_device_tokens:
        :param list[str] client_transaction_ids: Filters posting instruction batches by the `client_transaction_ids` of their associated posting instructions. Optional.
        :param str page_token: The token of the page to retrieve results from. If left empty, the first page of results will be returned. Optional.
        :param str order_by_direction: The direction to order results in, by `value_timestamp`. Optional.
        :param datetime start_time: Filters posting instruction batches by `value_timestamp`. The earliest posting instruction batch returned in the list will have been created after or at `start_time`. Optional.
        :param datetime end_time: Filters posting instruction batches by `value_timestamp`. The latest posting instruction batch returned in the list will have been created before `end_time`. Optional.
        :return: PostingInstructionBatchesListPostingInstructionBatchesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'account_ids', 'client_batch_ids', 'payment_device_tokens', 'client_transaction_ids', 'page_token', 'order_by_direction', 'start_time', 'end_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_posting_instruction_batches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `list_posting_instruction_batches`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_ids' in params:
            query_params.append(('account_ids', params['account_ids']))  # noqa: E501
            collection_formats['account_ids'] = 'multi'  # noqa: E501
        if 'client_batch_ids' in params:
            query_params.append(('client_batch_ids', params['client_batch_ids']))  # noqa: E501
            collection_formats['client_batch_ids'] = 'multi'  # noqa: E501
        if 'payment_device_tokens' in params:
            query_params.append(('payment_device_tokens', params['payment_device_tokens']))  # noqa: E501
            collection_formats['payment_device_tokens'] = 'multi'  # noqa: E501
        if 'client_transaction_ids' in params:
            query_params.append(('client_transaction_ids', params['client_transaction_ids']))  # noqa: E501
            collection_formats['client_transaction_ids'] = 'multi'  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501
        if 'order_by_direction' in params:
            query_params.append(('order_by_direction', params['order_by_direction']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/posting-instruction-batches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingInstructionBatchesListPostingInstructionBatchesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_create_posting_instruction_batch_request(self, body, **kwargs):  # noqa: E501
        """Validates that a CreatePostingInstructionBatchRequest message is well-formed.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_create_posting_instruction_batch_request(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingInstructionBatchesValidateCreatePostingInstructionBatchRequestRequest body: (required)
        :return: PostingInstructionBatchesValidateCreatePostingInstructionBatchRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.validate_create_posting_instruction_batch_request_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_create_posting_instruction_batch_request_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def validate_create_posting_instruction_batch_request_with_http_info(self, body, **kwargs):  # noqa: E501
        """Validates that a CreatePostingInstructionBatchRequest message is well-formed.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_create_posting_instruction_batch_request_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingInstructionBatchesValidateCreatePostingInstructionBatchRequestRequest body: (required)
        :return: PostingInstructionBatchesValidateCreatePostingInstructionBatchRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_create_posting_instruction_batch_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `validate_create_posting_instruction_batch_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/create-posting-instruction-batch:validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingInstructionBatchesValidateCreatePostingInstructionBatchRequestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
