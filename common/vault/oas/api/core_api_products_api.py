# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from common.vault.oas.api_client import ApiClient


class CoreAPIProductsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def batch_get_product_versions(self, **kwargs):  # noqa: E501
        """Retrieves one or more product versions using the product version IDs specified.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_product_versions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: A list of the IDs of the product versions to be retrieved. Required; must be non-empty.
        :param str view: Indicates which fields should be included for the product versions. Optional; default is basic view.
        :return: ProductsBatchGetProductVersionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_get_product_versions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.batch_get_product_versions_with_http_info(**kwargs)  # noqa: E501
            return data

    def batch_get_product_versions_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves one or more product versions using the product version IDs specified.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_product_versions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: A list of the IDs of the product versions to be retrieved. Required; must be non-empty.
        :param str view: Indicates which fields should be included for the product versions. Optional; default is basic view.
        :return: ProductsBatchGetProductVersionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids', 'view']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_get_product_versions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/product-versions:batchGet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductsBatchGetProductVersionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_get_products(self, **kwargs):  # noqa: E501
        """Retrieves one or more products using the product IDs specified.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_products(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: The list of product IDs for the products that are to be retrieved. Required; must be non-empty.
        :return: ProductsBatchGetProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_get_products_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.batch_get_products_with_http_info(**kwargs)  # noqa: E501
            return data

    def batch_get_products_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves one or more products using the product IDs specified.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_get_products_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: The list of product IDs for the products that are to be retrieved. Required; must be non-empty.
        :return: ProductsBatchGetProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_get_products" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/products:batchGet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductsBatchGetProductsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_product_version(self, body, **kwargs):  # noqa: E501
        """Creates a product version and product.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_product_version(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsCreateProductVersionRequest body: (required)
        :return: ProductsProductVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_product_version_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_product_version_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_product_version_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a product version and product.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_product_version_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsCreateProductVersionRequest body: (required)
        :return: ProductsProductVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_product_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_product_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/product-versions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductsProductVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_product_version_parameters_timeseries(self, product_version_id, **kwargs):  # noqa: E501
        """Lists the timeseries for the parameters of a product version.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_product_version_parameters_timeseries(product_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_version_id: The product version ID the parameter timeseries is to be retrieved for. (required)
        :return: ProductsListProductVersionParametersTimeseriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_product_version_parameters_timeseries_with_http_info(product_version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_product_version_parameters_timeseries_with_http_info(product_version_id, **kwargs)  # noqa: E501
            return data

    def list_product_version_parameters_timeseries_with_http_info(self, product_version_id, **kwargs):  # noqa: E501
        """Lists the timeseries for the parameters of a product version.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_product_version_parameters_timeseries_with_http_info(product_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_version_id: The product version ID the parameter timeseries is to be retrieved for. (required)
        :return: ProductsListProductVersionParametersTimeseriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_product_version_parameters_timeseries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_version_id' is set
        if ('product_version_id' not in params or
                params['product_version_id'] is None):
            raise ValueError("Missing the required parameter `product_version_id` when calling `list_product_version_parameters_timeseries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_version_id' in params:
            path_params['product_version_id'] = params['product_version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/product-versions/{product_version_id}:paramTimeseries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductsListProductVersionParametersTimeseriesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_product_versions(self, page_size, **kwargs):  # noqa: E501
        """Lists the versions of a product with pagination.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_product_versions(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size:   Required. Min: 1. Max: 30. (required)
        :param str product_id: The product ID that product versions are to be listed for. Required.
        :param str view: Indicates which fields should be included in the product versions. Optional.
        :param str page_token: Token of the page the results are to be retrieved from. If empty, returns the first page of results. Optional.
        :return: ProductsListProductVersionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_product_versions_with_http_info(page_size, **kwargs)  # noqa: E501
        else:
            (data) = self.list_product_versions_with_http_info(page_size, **kwargs)  # noqa: E501
            return data

    def list_product_versions_with_http_info(self, page_size, **kwargs):  # noqa: E501
        """Lists the versions of a product with pagination.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_product_versions_with_http_info(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size:   Required. Min: 1. Max: 30. (required)
        :param str product_id: The product ID that product versions are to be listed for. Required.
        :param str view: Indicates which fields should be included in the product versions. Optional.
        :param str page_token: Token of the page the results are to be retrieved from. If empty, returns the first page of results. Optional.
        :return: ProductsListProductVersionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'product_id', 'view', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_product_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `list_product_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/product-versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductsListProductVersionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_products(self, page_size, **kwargs):  # noqa: E501
        """Lists products with pagination.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_products(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size:   Required. Min: 1. Max: 30. (required)
        :param str include_activity:
        :param str include_internality:
        :param str page_token: Token of the page the results are to be retrieved from. If empty, returns the first page of results. Optional.
        :return: ProductsListProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_products_with_http_info(page_size, **kwargs)  # noqa: E501
        else:
            (data) = self.list_products_with_http_info(page_size, **kwargs)  # noqa: E501
            return data

    def list_products_with_http_info(self, page_size, **kwargs):  # noqa: E501
        """Lists products with pagination.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_products_with_http_info(page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size:   Required. Min: 1. Max: 30. (required)
        :param str include_activity:
        :param str include_internality:
        :param str page_token: Token of the page the results are to be retrieved from. If empty, returns the first page of results. Optional.
        :return: ProductsListProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'include_activity', 'include_internality', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_products" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `list_products`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_activity' in params:
            query_params.append(('include_activity', params['include_activity']))  # noqa: E501
        if 'include_internality' in params:
            query_params.append(('include_internality', params['include_internality']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/products', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductsListProductsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_product_version_params(self, body, product_version_id, **kwargs):  # noqa: E501
        """Updates the value of one or more parameters for a product version.  # noqa: E501

        To add one or more parameter values at a new effective timestamp, each parameter in the `items_to_add` field must have its `name` and `value` populated. The `effective_timestamp` is optional and will default to current time. The new parameter(s) will be added to the product version parameter timeseries. An error will be raised if the `items_to_add` field is populated with a parameter with an existing `name` and `effective_timestamp`.  To remove one or more parameter values at existing effective timestamps, each parameter in the `items_to_remove` field must have its `name` and `effective_timestamp` populated. The `value` of the parameter will be ignored. The specified parameter(s) will be deleted from the product version parameter timeseries. An error will be raised if the `items_to_remove` field is populated with parameters `name` and `effective_timestamp` that do not already exist in the product version parameter timeseries.  To edit the `value` of one or more parameters with an effective_timestamp set to a time in the future, the request must be sent with the `items_to_remove` and `items_to_add` fields populated. The `items_to_remove` field requires a list of existing parameters with the `name` and `effective_timestamp` fields populated. The `items_to_add field` requires a list of parameters with the `name` and `effective_timestamp` fields populated. The `value` field of the parameter(s) must be populated with the desired end value. The name and effective_timestamp of a parameter in the items_to_add field must exactly match the corresponding parameter in the items_to_remove field if the parameter's `value` is to be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_product_version_params(body, product_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsUpdateProductVersionParamsRequest body: (required)
        :param str product_version_id: The ID of the product version to be updated. (required)
        :return: ProductsProductVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_product_version_params_with_http_info(body, product_version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_product_version_params_with_http_info(body, product_version_id, **kwargs)  # noqa: E501
            return data

    def update_product_version_params_with_http_info(self, body, product_version_id, **kwargs):  # noqa: E501
        """Updates the value of one or more parameters for a product version.  # noqa: E501

        To add one or more parameter values at a new effective timestamp, each parameter in the `items_to_add` field must have its `name` and `value` populated. The `effective_timestamp` is optional and will default to current time. The new parameter(s) will be added to the product version parameter timeseries. An error will be raised if the `items_to_add` field is populated with a parameter with an existing `name` and `effective_timestamp`.  To remove one or more parameter values at existing effective timestamps, each parameter in the `items_to_remove` field must have its `name` and `effective_timestamp` populated. The `value` of the parameter will be ignored. The specified parameter(s) will be deleted from the product version parameter timeseries. An error will be raised if the `items_to_remove` field is populated with parameters `name` and `effective_timestamp` that do not already exist in the product version parameter timeseries.  To edit the `value` of one or more parameters with an effective_timestamp set to a time in the future, the request must be sent with the `items_to_remove` and `items_to_add` fields populated. The `items_to_remove` field requires a list of existing parameters with the `name` and `effective_timestamp` fields populated. The `items_to_add field` requires a list of parameters with the `name` and `effective_timestamp` fields populated. The `value` field of the parameter(s) must be populated with the desired end value. The name and effective_timestamp of a parameter in the items_to_add field must exactly match the corresponding parameter in the items_to_remove field if the parameter's `value` is to be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_product_version_params_with_http_info(body, product_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsUpdateProductVersionParamsRequest body: (required)
        :param str product_version_id: The ID of the product version to be updated. (required)
        :return: ProductsProductVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'product_version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_product_version_params" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_product_version_params`")  # noqa: E501
        # verify the required parameter 'product_version_id' is set
        if ('product_version_id' not in params or
                params['product_version_id'] is None):
            raise ValueError("Missing the required parameter `product_version_id` when calling `update_product_version_params`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_version_id' in params:
            path_params['product_version_id'] = params['product_version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/product-versions/{product_version_id}:updateParams', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductsProductVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
