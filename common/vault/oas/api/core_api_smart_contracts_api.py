# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from common.vault.oas.api_client import ApiClient


class CoreAPISmartContractsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def simulate_existing_account(self, body, **kwargs):  # noqa: E501
        """Simulates an existing account. It is similar to simulating a Smart Contract, but before the simulation starts the given account's state is replicated up to the simulation start timestamp. This means that the balance amounts available in the simulation will be the same as the real account at the given time. All timeseries (parameters, flags, balances) and postings data will be populated as per the real account up to the simulation start time. Any covering postings after the start of the simulation will not be included, meaning that if you start a simulation after an authorisation posting but before the corresponding settlement then the settlement will not be included in the simulation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulate_existing_account(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SmartContractsSimulateExistingAccountRequest body: (required)
        :return: SmartContractsSimulateSmartContractResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.simulate_existing_account_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.simulate_existing_account_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def simulate_existing_account_with_http_info(self, body, **kwargs):  # noqa: E501
        """Simulates an existing account. It is similar to simulating a Smart Contract, but before the simulation starts the given account's state is replicated up to the simulation start timestamp. This means that the balance amounts available in the simulation will be the same as the real account at the given time. All timeseries (parameters, flags, balances) and postings data will be populated as per the real account up to the simulation start time. Any covering postings after the start of the simulation will not be included, meaning that if you start a simulation after an authorisation posting but before the corresponding settlement then the settlement will not be included in the simulation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulate_existing_account_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SmartContractsSimulateExistingAccountRequest body: (required)
        :return: SmartContractsSimulateSmartContractResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulate_existing_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `simulate_existing_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/smart-contracts:simulateExistingAccount', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SmartContractsSimulateSmartContractResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulate_smart_contract(self, body, **kwargs):  # noqa: E501
        """Simulates a Smart Contract. The endpoint uses the provided Smart Contract code and a series of simulation events to simulate Smart Contract behaviour throughout the lifecycle of its account. The account being simulated has the ID \"Main Account\". This should be used when specifying the target/source account in posting instruction events in order to send money to/from the account being simulated. Any other account ID used in posting instruction events will be automatically created as a new account that is backed by an empty Smart Contract. These accounts are persisted for the duration of the simulation, which means they can accumulate balances.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulate_smart_contract(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SmartContractsSimulateSmartContractRequest body: (required)
        :return: SmartContractsSimulateSmartContractResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.simulate_smart_contract_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.simulate_smart_contract_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def simulate_smart_contract_with_http_info(self, body, **kwargs):  # noqa: E501
        """Simulates a Smart Contract. The endpoint uses the provided Smart Contract code and a series of simulation events to simulate Smart Contract behaviour throughout the lifecycle of its account. The account being simulated has the ID \"Main Account\". This should be used when specifying the target/source account in posting instruction events in order to send money to/from the account being simulated. Any other account ID used in posting instruction events will be automatically created as a new account that is backed by an empty Smart Contract. These accounts are persisted for the duration of the simulation, which means they can accumulate balances.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulate_smart_contract_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SmartContractsSimulateSmartContractRequest body: (required)
        :return: SmartContractsSimulateSmartContractResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulate_smart_contract" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `simulate_smart_contract`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/smart-contracts:simulate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SmartContractsSimulateSmartContractResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
