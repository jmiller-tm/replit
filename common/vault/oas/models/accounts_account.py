# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'product_id': 'str',
        'product_version_id': 'str',
        'permitted_denominations': 'list[str]',
        'status': 'AccountsCommonAccountStatus',
        'opening_timestamp': 'datetime',
        'closing_timestamp': 'datetime',
        'stakeholder_ids': 'list[str]',
        'instance_param_vals': 'dict(str, str)',
        'derived_instance_param_vals': 'dict(str, str)',
        'details': 'dict(str, str)',
        'accounting': 'AccountsCommonAccounting'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'product_id': 'product_id',
        'product_version_id': 'product_version_id',
        'permitted_denominations': 'permitted_denominations',
        'status': 'status',
        'opening_timestamp': 'opening_timestamp',
        'closing_timestamp': 'closing_timestamp',
        'stakeholder_ids': 'stakeholder_ids',
        'instance_param_vals': 'instance_param_vals',
        'derived_instance_param_vals': 'derived_instance_param_vals',
        'details': 'details',
        'accounting': 'accounting'
    }

    def __init__(self, id=None, name=None, product_id=None, product_version_id=None, permitted_denominations=None, status=None, opening_timestamp=None, closing_timestamp=None, stakeholder_ids=None, instance_param_vals=None, derived_instance_param_vals=None, details=None, accounting=None):  # noqa: E501
        """AccountsAccount - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._product_id = None
        self._product_version_id = None
        self._permitted_denominations = None
        self._status = None
        self._opening_timestamp = None
        self._closing_timestamp = None
        self._stakeholder_ids = None
        self._instance_param_vals = None
        self._derived_instance_param_vals = None
        self._details = None
        self._accounting = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if product_id is not None:
            self.product_id = product_id
        if product_version_id is not None:
            self.product_version_id = product_version_id
        if permitted_denominations is not None:
            self.permitted_denominations = permitted_denominations
        if status is not None:
            self.status = status
        if opening_timestamp is not None:
            self.opening_timestamp = opening_timestamp
        if closing_timestamp is not None:
            self.closing_timestamp = closing_timestamp
        if stakeholder_ids is not None:
            self.stakeholder_ids = stakeholder_ids
        if instance_param_vals is not None:
            self.instance_param_vals = instance_param_vals
        if derived_instance_param_vals is not None:
            self.derived_instance_param_vals = derived_instance_param_vals
        if details is not None:
            self.details = details
        if accounting is not None:
            self.accounting = accounting

    @property
    def id(self):
        """Gets the id of this AccountsAccount.  # noqa: E501

        A unique ID for an account. Optional for create requests.  Max length: 36 characters.  # noqa: E501

        :return: The id of this AccountsAccount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountsAccount.

        A unique ID for an account. Optional for create requests.  Max length: 36 characters.  # noqa: E501

        :param id: The id of this AccountsAccount.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AccountsAccount.  # noqa: E501

        The account name.  # noqa: E501

        :return: The name of this AccountsAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountsAccount.

        The account name.  # noqa: E501

        :param name: The name of this AccountsAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def product_id(self):
        """Gets the product_id of this AccountsAccount.  # noqa: E501

        The ID of the product the account is associated with. Can be obtained using the /v1/products endpoint. Required for create requests if `product_version_id` is not provided.  # noqa: E501

        :return: The product_id of this AccountsAccount.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this AccountsAccount.

        The ID of the product the account is associated with. Can be obtained using the /v1/products endpoint. Required for create requests if `product_version_id` is not provided.  # noqa: E501

        :param product_id: The product_id of this AccountsAccount.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def product_version_id(self):
        """Gets the product_version_id of this AccountsAccount.  # noqa: E501

        The ID of the product version matching the product ID. Required for create requests if `product_id` is not provided.  # noqa: E501

        :return: The product_version_id of this AccountsAccount.  # noqa: E501
        :rtype: str
        """
        return self._product_version_id

    @product_version_id.setter
    def product_version_id(self, product_version_id):
        """Sets the product_version_id of this AccountsAccount.

        The ID of the product version matching the product ID. Required for create requests if `product_id` is not provided.  # noqa: E501

        :param product_version_id: The product_version_id of this AccountsAccount.  # noqa: E501
        :type: str
        """

        self._product_version_id = product_version_id

    @property
    def permitted_denominations(self):
        """Gets the permitted_denominations of this AccountsAccount.  # noqa: E501

        Denominations the account can hold balances in. Must be a subset of the denominations supported by the product version. Optional for create requests, defaults to the denominations supported by the product version.  # noqa: E501

        :return: The permitted_denominations of this AccountsAccount.  # noqa: E501
        :rtype: list[str]
        """
        return self._permitted_denominations

    @permitted_denominations.setter
    def permitted_denominations(self, permitted_denominations):
        """Sets the permitted_denominations of this AccountsAccount.

        Denominations the account can hold balances in. Must be a subset of the denominations supported by the product version. Optional for create requests, defaults to the denominations supported by the product version.  # noqa: E501

        :param permitted_denominations: The permitted_denominations of this AccountsAccount.  # noqa: E501
        :type: list[str]
        """

        self._permitted_denominations = permitted_denominations

    @property
    def status(self):
        """Gets the status of this AccountsAccount.  # noqa: E501


        :return: The status of this AccountsAccount.  # noqa: E501
        :rtype: AccountsCommonAccountStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountsAccount.


        :param status: The status of this AccountsAccount.  # noqa: E501
        :type: AccountsCommonAccountStatus
        """

        self._status = status

    @property
    def opening_timestamp(self):
        """Gets the opening_timestamp of this AccountsAccount.  # noqa: E501

        The time when the account was opened. Optional for create. If supplied during account creation, the account must be created with status ACCOUNT_STATUS_OPEN and the opening_timestamp value must not be a time in the future.  # noqa: E501

        :return: The opening_timestamp of this AccountsAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._opening_timestamp

    @opening_timestamp.setter
    def opening_timestamp(self, opening_timestamp):
        """Sets the opening_timestamp of this AccountsAccount.

        The time when the account was opened. Optional for create. If supplied during account creation, the account must be created with status ACCOUNT_STATUS_OPEN and the opening_timestamp value must not be a time in the future.  # noqa: E501

        :param opening_timestamp: The opening_timestamp of this AccountsAccount.  # noqa: E501
        :type: datetime
        """

        self._opening_timestamp = opening_timestamp

    @property
    def closing_timestamp(self):
        """Gets the closing_timestamp of this AccountsAccount.  # noqa: E501

        The time when the account was closed. Can be updated to a time in the past directly if the account status is updated to CLOSED in the same call. The account status must be OPEN or PENDING_CLOSURE to update the closing timestamp.  # noqa: E501

        :return: The closing_timestamp of this AccountsAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._closing_timestamp

    @closing_timestamp.setter
    def closing_timestamp(self, closing_timestamp):
        """Sets the closing_timestamp of this AccountsAccount.

        The time when the account was closed. Can be updated to a time in the past directly if the account status is updated to CLOSED in the same call. The account status must be OPEN or PENDING_CLOSURE to update the closing timestamp.  # noqa: E501

        :param closing_timestamp: The closing_timestamp of this AccountsAccount.  # noqa: E501
        :type: datetime
        """

        self._closing_timestamp = closing_timestamp

    @property
    def stakeholder_ids(self):
        """Gets the stakeholder_ids of this AccountsAccount.  # noqa: E501

        The customer IDs that can access the account. Required for create requests.  # noqa: E501

        :return: The stakeholder_ids of this AccountsAccount.  # noqa: E501
        :rtype: list[str]
        """
        return self._stakeholder_ids

    @stakeholder_ids.setter
    def stakeholder_ids(self, stakeholder_ids):
        """Sets the stakeholder_ids of this AccountsAccount.

        The customer IDs that can access the account. Required for create requests.  # noqa: E501

        :param stakeholder_ids: The stakeholder_ids of this AccountsAccount.  # noqa: E501
        :type: list[str]
        """

        self._stakeholder_ids = stakeholder_ids

    @property
    def instance_param_vals(self):
        """Gets the instance_param_vals of this AccountsAccount.  # noqa: E501

        The instance-level parameters for the associated product; a map of the parameter name to value. The instance-level parameters provided (which must be non-derived instance-level parameters when provided in create requests) that have been defined in the account's Smart Contract code; a map of the parameter name to value. Optional for create requests. When the account view ACCOUNT_VIEW_INCLUDE_DERIVED_PARAMETERS is used, derived instance-level parameters will also be displayed. From version 2.0 onwards, derived instance-level parameters will only be displayed in the `derived_instance_param_vals` field of the account and will not be displayed in the `instance_param_vals` field.  # noqa: E501

        :return: The instance_param_vals of this AccountsAccount.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._instance_param_vals

    @instance_param_vals.setter
    def instance_param_vals(self, instance_param_vals):
        """Sets the instance_param_vals of this AccountsAccount.

        The instance-level parameters for the associated product; a map of the parameter name to value. The instance-level parameters provided (which must be non-derived instance-level parameters when provided in create requests) that have been defined in the account's Smart Contract code; a map of the parameter name to value. Optional for create requests. When the account view ACCOUNT_VIEW_INCLUDE_DERIVED_PARAMETERS is used, derived instance-level parameters will also be displayed. From version 2.0 onwards, derived instance-level parameters will only be displayed in the `derived_instance_param_vals` field of the account and will not be displayed in the `instance_param_vals` field.  # noqa: E501

        :param instance_param_vals: The instance_param_vals of this AccountsAccount.  # noqa: E501
        :type: dict(str, str)
        """

        self._instance_param_vals = instance_param_vals

    @property
    def derived_instance_param_vals(self):
        """Gets the derived_instance_param_vals of this AccountsAccount.  # noqa: E501

        The derived instance-level parameters for the associated product that have been defined in the account's Smart Contract code; a map of the parameter name to value.  # noqa: E501

        :return: The derived_instance_param_vals of this AccountsAccount.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._derived_instance_param_vals

    @derived_instance_param_vals.setter
    def derived_instance_param_vals(self, derived_instance_param_vals):
        """Sets the derived_instance_param_vals of this AccountsAccount.

        The derived instance-level parameters for the associated product that have been defined in the account's Smart Contract code; a map of the parameter name to value.  # noqa: E501

        :param derived_instance_param_vals: The derived_instance_param_vals of this AccountsAccount.  # noqa: E501
        :type: dict(str, str)
        """

        self._derived_instance_param_vals = derived_instance_param_vals

    @property
    def details(self):
        """Gets the details of this AccountsAccount.  # noqa: E501

        A map of unstructured fields that hold instance-specific account details, for example, the source of funds. Optional for create requests.  # noqa: E501

        :return: The details of this AccountsAccount.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this AccountsAccount.

        A map of unstructured fields that hold instance-specific account details, for example, the source of funds. Optional for create requests.  # noqa: E501

        :param details: The details of this AccountsAccount.  # noqa: E501
        :type: dict(str, str)
        """

        self._details = details

    @property
    def accounting(self):
        """Gets the accounting of this AccountsAccount.  # noqa: E501


        :return: The accounting of this AccountsAccount.  # noqa: E501
        :rtype: AccountsCommonAccounting
        """
        return self._accounting

    @accounting.setter
    def accounting(self, accounting):
        """Sets the accounting of this AccountsAccount.


        :param accounting: The accounting of this AccountsAccount.  # noqa: E501
        :type: AccountsCommonAccounting
        """

        self._accounting = accounting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
