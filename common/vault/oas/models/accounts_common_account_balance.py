# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsCommonAccountBalance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'as_of_posting_instruction_batch_id': 'str',
        'live_balances': 'list[AccountsCommonLiveBalance]'
    }

    attribute_map = {
        'as_of_posting_instruction_batch_id': 'as_of_posting_instruction_batch_id',
        'live_balances': 'live_balances'
    }

    def __init__(self, as_of_posting_instruction_batch_id=None, live_balances=None):  # noqa: E501
        """AccountsCommonAccountBalance - a model defined in Swagger"""  # noqa: E501
        self._as_of_posting_instruction_batch_id = None
        self._live_balances = None
        self.discriminator = None
        if as_of_posting_instruction_batch_id is not None:
            self.as_of_posting_instruction_batch_id = as_of_posting_instruction_batch_id
        if live_balances is not None:
            self.live_balances = live_balances

    @property
    def as_of_posting_instruction_batch_id(self):
        """Gets the as_of_posting_instruction_batch_id of this AccountsCommonAccountBalance.  # noqa: E501

        The posting instruction batch that most recently updated (or created) this balance.  # noqa: E501

        :return: The as_of_posting_instruction_batch_id of this AccountsCommonAccountBalance.  # noqa: E501
        :rtype: str
        """
        return self._as_of_posting_instruction_batch_id

    @as_of_posting_instruction_batch_id.setter
    def as_of_posting_instruction_batch_id(self, as_of_posting_instruction_batch_id):
        """Sets the as_of_posting_instruction_batch_id of this AccountsCommonAccountBalance.

        The posting instruction batch that most recently updated (or created) this balance.  # noqa: E501

        :param as_of_posting_instruction_batch_id: The as_of_posting_instruction_batch_id of this AccountsCommonAccountBalance.  # noqa: E501
        :type: str
        """

        self._as_of_posting_instruction_batch_id = as_of_posting_instruction_batch_id

    @property
    def live_balances(self):
        """Gets the live_balances of this AccountsCommonAccountBalance.  # noqa: E501

        The current account balances.  # noqa: E501

        :return: The live_balances of this AccountsCommonAccountBalance.  # noqa: E501
        :rtype: list[AccountsCommonLiveBalance]
        """
        return self._live_balances

    @live_balances.setter
    def live_balances(self, live_balances):
        """Sets the live_balances of this AccountsCommonAccountBalance.

        The current account balances.  # noqa: E501

        :param live_balances: The live_balances of this AccountsCommonAccountBalance.  # noqa: E501
        :type: list[AccountsCommonLiveBalance]
        """

        self._live_balances = live_balances

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsCommonAccountBalance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsCommonAccountBalance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
