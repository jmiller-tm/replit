# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsCommonAccountNote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'account_id': 'str',
        'body': 'str',
        'type': 'AccountsCommonAccountNoteType',
        'effective_timestamp': 'datetime',
        'is_visible_to_customer': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'account_id',
        'body': 'body',
        'type': 'type',
        'effective_timestamp': 'effective_timestamp',
        'is_visible_to_customer': 'is_visible_to_customer'
    }

    def __init__(self, id=None, account_id=None, body=None, type=None, effective_timestamp=None, is_visible_to_customer=None):  # noqa: E501
        """AccountsCommonAccountNote - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_id = None
        self._body = None
        self._type = None
        self._effective_timestamp = None
        self._is_visible_to_customer = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if body is not None:
            self.body = body
        if type is not None:
            self.type = type
        if effective_timestamp is not None:
            self.effective_timestamp = effective_timestamp
        if is_visible_to_customer is not None:
            self.is_visible_to_customer = is_visible_to_customer

    @property
    def id(self):
        """Gets the id of this AccountsCommonAccountNote.  # noqa: E501

        The ID of the AccountNote.  # noqa: E501

        :return: The id of this AccountsCommonAccountNote.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountsCommonAccountNote.

        The ID of the AccountNote.  # noqa: E501

        :param id: The id of this AccountsCommonAccountNote.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this AccountsCommonAccountNote.  # noqa: E501

        The ID of the Account the AccountNote applies to.  # noqa: E501

        :return: The account_id of this AccountsCommonAccountNote.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountsCommonAccountNote.

        The ID of the Account the AccountNote applies to.  # noqa: E501

        :param account_id: The account_id of this AccountsCommonAccountNote.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def body(self):
        """Gets the body of this AccountsCommonAccountNote.  # noqa: E501

        The body of the AccountNote; see the type field for its meaning.  # noqa: E501

        :return: The body of this AccountsCommonAccountNote.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this AccountsCommonAccountNote.

        The body of the AccountNote; see the type field for its meaning.  # noqa: E501

        :param body: The body of this AccountsCommonAccountNote.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def type(self):
        """Gets the type of this AccountsCommonAccountNote.  # noqa: E501


        :return: The type of this AccountsCommonAccountNote.  # noqa: E501
        :rtype: AccountsCommonAccountNoteType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountsCommonAccountNote.


        :param type: The type of this AccountsCommonAccountNote.  # noqa: E501
        :type: AccountsCommonAccountNoteType
        """

        self._type = type

    @property
    def effective_timestamp(self):
        """Gets the effective_timestamp of this AccountsCommonAccountNote.  # noqa: E501

        The logical time the AccountNote was created at.  # noqa: E501

        :return: The effective_timestamp of this AccountsCommonAccountNote.  # noqa: E501
        :rtype: datetime
        """
        return self._effective_timestamp

    @effective_timestamp.setter
    def effective_timestamp(self, effective_timestamp):
        """Sets the effective_timestamp of this AccountsCommonAccountNote.

        The logical time the AccountNote was created at.  # noqa: E501

        :param effective_timestamp: The effective_timestamp of this AccountsCommonAccountNote.  # noqa: E501
        :type: datetime
        """

        self._effective_timestamp = effective_timestamp

    @property
    def is_visible_to_customer(self):
        """Gets the is_visible_to_customer of this AccountsCommonAccountNote.  # noqa: E501

        Whether the AccountNote is visible to customers or internal only.  # noqa: E501

        :return: The is_visible_to_customer of this AccountsCommonAccountNote.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible_to_customer

    @is_visible_to_customer.setter
    def is_visible_to_customer(self, is_visible_to_customer):
        """Sets the is_visible_to_customer of this AccountsCommonAccountNote.

        Whether the AccountNote is visible to customers or internal only.  # noqa: E501

        :param is_visible_to_customer: The is_visible_to_customer of this AccountsCommonAccountNote.  # noqa: E501
        :type: bool
        """

        self._is_visible_to_customer = is_visible_to_customer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsCommonAccountNote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsCommonAccountNote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
