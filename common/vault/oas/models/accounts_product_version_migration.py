# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsProductVersionMigration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_product_version_ids': 'list[str]',
        'to_product_version_id': 'str',
        'schedule_migration_type': 'AccountsScheduleMigrationType'
    }

    attribute_map = {
        'from_product_version_ids': 'from_product_version_ids',
        'to_product_version_id': 'to_product_version_id',
        'schedule_migration_type': 'schedule_migration_type'
    }

    def __init__(self, from_product_version_ids=None, to_product_version_id=None, schedule_migration_type=None):  # noqa: E501
        """AccountsProductVersionMigration - a model defined in Swagger"""  # noqa: E501
        self._from_product_version_ids = None
        self._to_product_version_id = None
        self._schedule_migration_type = None
        self.discriminator = None
        if from_product_version_ids is not None:
            self.from_product_version_ids = from_product_version_ids
        if to_product_version_id is not None:
            self.to_product_version_id = to_product_version_id
        if schedule_migration_type is not None:
            self.schedule_migration_type = schedule_migration_type

    @property
    def from_product_version_ids(self):
        """Gets the from_product_version_ids of this AccountsProductVersionMigration.  # noqa: E501

        The product version IDs of the accounts that are to be migrated.  # noqa: E501

        :return: The from_product_version_ids of this AccountsProductVersionMigration.  # noqa: E501
        :rtype: list[str]
        """
        return self._from_product_version_ids

    @from_product_version_ids.setter
    def from_product_version_ids(self, from_product_version_ids):
        """Sets the from_product_version_ids of this AccountsProductVersionMigration.

        The product version IDs of the accounts that are to be migrated.  # noqa: E501

        :param from_product_version_ids: The from_product_version_ids of this AccountsProductVersionMigration.  # noqa: E501
        :type: list[str]
        """

        self._from_product_version_ids = from_product_version_ids

    @property
    def to_product_version_id(self):
        """Gets the to_product_version_id of this AccountsProductVersionMigration.  # noqa: E501

        The product version ID that accounts will be migrated to. For migrations to product versions that make use of contract modules, each named contract module in the target product version must have a corresponding smart contract module versions link.  # noqa: E501

        :return: The to_product_version_id of this AccountsProductVersionMigration.  # noqa: E501
        :rtype: str
        """
        return self._to_product_version_id

    @to_product_version_id.setter
    def to_product_version_id(self, to_product_version_id):
        """Sets the to_product_version_id of this AccountsProductVersionMigration.

        The product version ID that accounts will be migrated to. For migrations to product versions that make use of contract modules, each named contract module in the target product version must have a corresponding smart contract module versions link.  # noqa: E501

        :param to_product_version_id: The to_product_version_id of this AccountsProductVersionMigration.  # noqa: E501
        :type: str
        """

        self._to_product_version_id = to_product_version_id

    @property
    def schedule_migration_type(self):
        """Gets the schedule_migration_type of this AccountsProductVersionMigration.  # noqa: E501


        :return: The schedule_migration_type of this AccountsProductVersionMigration.  # noqa: E501
        :rtype: AccountsScheduleMigrationType
        """
        return self._schedule_migration_type

    @schedule_migration_type.setter
    def schedule_migration_type(self, schedule_migration_type):
        """Sets the schedule_migration_type of this AccountsProductVersionMigration.


        :param schedule_migration_type: The schedule_migration_type of this AccountsProductVersionMigration.  # noqa: E501
        :type: AccountsScheduleMigrationType
        """

        self._schedule_migration_type = schedule_migration_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsProductVersionMigration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsProductVersionMigration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
