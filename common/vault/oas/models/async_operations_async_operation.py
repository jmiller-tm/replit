# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AsyncOperationsAsyncOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'create_timestamp': 'datetime',
        'done_timestamp': 'datetime',
        'done': 'bool',
        'response': 'ProtobufAny',
        'error': 'RpcStatus'
    }

    attribute_map = {
        'id': 'id',
        'create_timestamp': 'create_timestamp',
        'done_timestamp': 'done_timestamp',
        'done': 'done',
        'response': 'response',
        'error': 'error'
    }

    def __init__(self, id=None, create_timestamp=None, done_timestamp=None, done=None, response=None, error=None):  # noqa: E501
        """AsyncOperationsAsyncOperation - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._create_timestamp = None
        self._done_timestamp = None
        self._done = None
        self._response = None
        self._error = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if create_timestamp is not None:
            self.create_timestamp = create_timestamp
        if done_timestamp is not None:
            self.done_timestamp = done_timestamp
        if done is not None:
            self.done = done
        if response is not None:
            self.response = response
        if error is not None:
            self.error = error

    @property
    def id(self):
        """Gets the id of this AsyncOperationsAsyncOperation.  # noqa: E501

        The ID that can be used to retrieve this operation.  # noqa: E501

        :return: The id of this AsyncOperationsAsyncOperation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AsyncOperationsAsyncOperation.

        The ID that can be used to retrieve this operation.  # noqa: E501

        :param id: The id of this AsyncOperationsAsyncOperation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this AsyncOperationsAsyncOperation.  # noqa: E501

        When this operation was created.  # noqa: E501

        :return: The create_timestamp of this AsyncOperationsAsyncOperation.  # noqa: E501
        :rtype: datetime
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this AsyncOperationsAsyncOperation.

        When this operation was created.  # noqa: E501

        :param create_timestamp: The create_timestamp of this AsyncOperationsAsyncOperation.  # noqa: E501
        :type: datetime
        """

        self._create_timestamp = create_timestamp

    @property
    def done_timestamp(self):
        """Gets the done_timestamp of this AsyncOperationsAsyncOperation.  # noqa: E501

        When this operation was completed.  # noqa: E501

        :return: The done_timestamp of this AsyncOperationsAsyncOperation.  # noqa: E501
        :rtype: datetime
        """
        return self._done_timestamp

    @done_timestamp.setter
    def done_timestamp(self, done_timestamp):
        """Sets the done_timestamp of this AsyncOperationsAsyncOperation.

        When this operation was completed.  # noqa: E501

        :param done_timestamp: The done_timestamp of this AsyncOperationsAsyncOperation.  # noqa: E501
        :type: datetime
        """

        self._done_timestamp = done_timestamp

    @property
    def done(self):
        """Gets the done of this AsyncOperationsAsyncOperation.  # noqa: E501

        Whether the operation is completed or not.  # noqa: E501

        :return: The done of this AsyncOperationsAsyncOperation.  # noqa: E501
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this AsyncOperationsAsyncOperation.

        Whether the operation is completed or not.  # noqa: E501

        :param done: The done of this AsyncOperationsAsyncOperation.  # noqa: E501
        :type: bool
        """

        self._done = done

    @property
    def response(self):
        """Gets the response of this AsyncOperationsAsyncOperation.  # noqa: E501


        :return: The response of this AsyncOperationsAsyncOperation.  # noqa: E501
        :rtype: ProtobufAny
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this AsyncOperationsAsyncOperation.


        :param response: The response of this AsyncOperationsAsyncOperation.  # noqa: E501
        :type: ProtobufAny
        """

        self._response = response

    @property
    def error(self):
        """Gets the error of this AsyncOperationsAsyncOperation.  # noqa: E501


        :return: The error of this AsyncOperationsAsyncOperation.  # noqa: E501
        :rtype: RpcStatus
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this AsyncOperationsAsyncOperation.


        :param error: The error of this AsyncOperationsAsyncOperation.  # noqa: E501
        :type: RpcStatus
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AsyncOperationsAsyncOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AsyncOperationsAsyncOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
