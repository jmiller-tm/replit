# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalendarCalendarPeriod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expected_end_timestamp': 'datetime',
        'actual_end_timestamp': 'datetime',
        'period': 'int',
        'expected_start_timestamp': 'datetime',
        'actual_start_timestamp': 'datetime',
        'calendar_id': 'str',
        'calendar_period_descriptor_id': 'str'
    }

    attribute_map = {
        'expected_end_timestamp': 'expected_end_timestamp',
        'actual_end_timestamp': 'actual_end_timestamp',
        'period': 'period',
        'expected_start_timestamp': 'expected_start_timestamp',
        'actual_start_timestamp': 'actual_start_timestamp',
        'calendar_id': 'calendar_id',
        'calendar_period_descriptor_id': 'calendar_period_descriptor_id'
    }

    def __init__(self, expected_end_timestamp=None, actual_end_timestamp=None, period=None, expected_start_timestamp=None, actual_start_timestamp=None, calendar_id=None, calendar_period_descriptor_id=None):  # noqa: E501
        """CalendarCalendarPeriod - a model defined in Swagger"""  # noqa: E501
        self._expected_end_timestamp = None
        self._actual_end_timestamp = None
        self._period = None
        self._expected_start_timestamp = None
        self._actual_start_timestamp = None
        self._calendar_id = None
        self._calendar_period_descriptor_id = None
        self.discriminator = None
        if expected_end_timestamp is not None:
            self.expected_end_timestamp = expected_end_timestamp
        if actual_end_timestamp is not None:
            self.actual_end_timestamp = actual_end_timestamp
        self.period = period
        if expected_start_timestamp is not None:
            self.expected_start_timestamp = expected_start_timestamp
        if actual_start_timestamp is not None:
            self.actual_start_timestamp = actual_start_timestamp
        if calendar_id is not None:
            self.calendar_id = calendar_id
        if calendar_period_descriptor_id is not None:
            self.calendar_period_descriptor_id = calendar_period_descriptor_id

    @property
    def expected_end_timestamp(self):
        """Gets the expected_end_timestamp of this CalendarCalendarPeriod.  # noqa: E501


        :return: The expected_end_timestamp of this CalendarCalendarPeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._expected_end_timestamp

    @expected_end_timestamp.setter
    def expected_end_timestamp(self, expected_end_timestamp):
        """Sets the expected_end_timestamp of this CalendarCalendarPeriod.


        :param expected_end_timestamp: The expected_end_timestamp of this CalendarCalendarPeriod.  # noqa: E501
        :type: datetime
        """

        self._expected_end_timestamp = expected_end_timestamp

    @property
    def actual_end_timestamp(self):
        """Gets the actual_end_timestamp of this CalendarCalendarPeriod.  # noqa: E501

        This timestamp will be updated when holding (pausing of given calendar) or rolling (advancing the period forward), for operational/accounting purposes.  # noqa: E501

        :return: The actual_end_timestamp of this CalendarCalendarPeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._actual_end_timestamp

    @actual_end_timestamp.setter
    def actual_end_timestamp(self, actual_end_timestamp):
        """Sets the actual_end_timestamp of this CalendarCalendarPeriod.

        This timestamp will be updated when holding (pausing of given calendar) or rolling (advancing the period forward), for operational/accounting purposes.  # noqa: E501

        :param actual_end_timestamp: The actual_end_timestamp of this CalendarCalendarPeriod.  # noqa: E501
        :type: datetime
        """

        self._actual_end_timestamp = actual_end_timestamp

    @property
    def period(self):
        """Gets the period of this CalendarCalendarPeriod.  # noqa: E501

        A monotonically increasing value derived from the date and start_period_epoch timestamp.  Required.  # noqa: E501

        :return: The period of this CalendarCalendarPeriod.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this CalendarCalendarPeriod.

        A monotonically increasing value derived from the date and start_period_epoch timestamp.  Required.  # noqa: E501

        :param period: The period of this CalendarCalendarPeriod.  # noqa: E501
        :type: int
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")  # noqa: E501

        self._period = period

    @property
    def expected_start_timestamp(self):
        """Gets the expected_start_timestamp of this CalendarCalendarPeriod.  # noqa: E501

        Start of current period, unmodified by hold/roll changes.  # noqa: E501

        :return: The expected_start_timestamp of this CalendarCalendarPeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._expected_start_timestamp

    @expected_start_timestamp.setter
    def expected_start_timestamp(self, expected_start_timestamp):
        """Sets the expected_start_timestamp of this CalendarCalendarPeriod.

        Start of current period, unmodified by hold/roll changes.  # noqa: E501

        :param expected_start_timestamp: The expected_start_timestamp of this CalendarCalendarPeriod.  # noqa: E501
        :type: datetime
        """

        self._expected_start_timestamp = expected_start_timestamp

    @property
    def actual_start_timestamp(self):
        """Gets the actual_start_timestamp of this CalendarCalendarPeriod.  # noqa: E501

        Start of current period, affected by hold/roll of previous period.  # noqa: E501

        :return: The actual_start_timestamp of this CalendarCalendarPeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._actual_start_timestamp

    @actual_start_timestamp.setter
    def actual_start_timestamp(self, actual_start_timestamp):
        """Sets the actual_start_timestamp of this CalendarCalendarPeriod.

        Start of current period, affected by hold/roll of previous period.  # noqa: E501

        :param actual_start_timestamp: The actual_start_timestamp of this CalendarCalendarPeriod.  # noqa: E501
        :type: datetime
        """

        self._actual_start_timestamp = actual_start_timestamp

    @property
    def calendar_id(self):
        """Gets the calendar_id of this CalendarCalendarPeriod.  # noqa: E501

        References the Calendar that the period belongs to.  # noqa: E501

        :return: The calendar_id of this CalendarCalendarPeriod.  # noqa: E501
        :rtype: str
        """
        return self._calendar_id

    @calendar_id.setter
    def calendar_id(self, calendar_id):
        """Sets the calendar_id of this CalendarCalendarPeriod.

        References the Calendar that the period belongs to.  # noqa: E501

        :param calendar_id: The calendar_id of this CalendarCalendarPeriod.  # noqa: E501
        :type: str
        """

        self._calendar_id = calendar_id

    @property
    def calendar_period_descriptor_id(self):
        """Gets the calendar_period_descriptor_id of this CalendarCalendarPeriod.  # noqa: E501

        References the Calendar Period Descriptor that was used to generate the period.  # noqa: E501

        :return: The calendar_period_descriptor_id of this CalendarCalendarPeriod.  # noqa: E501
        :rtype: str
        """
        return self._calendar_period_descriptor_id

    @calendar_period_descriptor_id.setter
    def calendar_period_descriptor_id(self, calendar_period_descriptor_id):
        """Sets the calendar_period_descriptor_id of this CalendarCalendarPeriod.

        References the Calendar Period Descriptor that was used to generate the period.  # noqa: E501

        :param calendar_period_descriptor_id: The calendar_period_descriptor_id of this CalendarCalendarPeriod.  # noqa: E501
        :type: str
        """

        self._calendar_period_descriptor_id = calendar_period_descriptor_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalendarCalendarPeriod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalendarCalendarPeriod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
