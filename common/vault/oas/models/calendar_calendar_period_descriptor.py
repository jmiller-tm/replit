# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalendarCalendarPeriodDescriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'start_timestamp': 'datetime',
        'resolution': 'CalendarPeriodResolution'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'start_timestamp': 'start_timestamp',
        'resolution': 'resolution'
    }

    def __init__(self, id=None, name=None, start_timestamp=None, resolution=None):  # noqa: E501
        """CalendarCalendarPeriodDescriptor - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._start_timestamp = None
        self._resolution = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if start_timestamp is not None:
            self.start_timestamp = start_timestamp
        if resolution is not None:
            self.resolution = resolution

    @property
    def id(self):
        """Gets the id of this CalendarCalendarPeriodDescriptor.  # noqa: E501

        The Calendar Period Descriptor ID can be specified by the user when creating the Calendar Period Descriptor, otherwise it will be generated by the service. Must be unique.  # noqa: E501

        :return: The id of this CalendarCalendarPeriodDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalendarCalendarPeriodDescriptor.

        The Calendar Period Descriptor ID can be specified by the user when creating the Calendar Period Descriptor, otherwise it will be generated by the service. Must be unique.  # noqa: E501

        :param id: The id of this CalendarCalendarPeriodDescriptor.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CalendarCalendarPeriodDescriptor.  # noqa: E501

        Name of the period descriptor.  # noqa: E501

        :return: The name of this CalendarCalendarPeriodDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CalendarCalendarPeriodDescriptor.

        Name of the period descriptor.  # noqa: E501

        :param name: The name of this CalendarCalendarPeriodDescriptor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this CalendarCalendarPeriodDescriptor.  # noqa: E501

        The time the Calendar Period is measured from. Defaults to the current time.  # noqa: E501

        :return: The start_timestamp of this CalendarCalendarPeriodDescriptor.  # noqa: E501
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this CalendarCalendarPeriodDescriptor.

        The time the Calendar Period is measured from. Defaults to the current time.  # noqa: E501

        :param start_timestamp: The start_timestamp of this CalendarCalendarPeriodDescriptor.  # noqa: E501
        :type: datetime
        """

        self._start_timestamp = start_timestamp

    @property
    def resolution(self):
        """Gets the resolution of this CalendarCalendarPeriodDescriptor.  # noqa: E501


        :return: The resolution of this CalendarCalendarPeriodDescriptor.  # noqa: E501
        :rtype: CalendarPeriodResolution
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this CalendarCalendarPeriodDescriptor.


        :param resolution: The resolution of this CalendarCalendarPeriodDescriptor.  # noqa: E501
        :type: CalendarPeriodResolution
        """

        self._resolution = resolution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalendarCalendarPeriodDescriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalendarCalendarPeriodDescriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
