# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalendarOperationsCalendarOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'calendar_id': 'str',
        'event_name': 'str',
        'calendar_mode': 'CalendarOperationsCalendarMode',
        'event_duration': 'str'
    }

    attribute_map = {
        'calendar_id': 'calendar_id',
        'event_name': 'event_name',
        'calendar_mode': 'calendar_mode',
        'event_duration': 'event_duration'
    }

    def __init__(self, calendar_id=None, event_name=None, calendar_mode=None, event_duration=None):  # noqa: E501
        """CalendarOperationsCalendarOperation - a model defined in Swagger"""  # noqa: E501
        self._calendar_id = None
        self._event_name = None
        self._calendar_mode = None
        self._event_duration = None
        self.discriminator = None
        if calendar_id is not None:
            self.calendar_id = calendar_id
        if event_name is not None:
            self.event_name = event_name
        if calendar_mode is not None:
            self.calendar_mode = calendar_mode
        if event_duration is not None:
            self.event_duration = event_duration

    @property
    def calendar_id(self):
        """Gets the calendar_id of this CalendarOperationsCalendarOperation.  # noqa: E501

        Calendar resource containing calendar events.  # noqa: E501

        :return: The calendar_id of this CalendarOperationsCalendarOperation.  # noqa: E501
        :rtype: str
        """
        return self._calendar_id

    @calendar_id.setter
    def calendar_id(self, calendar_id):
        """Sets the calendar_id of this CalendarOperationsCalendarOperation.

        Calendar resource containing calendar events.  # noqa: E501

        :param calendar_id: The calendar_id of this CalendarOperationsCalendarOperation.  # noqa: E501
        :type: str
        """

        self._calendar_id = calendar_id

    @property
    def event_name(self):
        """Gets the event_name of this CalendarOperationsCalendarOperation.  # noqa: E501

        The name of a calendar event.  # noqa: E501

        :return: The event_name of this CalendarOperationsCalendarOperation.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this CalendarOperationsCalendarOperation.

        The name of a calendar event.  # noqa: E501

        :param event_name: The event_name of this CalendarOperationsCalendarOperation.  # noqa: E501
        :type: str
        """

        self._event_name = event_name

    @property
    def calendar_mode(self):
        """Gets the calendar_mode of this CalendarOperationsCalendarOperation.  # noqa: E501


        :return: The calendar_mode of this CalendarOperationsCalendarOperation.  # noqa: E501
        :rtype: CalendarOperationsCalendarMode
        """
        return self._calendar_mode

    @calendar_mode.setter
    def calendar_mode(self, calendar_mode):
        """Sets the calendar_mode of this CalendarOperationsCalendarOperation.


        :param calendar_mode: The calendar_mode of this CalendarOperationsCalendarOperation.  # noqa: E501
        :type: CalendarOperationsCalendarMode
        """

        self._calendar_mode = calendar_mode

    @property
    def event_duration(self):
        """Gets the event_duration of this CalendarOperationsCalendarOperation.  # noqa: E501

        The duration of each calendar event. This is a strictly positive integer followed by time units \"m\" or \"h\". Possible valid durations include (but are not limited to): \"30m\", \"6h\", \"24h\".  # noqa: E501

        :return: The event_duration of this CalendarOperationsCalendarOperation.  # noqa: E501
        :rtype: str
        """
        return self._event_duration

    @event_duration.setter
    def event_duration(self, event_duration):
        """Sets the event_duration of this CalendarOperationsCalendarOperation.

        The duration of each calendar event. This is a strictly positive integer followed by time units \"m\" or \"h\". Possible valid durations include (but are not limited to): \"30m\", \"6h\", \"24h\".  # noqa: E501

        :param event_duration: The event_duration of this CalendarOperationsCalendarOperation.  # noqa: E501
        :type: str
        """

        self._event_duration = event_duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalendarOperationsCalendarOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalendarOperationsCalendarOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
