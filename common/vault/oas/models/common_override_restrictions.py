# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommonOverrideRestrictions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all': 'bool',
        'restriction_set_ids': 'list[str]',
        'restriction_set_definition_ids': 'list[str]',
        'restriction_set_definition_version_ids': 'list[str]'
    }

    attribute_map = {
        'all': 'all',
        'restriction_set_ids': 'restriction_set_ids',
        'restriction_set_definition_ids': 'restriction_set_definition_ids',
        'restriction_set_definition_version_ids': 'restriction_set_definition_version_ids'
    }

    def __init__(self, all=None, restriction_set_ids=None, restriction_set_definition_ids=None, restriction_set_definition_version_ids=None):  # noqa: E501
        """CommonOverrideRestrictions - a model defined in Swagger"""  # noqa: E501
        self._all = None
        self._restriction_set_ids = None
        self._restriction_set_definition_ids = None
        self._restriction_set_definition_version_ids = None
        self.discriminator = None
        if all is not None:
            self.all = all
        if restriction_set_ids is not None:
            self.restriction_set_ids = restriction_set_ids
        if restriction_set_definition_ids is not None:
            self.restriction_set_definition_ids = restriction_set_definition_ids
        if restriction_set_definition_version_ids is not None:
            self.restriction_set_definition_version_ids = restriction_set_definition_version_ids

    @property
    def all(self):
        """Gets the all of this CommonOverrideRestrictions.  # noqa: E501

        The caller can override all restriction checks for a call by setting this field to true.  # noqa: E501

        :return: The all of this CommonOverrideRestrictions.  # noqa: E501
        :rtype: bool
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this CommonOverrideRestrictions.

        The caller can override all restriction checks for a call by setting this field to true.  # noqa: E501

        :param all: The all of this CommonOverrideRestrictions.  # noqa: E501
        :type: bool
        """

        self._all = all

    @property
    def restriction_set_ids(self):
        """Gets the restriction_set_ids of this CommonOverrideRestrictions.  # noqa: E501

        The caller can override restrictions based on restriction sets by passing the restriction set IDs here.  # noqa: E501

        :return: The restriction_set_ids of this CommonOverrideRestrictions.  # noqa: E501
        :rtype: list[str]
        """
        return self._restriction_set_ids

    @restriction_set_ids.setter
    def restriction_set_ids(self, restriction_set_ids):
        """Sets the restriction_set_ids of this CommonOverrideRestrictions.

        The caller can override restrictions based on restriction sets by passing the restriction set IDs here.  # noqa: E501

        :param restriction_set_ids: The restriction_set_ids of this CommonOverrideRestrictions.  # noqa: E501
        :type: list[str]
        """

        self._restriction_set_ids = restriction_set_ids

    @property
    def restriction_set_definition_ids(self):
        """Gets the restriction_set_definition_ids of this CommonOverrideRestrictions.  # noqa: E501

        The caller can override restrictions based on restriction set definitions by passing the restriction set definition IDs here.  # noqa: E501

        :return: The restriction_set_definition_ids of this CommonOverrideRestrictions.  # noqa: E501
        :rtype: list[str]
        """
        return self._restriction_set_definition_ids

    @restriction_set_definition_ids.setter
    def restriction_set_definition_ids(self, restriction_set_definition_ids):
        """Sets the restriction_set_definition_ids of this CommonOverrideRestrictions.

        The caller can override restrictions based on restriction set definitions by passing the restriction set definition IDs here.  # noqa: E501

        :param restriction_set_definition_ids: The restriction_set_definition_ids of this CommonOverrideRestrictions.  # noqa: E501
        :type: list[str]
        """

        self._restriction_set_definition_ids = restriction_set_definition_ids

    @property
    def restriction_set_definition_version_ids(self):
        """Gets the restriction_set_definition_version_ids of this CommonOverrideRestrictions.  # noqa: E501

        The caller can override restrictions based on restriction set definition versions by passing the restriction set definition version IDs here.  # noqa: E501

        :return: The restriction_set_definition_version_ids of this CommonOverrideRestrictions.  # noqa: E501
        :rtype: list[str]
        """
        return self._restriction_set_definition_version_ids

    @restriction_set_definition_version_ids.setter
    def restriction_set_definition_version_ids(self, restriction_set_definition_version_ids):
        """Sets the restriction_set_definition_version_ids of this CommonOverrideRestrictions.

        The caller can override restrictions based on restriction set definition versions by passing the restriction set definition version IDs here.  # noqa: E501

        :param restriction_set_definition_version_ids: The restriction_set_definition_version_ids of this CommonOverrideRestrictions.  # noqa: E501
        :type: list[str]
        """

        self._restriction_set_definition_version_ids = restriction_set_definition_version_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonOverrideRestrictions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonOverrideRestrictions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
