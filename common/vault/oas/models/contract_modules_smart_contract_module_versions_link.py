# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContractModulesSmartContractModuleVersionsLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'smart_contract_version_id': 'str',
        'alias_to_contract_module_version_id': 'dict(str, str)',
        'create_timestamp': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'smart_contract_version_id': 'smart_contract_version_id',
        'alias_to_contract_module_version_id': 'alias_to_contract_module_version_id',
        'create_timestamp': 'create_timestamp'
    }

    def __init__(self, id=None, smart_contract_version_id=None, alias_to_contract_module_version_id=None, create_timestamp=None):  # noqa: E501
        """ContractModulesSmartContractModuleVersionsLink - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._smart_contract_version_id = None
        self._alias_to_contract_module_version_id = None
        self._create_timestamp = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if smart_contract_version_id is not None:
            self.smart_contract_version_id = smart_contract_version_id
        if alias_to_contract_module_version_id is not None:
            self.alias_to_contract_module_version_id = alias_to_contract_module_version_id
        if create_timestamp is not None:
            self.create_timestamp = create_timestamp

    @property
    def id(self):
        """Gets the id of this ContractModulesSmartContractModuleVersionsLink.  # noqa: E501

        A unique ID. Can be provided by the client, otherwise it will be a service-generated UUID.   # noqa: E501

        :return: The id of this ContractModulesSmartContractModuleVersionsLink.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContractModulesSmartContractModuleVersionsLink.

        A unique ID. Can be provided by the client, otherwise it will be a service-generated UUID.   # noqa: E501

        :param id: The id of this ContractModulesSmartContractModuleVersionsLink.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def smart_contract_version_id(self):
        """Gets the smart_contract_version_id of this ContractModulesSmartContractModuleVersionsLink.  # noqa: E501

        The ID of the Smart Contract Version this link relates to.  # noqa: E501

        :return: The smart_contract_version_id of this ContractModulesSmartContractModuleVersionsLink.  # noqa: E501
        :rtype: str
        """
        return self._smart_contract_version_id

    @smart_contract_version_id.setter
    def smart_contract_version_id(self, smart_contract_version_id):
        """Sets the smart_contract_version_id of this ContractModulesSmartContractModuleVersionsLink.

        The ID of the Smart Contract Version this link relates to.  # noqa: E501

        :param smart_contract_version_id: The smart_contract_version_id of this ContractModulesSmartContractModuleVersionsLink.  # noqa: E501
        :type: str
        """

        self._smart_contract_version_id = smart_contract_version_id

    @property
    def alias_to_contract_module_version_id(self):
        """Gets the alias_to_contract_module_version_id of this ContractModulesSmartContractModuleVersionsLink.  # noqa: E501

        Map of alias to ContractModuleVersionID containing all Contract Module Versions that are linked to the Smart Contract Version ID. The alias is defined by the Smart Contract code. A link must provide Contract Module Version IDs for all aliases defined in the Smart Contract.  # noqa: E501

        :return: The alias_to_contract_module_version_id of this ContractModulesSmartContractModuleVersionsLink.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._alias_to_contract_module_version_id

    @alias_to_contract_module_version_id.setter
    def alias_to_contract_module_version_id(self, alias_to_contract_module_version_id):
        """Sets the alias_to_contract_module_version_id of this ContractModulesSmartContractModuleVersionsLink.

        Map of alias to ContractModuleVersionID containing all Contract Module Versions that are linked to the Smart Contract Version ID. The alias is defined by the Smart Contract code. A link must provide Contract Module Version IDs for all aliases defined in the Smart Contract.  # noqa: E501

        :param alias_to_contract_module_version_id: The alias_to_contract_module_version_id of this ContractModulesSmartContractModuleVersionsLink.  # noqa: E501
        :type: dict(str, str)
        """

        self._alias_to_contract_module_version_id = alias_to_contract_module_version_id

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this ContractModulesSmartContractModuleVersionsLink.  # noqa: E501

        Timestamp indicating when it was created.  # noqa: E501

        :return: The create_timestamp of this ContractModulesSmartContractModuleVersionsLink.  # noqa: E501
        :rtype: datetime
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this ContractModulesSmartContractModuleVersionsLink.

        Timestamp indicating when it was created.  # noqa: E501

        :param create_timestamp: The create_timestamp of this ContractModulesSmartContractModuleVersionsLink.  # noqa: E501
        :type: datetime
        """

        self._create_timestamp = create_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContractModulesSmartContractModuleVersionsLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractModulesSmartContractModuleVersionsLink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
