# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContractsSimulateContractsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_timestamp': 'datetime',
        'end_timestamp': 'datetime',
        'smart_contracts': 'list[ContractsSmartContract]',
        'supervisor_contracts': 'list[ContractsSupervisorContract]',
        'contract_modules': 'list[V1contractsContractModule]',
        'instructions': 'list[ContractsSimulateContractsInstruction]',
        'outputs': 'list[ContractsSimulateContractsOutputRequest]'
    }

    attribute_map = {
        'start_timestamp': 'start_timestamp',
        'end_timestamp': 'end_timestamp',
        'smart_contracts': 'smart_contracts',
        'supervisor_contracts': 'supervisor_contracts',
        'contract_modules': 'contract_modules',
        'instructions': 'instructions',
        'outputs': 'outputs'
    }

    def __init__(self, start_timestamp=None, end_timestamp=None, smart_contracts=None, supervisor_contracts=None, contract_modules=None, instructions=None, outputs=None):  # noqa: E501
        """ContractsSimulateContractsRequest - a model defined in Swagger"""  # noqa: E501
        self._start_timestamp = None
        self._end_timestamp = None
        self._smart_contracts = None
        self._supervisor_contracts = None
        self._contract_modules = None
        self._instructions = None
        self._outputs = None
        self.discriminator = None
        if start_timestamp is not None:
            self.start_timestamp = start_timestamp
        if end_timestamp is not None:
            self.end_timestamp = end_timestamp
        if smart_contracts is not None:
            self.smart_contracts = smart_contracts
        if supervisor_contracts is not None:
            self.supervisor_contracts = supervisor_contracts
        if contract_modules is not None:
            self.contract_modules = contract_modules
        if instructions is not None:
            self.instructions = instructions
        if outputs is not None:
            self.outputs = outputs

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this ContractsSimulateContractsRequest.  # noqa: E501

        Start time of the simulation.  # noqa: E501

        :return: The start_timestamp of this ContractsSimulateContractsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this ContractsSimulateContractsRequest.

        Start time of the simulation.  # noqa: E501

        :param start_timestamp: The start_timestamp of this ContractsSimulateContractsRequest.  # noqa: E501
        :type: datetime
        """

        self._start_timestamp = start_timestamp

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this ContractsSimulateContractsRequest.  # noqa: E501

        End time of the simulation. Instructions with a timestamp after this one will be rejected and the simulation will not start.  # noqa: E501

        :return: The end_timestamp of this ContractsSimulateContractsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this ContractsSimulateContractsRequest.

        End time of the simulation. Instructions with a timestamp after this one will be rejected and the simulation will not start.  # noqa: E501

        :param end_timestamp: The end_timestamp of this ContractsSimulateContractsRequest.  # noqa: E501
        :type: datetime
        """

        self._end_timestamp = end_timestamp

    @property
    def smart_contracts(self):
        """Gets the smart_contracts of this ContractsSimulateContractsRequest.  # noqa: E501

        A hypothetical list of Smart Contracts to simulate.  # noqa: E501

        :return: The smart_contracts of this ContractsSimulateContractsRequest.  # noqa: E501
        :rtype: list[ContractsSmartContract]
        """
        return self._smart_contracts

    @smart_contracts.setter
    def smart_contracts(self, smart_contracts):
        """Sets the smart_contracts of this ContractsSimulateContractsRequest.

        A hypothetical list of Smart Contracts to simulate.  # noqa: E501

        :param smart_contracts: The smart_contracts of this ContractsSimulateContractsRequest.  # noqa: E501
        :type: list[ContractsSmartContract]
        """

        self._smart_contracts = smart_contracts

    @property
    def supervisor_contracts(self):
        """Gets the supervisor_contracts of this ContractsSimulateContractsRequest.  # noqa: E501

        A hypothetical list of Supervisor Contracts to simulate. Although this is a list field, only one Supervisor Contract can currently be simulated for each request.  # noqa: E501

        :return: The supervisor_contracts of this ContractsSimulateContractsRequest.  # noqa: E501
        :rtype: list[ContractsSupervisorContract]
        """
        return self._supervisor_contracts

    @supervisor_contracts.setter
    def supervisor_contracts(self, supervisor_contracts):
        """Sets the supervisor_contracts of this ContractsSimulateContractsRequest.

        A hypothetical list of Supervisor Contracts to simulate. Although this is a list field, only one Supervisor Contract can currently be simulated for each request.  # noqa: E501

        :param supervisor_contracts: The supervisor_contracts of this ContractsSimulateContractsRequest.  # noqa: E501
        :type: list[ContractsSupervisorContract]
        """

        self._supervisor_contracts = supervisor_contracts

    @property
    def contract_modules(self):
        """Gets the contract_modules of this ContractsSimulateContractsRequest.  # noqa: E501

        A hypothetical list of Contract Modules to simulate.  # noqa: E501

        :return: The contract_modules of this ContractsSimulateContractsRequest.  # noqa: E501
        :rtype: list[V1contractsContractModule]
        """
        return self._contract_modules

    @contract_modules.setter
    def contract_modules(self, contract_modules):
        """Sets the contract_modules of this ContractsSimulateContractsRequest.

        A hypothetical list of Contract Modules to simulate.  # noqa: E501

        :param contract_modules: The contract_modules of this ContractsSimulateContractsRequest.  # noqa: E501
        :type: list[V1contractsContractModule]
        """

        self._contract_modules = contract_modules

    @property
    def instructions(self):
        """Gets the instructions of this ContractsSimulateContractsRequest.  # noqa: E501

        A list of timestamped exogenous instructions for simulation. These instructions dictate external events, such as postings or parameter updates, which (alongside the actual contract code) shape the simulation scenario.  # noqa: E501

        :return: The instructions of this ContractsSimulateContractsRequest.  # noqa: E501
        :rtype: list[ContractsSimulateContractsInstruction]
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this ContractsSimulateContractsRequest.

        A list of timestamped exogenous instructions for simulation. These instructions dictate external events, such as postings or parameter updates, which (alongside the actual contract code) shape the simulation scenario.  # noqa: E501

        :param instructions: The instructions of this ContractsSimulateContractsRequest.  # noqa: E501
        :type: list[ContractsSimulateContractsInstruction]
        """

        self._instructions = instructions

    @property
    def outputs(self):
        """Gets the outputs of this ContractsSimulateContractsRequest.  # noqa: E501

        A list of requests for data that is to be returned.  # noqa: E501

        :return: The outputs of this ContractsSimulateContractsRequest.  # noqa: E501
        :rtype: list[ContractsSimulateContractsOutputRequest]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this ContractsSimulateContractsRequest.

        A list of requests for data that is to be returned.  # noqa: E501

        :param outputs: The outputs of this ContractsSimulateContractsRequest.  # noqa: E501
        :type: list[ContractsSimulateContractsOutputRequest]
        """

        self._outputs = outputs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContractsSimulateContractsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractsSimulateContractsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
