# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomersCustomer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'status': 'CustomersCustomerStatus',
        'identifiers': 'list[AuthIdentifier]',
        'customer_details': 'CustomersCustomerDetails',
        'additional_details': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'identifiers': 'identifiers',
        'customer_details': 'customer_details',
        'additional_details': 'additional_details'
    }

    def __init__(self, id=None, status=None, identifiers=None, customer_details=None, additional_details=None):  # noqa: E501
        """CustomersCustomer - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._status = None
        self._identifiers = None
        self._customer_details = None
        self._additional_details = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if identifiers is not None:
            self.identifiers = identifiers
        if customer_details is not None:
            self.customer_details = customer_details
        if additional_details is not None:
            self.additional_details = additional_details

    @property
    def id(self):
        """Gets the id of this CustomersCustomer.  # noqa: E501

        The unique ID of the customer. This must be a string representation of a positive 64-bit signed integer.   # noqa: E501

        :return: The id of this CustomersCustomer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomersCustomer.

        The unique ID of the customer. This must be a string representation of a positive 64-bit signed integer.   # noqa: E501

        :param id: The id of this CustomersCustomer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this CustomersCustomer.  # noqa: E501


        :return: The status of this CustomersCustomer.  # noqa: E501
        :rtype: CustomersCustomerStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CustomersCustomer.


        :param status: The status of this CustomersCustomer.  # noqa: E501
        :type: CustomersCustomerStatus
        """

        self._status = status

    @property
    def identifiers(self):
        """Gets the identifiers of this CustomersCustomer.  # noqa: E501

        The registered identifiers of the customer. A customer could have multiple identifiers associated with them, for example, a phone number, email address or username.  # noqa: E501

        :return: The identifiers of this CustomersCustomer.  # noqa: E501
        :rtype: list[AuthIdentifier]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this CustomersCustomer.

        The registered identifiers of the customer. A customer could have multiple identifiers associated with them, for example, a phone number, email address or username.  # noqa: E501

        :param identifiers: The identifiers of this CustomersCustomer.  # noqa: E501
        :type: list[AuthIdentifier]
        """

        self._identifiers = identifiers

    @property
    def customer_details(self):
        """Gets the customer_details of this CustomersCustomer.  # noqa: E501


        :return: The customer_details of this CustomersCustomer.  # noqa: E501
        :rtype: CustomersCustomerDetails
        """
        return self._customer_details

    @customer_details.setter
    def customer_details(self, customer_details):
        """Sets the customer_details of this CustomersCustomer.


        :param customer_details: The customer_details of this CustomersCustomer.  # noqa: E501
        :type: CustomersCustomerDetails
        """

        self._customer_details = customer_details

    @property
    def additional_details(self):
        """Gets the additional_details of this CustomersCustomer.  # noqa: E501

        Key value map of additional, non-structured customer details.  # noqa: E501

        :return: The additional_details of this CustomersCustomer.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this CustomersCustomer.

        Key value map of additional, non-structured customer details.  # noqa: E501

        :param additional_details: The additional_details of this CustomersCustomer.  # noqa: E501
        :type: dict(str, str)
        """

        self._additional_details = additional_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomersCustomer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomersCustomer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
