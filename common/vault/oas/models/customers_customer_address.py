# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomersCustomerAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'house_name': 'str',
        'street_number': 'str',
        'street': 'str',
        'local_municipality': 'str',
        'city': 'str',
        'postal_area': 'str',
        'governing_district': 'str',
        'country': 'str',
        'address_type': 'CustomersCustomerAddressType',
        'start_timestamp': 'datetime',
        'end_timestamp': 'datetime',
        'customer_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'house_name': 'house_name',
        'street_number': 'street_number',
        'street': 'street',
        'local_municipality': 'local_municipality',
        'city': 'city',
        'postal_area': 'postal_area',
        'governing_district': 'governing_district',
        'country': 'country',
        'address_type': 'address_type',
        'start_timestamp': 'start_timestamp',
        'end_timestamp': 'end_timestamp',
        'customer_id': 'customer_id'
    }

    def __init__(self, id=None, house_name=None, street_number=None, street=None, local_municipality=None, city=None, postal_area=None, governing_district=None, country=None, address_type=None, start_timestamp=None, end_timestamp=None, customer_id=None):  # noqa: E501
        """CustomersCustomerAddress - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._house_name = None
        self._street_number = None
        self._street = None
        self._local_municipality = None
        self._city = None
        self._postal_area = None
        self._governing_district = None
        self._country = None
        self._address_type = None
        self._start_timestamp = None
        self._end_timestamp = None
        self._customer_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if house_name is not None:
            self.house_name = house_name
        if street_number is not None:
            self.street_number = street_number
        if street is not None:
            self.street = street
        if local_municipality is not None:
            self.local_municipality = local_municipality
        if city is not None:
            self.city = city
        if postal_area is not None:
            self.postal_area = postal_area
        if governing_district is not None:
            self.governing_district = governing_district
        if country is not None:
            self.country = country
        if address_type is not None:
            self.address_type = address_type
        if start_timestamp is not None:
            self.start_timestamp = start_timestamp
        if end_timestamp is not None:
            self.end_timestamp = end_timestamp
        if customer_id is not None:
            self.customer_id = customer_id

    @property
    def id(self):
        """Gets the id of this CustomersCustomerAddress.  # noqa: E501

        The address ID. Output only.  # noqa: E501

        :return: The id of this CustomersCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomersCustomerAddress.

        The address ID. Output only.  # noqa: E501

        :param id: The id of this CustomersCustomerAddress.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def house_name(self):
        """Gets the house_name of this CustomersCustomerAddress.  # noqa: E501

        The house name. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :return: The house_name of this CustomersCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._house_name

    @house_name.setter
    def house_name(self, house_name):
        """Sets the house_name of this CustomersCustomerAddress.

        The house name. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :param house_name: The house_name of this CustomersCustomerAddress.  # noqa: E501
        :type: str
        """

        self._house_name = house_name

    @property
    def street_number(self):
        """Gets the street_number of this CustomersCustomerAddress.  # noqa: E501

        The street number. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :return: The street_number of this CustomersCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number):
        """Sets the street_number of this CustomersCustomerAddress.

        The street number. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :param street_number: The street_number of this CustomersCustomerAddress.  # noqa: E501
        :type: str
        """

        self._street_number = street_number

    @property
    def street(self):
        """Gets the street of this CustomersCustomerAddress.  # noqa: E501

        The street name. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :return: The street of this CustomersCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this CustomersCustomerAddress.

        The street name. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :param street: The street of this CustomersCustomerAddress.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def local_municipality(self):
        """Gets the local_municipality of this CustomersCustomerAddress.  # noqa: E501

        The local municipality. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :return: The local_municipality of this CustomersCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._local_municipality

    @local_municipality.setter
    def local_municipality(self, local_municipality):
        """Sets the local_municipality of this CustomersCustomerAddress.

        The local municipality. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :param local_municipality: The local_municipality of this CustomersCustomerAddress.  # noqa: E501
        :type: str
        """

        self._local_municipality = local_municipality

    @property
    def city(self):
        """Gets the city of this CustomersCustomerAddress.  # noqa: E501

        The city. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :return: The city of this CustomersCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CustomersCustomerAddress.

        The city. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :param city: The city of this CustomersCustomerAddress.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def postal_area(self):
        """Gets the postal_area of this CustomersCustomerAddress.  # noqa: E501

        The postcode or zip code. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :return: The postal_area of this CustomersCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_area

    @postal_area.setter
    def postal_area(self, postal_area):
        """Sets the postal_area of this CustomersCustomerAddress.

        The postcode or zip code. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :param postal_area: The postal_area of this CustomersCustomerAddress.  # noqa: E501
        :type: str
        """

        self._postal_area = postal_area

    @property
    def governing_district(self):
        """Gets the governing_district of this CustomersCustomerAddress.  # noqa: E501

        The governing district. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :return: The governing_district of this CustomersCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._governing_district

    @governing_district.setter
    def governing_district(self, governing_district):
        """Sets the governing_district of this CustomersCustomerAddress.

        The governing district. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :param governing_district: The governing_district of this CustomersCustomerAddress.  # noqa: E501
        :type: str
        """

        self._governing_district = governing_district

    @property
    def country(self):
        """Gets the country of this CustomersCustomerAddress.  # noqa: E501

        The country. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :return: The country of this CustomersCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CustomersCustomerAddress.

        The country. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :param country: The country of this CustomersCustomerAddress.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def address_type(self):
        """Gets the address_type of this CustomersCustomerAddress.  # noqa: E501


        :return: The address_type of this CustomersCustomerAddress.  # noqa: E501
        :rtype: CustomersCustomerAddressType
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this CustomersCustomerAddress.


        :param address_type: The address_type of this CustomersCustomerAddress.  # noqa: E501
        :type: CustomersCustomerAddressType
        """

        self._address_type = address_type

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this CustomersCustomerAddress.  # noqa: E501

        The date the address was valid from. Optional for create requests.  # noqa: E501

        :return: The start_timestamp of this CustomersCustomerAddress.  # noqa: E501
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this CustomersCustomerAddress.

        The date the address was valid from. Optional for create requests.  # noqa: E501

        :param start_timestamp: The start_timestamp of this CustomersCustomerAddress.  # noqa: E501
        :type: datetime
        """

        self._start_timestamp = start_timestamp

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this CustomersCustomerAddress.  # noqa: E501

        The date the address changed. Optional for create requests.  # noqa: E501

        :return: The end_timestamp of this CustomersCustomerAddress.  # noqa: E501
        :rtype: datetime
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this CustomersCustomerAddress.

        The date the address changed. Optional for create requests.  # noqa: E501

        :param end_timestamp: The end_timestamp of this CustomersCustomerAddress.  # noqa: E501
        :type: datetime
        """

        self._end_timestamp = end_timestamp

    @property
    def customer_id(self):
        """Gets the customer_id of this CustomersCustomerAddress.  # noqa: E501

        The unique ID of the customer linked to the address.  # noqa: E501

        :return: The customer_id of this CustomersCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CustomersCustomerAddress.

        The unique ID of the customer linked to the address.  # noqa: E501

        :param customer_id: The customer_id of this CustomersCustomerAddress.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomersCustomerAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomersCustomerAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
