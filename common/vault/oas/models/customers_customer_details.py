# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomersCustomerDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'CustomersCustomerTitle',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'dob': 'str',
        'gender': 'CustomersCustomerGender',
        'nationality': 'str',
        'email_address': 'str',
        'mobile_phone_number': 'str',
        'home_phone_number': 'str',
        'business_phone_number': 'str',
        'contact_method': 'CustomersCustomerContactMethod',
        'country_of_residence': 'str',
        'country_of_taxation': 'str',
        'accessibility': 'CustomersCustomerAccessibility',
        'external_customer_id': 'str'
    }

    attribute_map = {
        'title': 'title',
        'first_name': 'first_name',
        'middle_name': 'middle_name',
        'last_name': 'last_name',
        'dob': 'dob',
        'gender': 'gender',
        'nationality': 'nationality',
        'email_address': 'email_address',
        'mobile_phone_number': 'mobile_phone_number',
        'home_phone_number': 'home_phone_number',
        'business_phone_number': 'business_phone_number',
        'contact_method': 'contact_method',
        'country_of_residence': 'country_of_residence',
        'country_of_taxation': 'country_of_taxation',
        'accessibility': 'accessibility',
        'external_customer_id': 'external_customer_id'
    }

    def __init__(self, title=None, first_name=None, middle_name=None, last_name=None, dob=None, gender=None, nationality=None, email_address=None, mobile_phone_number=None, home_phone_number=None, business_phone_number=None, contact_method=None, country_of_residence=None, country_of_taxation=None, accessibility=None, external_customer_id=None):  # noqa: E501
        """CustomersCustomerDetails - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._dob = None
        self._gender = None
        self._nationality = None
        self._email_address = None
        self._mobile_phone_number = None
        self._home_phone_number = None
        self._business_phone_number = None
        self._contact_method = None
        self._country_of_residence = None
        self._country_of_taxation = None
        self._accessibility = None
        self._external_customer_id = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if first_name is not None:
            self.first_name = first_name
        if middle_name is not None:
            self.middle_name = middle_name
        if last_name is not None:
            self.last_name = last_name
        if dob is not None:
            self.dob = dob
        if gender is not None:
            self.gender = gender
        if nationality is not None:
            self.nationality = nationality
        if email_address is not None:
            self.email_address = email_address
        if mobile_phone_number is not None:
            self.mobile_phone_number = mobile_phone_number
        if home_phone_number is not None:
            self.home_phone_number = home_phone_number
        if business_phone_number is not None:
            self.business_phone_number = business_phone_number
        if contact_method is not None:
            self.contact_method = contact_method
        if country_of_residence is not None:
            self.country_of_residence = country_of_residence
        if country_of_taxation is not None:
            self.country_of_taxation = country_of_taxation
        if accessibility is not None:
            self.accessibility = accessibility
        if external_customer_id is not None:
            self.external_customer_id = external_customer_id

    @property
    def title(self):
        """Gets the title of this CustomersCustomerDetails.  # noqa: E501


        :return: The title of this CustomersCustomerDetails.  # noqa: E501
        :rtype: CustomersCustomerTitle
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CustomersCustomerDetails.


        :param title: The title of this CustomersCustomerDetails.  # noqa: E501
        :type: CustomersCustomerTitle
        """

        self._title = title

    @property
    def first_name(self):
        """Gets the first_name of this CustomersCustomerDetails.  # noqa: E501

        The customer's first name. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :return: The first_name of this CustomersCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CustomersCustomerDetails.

        The customer's first name. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :param first_name: The first_name of this CustomersCustomerDetails.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this CustomersCustomerDetails.  # noqa: E501

        The customer's middle name. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :return: The middle_name of this CustomersCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this CustomersCustomerDetails.

        The customer's middle name. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :param middle_name: The middle_name of this CustomersCustomerDetails.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this CustomersCustomerDetails.  # noqa: E501

        The customer's last name. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :return: The last_name of this CustomersCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CustomersCustomerDetails.

        The customer's last name. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :param last_name: The last_name of this CustomersCustomerDetails.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def dob(self):
        """Gets the dob of this CustomersCustomerDetails.  # noqa: E501

        The customer's date of birth. Optional for create requests. This field must contain a valid ISO-formatted date, e.g. 2018-06-03.  # noqa: E501

        :return: The dob of this CustomersCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this CustomersCustomerDetails.

        The customer's date of birth. Optional for create requests. This field must contain a valid ISO-formatted date, e.g. 2018-06-03.  # noqa: E501

        :param dob: The dob of this CustomersCustomerDetails.  # noqa: E501
        :type: str
        """

        self._dob = dob

    @property
    def gender(self):
        """Gets the gender of this CustomersCustomerDetails.  # noqa: E501


        :return: The gender of this CustomersCustomerDetails.  # noqa: E501
        :rtype: CustomersCustomerGender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this CustomersCustomerDetails.


        :param gender: The gender of this CustomersCustomerDetails.  # noqa: E501
        :type: CustomersCustomerGender
        """

        self._gender = gender

    @property
    def nationality(self):
        """Gets the nationality of this CustomersCustomerDetails.  # noqa: E501

        The customer's nationality. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :return: The nationality of this CustomersCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this CustomersCustomerDetails.

        The customer's nationality. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :param nationality: The nationality of this CustomersCustomerDetails.  # noqa: E501
        :type: str
        """

        self._nationality = nationality

    @property
    def email_address(self):
        """Gets the email_address of this CustomersCustomerDetails.  # noqa: E501

        The customer's email address. Optional for create requests. This field must contain a valid email address.  # noqa: E501

        :return: The email_address of this CustomersCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this CustomersCustomerDetails.

        The customer's email address. Optional for create requests. This field must contain a valid email address.  # noqa: E501

        :param email_address: The email_address of this CustomersCustomerDetails.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def mobile_phone_number(self):
        """Gets the mobile_phone_number of this CustomersCustomerDetails.  # noqa: E501

        The customer's mobile phone number. Optional for create requests. This field must contain a valid telephone number.  # noqa: E501

        :return: The mobile_phone_number of this CustomersCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._mobile_phone_number

    @mobile_phone_number.setter
    def mobile_phone_number(self, mobile_phone_number):
        """Sets the mobile_phone_number of this CustomersCustomerDetails.

        The customer's mobile phone number. Optional for create requests. This field must contain a valid telephone number.  # noqa: E501

        :param mobile_phone_number: The mobile_phone_number of this CustomersCustomerDetails.  # noqa: E501
        :type: str
        """

        self._mobile_phone_number = mobile_phone_number

    @property
    def home_phone_number(self):
        """Gets the home_phone_number of this CustomersCustomerDetails.  # noqa: E501

        The customer's home phone number. Optional for create requests. This field must contain a valid telephone number.  # noqa: E501

        :return: The home_phone_number of this CustomersCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._home_phone_number

    @home_phone_number.setter
    def home_phone_number(self, home_phone_number):
        """Sets the home_phone_number of this CustomersCustomerDetails.

        The customer's home phone number. Optional for create requests. This field must contain a valid telephone number.  # noqa: E501

        :param home_phone_number: The home_phone_number of this CustomersCustomerDetails.  # noqa: E501
        :type: str
        """

        self._home_phone_number = home_phone_number

    @property
    def business_phone_number(self):
        """Gets the business_phone_number of this CustomersCustomerDetails.  # noqa: E501

        The customer's business phone number. Optional for create requests. This field must contain a valid telephone number.  # noqa: E501

        :return: The business_phone_number of this CustomersCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._business_phone_number

    @business_phone_number.setter
    def business_phone_number(self, business_phone_number):
        """Sets the business_phone_number of this CustomersCustomerDetails.

        The customer's business phone number. Optional for create requests. This field must contain a valid telephone number.  # noqa: E501

        :param business_phone_number: The business_phone_number of this CustomersCustomerDetails.  # noqa: E501
        :type: str
        """

        self._business_phone_number = business_phone_number

    @property
    def contact_method(self):
        """Gets the contact_method of this CustomersCustomerDetails.  # noqa: E501


        :return: The contact_method of this CustomersCustomerDetails.  # noqa: E501
        :rtype: CustomersCustomerContactMethod
        """
        return self._contact_method

    @contact_method.setter
    def contact_method(self, contact_method):
        """Sets the contact_method of this CustomersCustomerDetails.


        :param contact_method: The contact_method of this CustomersCustomerDetails.  # noqa: E501
        :type: CustomersCustomerContactMethod
        """

        self._contact_method = contact_method

    @property
    def country_of_residence(self):
        """Gets the country_of_residence of this CustomersCustomerDetails.  # noqa: E501

        The customer's country of residence. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :return: The country_of_residence of this CustomersCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._country_of_residence

    @country_of_residence.setter
    def country_of_residence(self, country_of_residence):
        """Sets the country_of_residence of this CustomersCustomerDetails.

        The customer's country of residence. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :param country_of_residence: The country_of_residence of this CustomersCustomerDetails.  # noqa: E501
        :type: str
        """

        self._country_of_residence = country_of_residence

    @property
    def country_of_taxation(self):
        """Gets the country_of_taxation of this CustomersCustomerDetails.  # noqa: E501

        The customer's country of taxation. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :return: The country_of_taxation of this CustomersCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._country_of_taxation

    @country_of_taxation.setter
    def country_of_taxation(self, country_of_taxation):
        """Sets the country_of_taxation of this CustomersCustomerDetails.

        The customer's country of taxation. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :param country_of_taxation: The country_of_taxation of this CustomersCustomerDetails.  # noqa: E501
        :type: str
        """

        self._country_of_taxation = country_of_taxation

    @property
    def accessibility(self):
        """Gets the accessibility of this CustomersCustomerDetails.  # noqa: E501


        :return: The accessibility of this CustomersCustomerDetails.  # noqa: E501
        :rtype: CustomersCustomerAccessibility
        """
        return self._accessibility

    @accessibility.setter
    def accessibility(self, accessibility):
        """Sets the accessibility of this CustomersCustomerDetails.


        :param accessibility: The accessibility of this CustomersCustomerDetails.  # noqa: E501
        :type: CustomersCustomerAccessibility
        """

        self._accessibility = accessibility

    @property
    def external_customer_id(self):
        """Gets the external_customer_id of this CustomersCustomerDetails.  # noqa: E501

        An external customer ID. May be used to associate a customer in Vault with an existing customer ID. Vault does not use this for any other purpose. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :return: The external_customer_id of this CustomersCustomerDetails.  # noqa: E501
        :rtype: str
        """
        return self._external_customer_id

    @external_customer_id.setter
    def external_customer_id(self, external_customer_id):
        """Sets the external_customer_id of this CustomersCustomerDetails.

        An external customer ID. May be used to associate a customer in Vault with an existing customer ID. Vault does not use this for any other purpose. Optional for create requests.  Max length: 256 characters.  # noqa: E501

        :param external_customer_id: The external_customer_id of this CustomersCustomerDetails.  # noqa: E501
        :type: str
        """

        self._external_customer_id = external_customer_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomersCustomerDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomersCustomerDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
