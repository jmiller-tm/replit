# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GlobalParametersGlobalParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'display_name': 'str',
        'description': 'str',
        'create_timestamp': 'datetime',
        'number': 'ParamsNumberField',
        '_str': 'ParamsStringField',
        'denomination': 'ParamsDenominationField',
        '_date': 'ParamsDateField'
    }

    attribute_map = {
        'id': 'id',
        'display_name': 'display_name',
        'description': 'description',
        'create_timestamp': 'create_timestamp',
        'number': 'number',
        '_str': 'str',
        'denomination': 'denomination',
        '_date': 'date'
    }

    def __init__(self, id=None, display_name=None, description=None, create_timestamp=None, number=None, _str=None, denomination=None, _date=None):  # noqa: E501
        """GlobalParametersGlobalParameter - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._display_name = None
        self._description = None
        self._create_timestamp = None
        self._number = None
        self.__str = None
        self._denomination = None
        self.__date = None
        self.discriminator = None
        self.id = id
        self.display_name = display_name
        self.description = description
        if create_timestamp is not None:
            self.create_timestamp = create_timestamp
        if number is not None:
            self.number = number
        if _str is not None:
            self._str = _str
        if denomination is not None:
            self.denomination = denomination
        if _date is not None:
            self._date = _date

    @property
    def id(self):
        """Gets the id of this GlobalParametersGlobalParameter.  # noqa: E501

        The `GlobalParameter` ID. Used by Smart Contracts to retrieve values for this parameter.  Required.  # noqa: E501

        :return: The id of this GlobalParametersGlobalParameter.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GlobalParametersGlobalParameter.

        The `GlobalParameter` ID. Used by Smart Contracts to retrieve values for this parameter.  Required.  # noqa: E501

        :param id: The id of this GlobalParametersGlobalParameter.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this GlobalParametersGlobalParameter.  # noqa: E501

        A human-readable name.  Required.  # noqa: E501

        :return: The display_name of this GlobalParametersGlobalParameter.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GlobalParametersGlobalParameter.

        A human-readable name.  Required.  # noqa: E501

        :param display_name: The display_name of this GlobalParametersGlobalParameter.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this GlobalParametersGlobalParameter.  # noqa: E501

        A description of the parameter.  Required.  # noqa: E501

        :return: The description of this GlobalParametersGlobalParameter.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GlobalParametersGlobalParameter.

        A description of the parameter.  Required.  # noqa: E501

        :param description: The description of this GlobalParametersGlobalParameter.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this GlobalParametersGlobalParameter.  # noqa: E501

        A timestamp indicating when the `GlobalParameter` was created.  # noqa: E501

        :return: The create_timestamp of this GlobalParametersGlobalParameter.  # noqa: E501
        :rtype: datetime
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this GlobalParametersGlobalParameter.

        A timestamp indicating when the `GlobalParameter` was created.  # noqa: E501

        :param create_timestamp: The create_timestamp of this GlobalParametersGlobalParameter.  # noqa: E501
        :type: datetime
        """

        self._create_timestamp = create_timestamp

    @property
    def number(self):
        """Gets the number of this GlobalParametersGlobalParameter.  # noqa: E501


        :return: The number of this GlobalParametersGlobalParameter.  # noqa: E501
        :rtype: ParamsNumberField
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this GlobalParametersGlobalParameter.


        :param number: The number of this GlobalParametersGlobalParameter.  # noqa: E501
        :type: ParamsNumberField
        """

        self._number = number

    @property
    def _str(self):
        """Gets the _str of this GlobalParametersGlobalParameter.  # noqa: E501


        :return: The _str of this GlobalParametersGlobalParameter.  # noqa: E501
        :rtype: ParamsStringField
        """
        return self.__str

    @_str.setter
    def _str(self, _str):
        """Sets the _str of this GlobalParametersGlobalParameter.


        :param _str: The _str of this GlobalParametersGlobalParameter.  # noqa: E501
        :type: ParamsStringField
        """

        self.__str = _str

    @property
    def denomination(self):
        """Gets the denomination of this GlobalParametersGlobalParameter.  # noqa: E501


        :return: The denomination of this GlobalParametersGlobalParameter.  # noqa: E501
        :rtype: ParamsDenominationField
        """
        return self._denomination

    @denomination.setter
    def denomination(self, denomination):
        """Sets the denomination of this GlobalParametersGlobalParameter.


        :param denomination: The denomination of this GlobalParametersGlobalParameter.  # noqa: E501
        :type: ParamsDenominationField
        """

        self._denomination = denomination

    @property
    def _date(self):
        """Gets the _date of this GlobalParametersGlobalParameter.  # noqa: E501


        :return: The _date of this GlobalParametersGlobalParameter.  # noqa: E501
        :rtype: ParamsDateField
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GlobalParametersGlobalParameter.


        :param _date: The _date of this GlobalParametersGlobalParameter.  # noqa: E501
        :type: ParamsDateField
        """

        self.__date = _date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GlobalParametersGlobalParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalParametersGlobalParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
