# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InternalAccountsInternalAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'product_id': 'str',
        'product_version_id': 'str',
        'permitted_denominations': 'list[str]',
        'status': 'AccountsCommonAccountStatus',
        'opening_timestamp': 'datetime',
        'details': 'dict(str, str)',
        'accounting': 'AccountsCommonAccounting',
        'account_balance': 'AccountsCommonAccountBalance'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'product_id': 'product_id',
        'product_version_id': 'product_version_id',
        'permitted_denominations': 'permitted_denominations',
        'status': 'status',
        'opening_timestamp': 'opening_timestamp',
        'details': 'details',
        'accounting': 'accounting',
        'account_balance': 'account_balance'
    }

    def __init__(self, id=None, name=None, product_id=None, product_version_id=None, permitted_denominations=None, status=None, opening_timestamp=None, details=None, accounting=None, account_balance=None):  # noqa: E501
        """InternalAccountsInternalAccount - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._product_id = None
        self._product_version_id = None
        self._permitted_denominations = None
        self._status = None
        self._opening_timestamp = None
        self._details = None
        self._accounting = None
        self._account_balance = None
        self.discriminator = None
        self.id = id
        if name is not None:
            self.name = name
        if product_id is not None:
            self.product_id = product_id
        if product_version_id is not None:
            self.product_version_id = product_version_id
        if permitted_denominations is not None:
            self.permitted_denominations = permitted_denominations
        if status is not None:
            self.status = status
        if opening_timestamp is not None:
            self.opening_timestamp = opening_timestamp
        if details is not None:
            self.details = details
        if accounting is not None:
            self.accounting = accounting
        if account_balance is not None:
            self.account_balance = account_balance

    @property
    def id(self):
        """Gets the id of this InternalAccountsInternalAccount.  # noqa: E501

        A unique identifier for the account.  Required. Max length: 36 characters.  # noqa: E501

        :return: The id of this InternalAccountsInternalAccount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InternalAccountsInternalAccount.

        A unique identifier for the account.  Required. Max length: 36 characters.  # noqa: E501

        :param id: The id of this InternalAccountsInternalAccount.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this InternalAccountsInternalAccount.  # noqa: E501

        The account name.  # noqa: E501

        :return: The name of this InternalAccountsInternalAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InternalAccountsInternalAccount.

        The account name.  # noqa: E501

        :param name: The name of this InternalAccountsInternalAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def product_id(self):
        """Gets the product_id of this InternalAccountsInternalAccount.  # noqa: E501

        The ID of the product. Required for create requests.  # noqa: E501

        :return: The product_id of this InternalAccountsInternalAccount.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this InternalAccountsInternalAccount.

        The ID of the product. Required for create requests.  # noqa: E501

        :param product_id: The product_id of this InternalAccountsInternalAccount.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def product_version_id(self):
        """Gets the product_version_id of this InternalAccountsInternalAccount.  # noqa: E501

        The ID of the product version.  # noqa: E501

        :return: The product_version_id of this InternalAccountsInternalAccount.  # noqa: E501
        :rtype: str
        """
        return self._product_version_id

    @product_version_id.setter
    def product_version_id(self, product_version_id):
        """Sets the product_version_id of this InternalAccountsInternalAccount.

        The ID of the product version.  # noqa: E501

        :param product_version_id: The product_version_id of this InternalAccountsInternalAccount.  # noqa: E501
        :type: str
        """

        self._product_version_id = product_version_id

    @property
    def permitted_denominations(self):
        """Gets the permitted_denominations of this InternalAccountsInternalAccount.  # noqa: E501

        Denominations the account can hold balances in. Must be a subset of the denomination supported for the product version. Optional for create requests, defaults to the denominations supported for the product version if the product version defines `supported_denominations`. Otherwise, defaults to the `PERMITTED_DENOMINATIONS` defined in the configuration.  # noqa: E501

        :return: The permitted_denominations of this InternalAccountsInternalAccount.  # noqa: E501
        :rtype: list[str]
        """
        return self._permitted_denominations

    @permitted_denominations.setter
    def permitted_denominations(self, permitted_denominations):
        """Sets the permitted_denominations of this InternalAccountsInternalAccount.

        Denominations the account can hold balances in. Must be a subset of the denomination supported for the product version. Optional for create requests, defaults to the denominations supported for the product version if the product version defines `supported_denominations`. Otherwise, defaults to the `PERMITTED_DENOMINATIONS` defined in the configuration.  # noqa: E501

        :param permitted_denominations: The permitted_denominations of this InternalAccountsInternalAccount.  # noqa: E501
        :type: list[str]
        """

        self._permitted_denominations = permitted_denominations

    @property
    def status(self):
        """Gets the status of this InternalAccountsInternalAccount.  # noqa: E501


        :return: The status of this InternalAccountsInternalAccount.  # noqa: E501
        :rtype: AccountsCommonAccountStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InternalAccountsInternalAccount.


        :param status: The status of this InternalAccountsInternalAccount.  # noqa: E501
        :type: AccountsCommonAccountStatus
        """

        self._status = status

    @property
    def opening_timestamp(self):
        """Gets the opening_timestamp of this InternalAccountsInternalAccount.  # noqa: E501

        The time when the account was opened.  # noqa: E501

        :return: The opening_timestamp of this InternalAccountsInternalAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._opening_timestamp

    @opening_timestamp.setter
    def opening_timestamp(self, opening_timestamp):
        """Sets the opening_timestamp of this InternalAccountsInternalAccount.

        The time when the account was opened.  # noqa: E501

        :param opening_timestamp: The opening_timestamp of this InternalAccountsInternalAccount.  # noqa: E501
        :type: datetime
        """

        self._opening_timestamp = opening_timestamp

    @property
    def details(self):
        """Gets the details of this InternalAccountsInternalAccount.  # noqa: E501

        A map of unstructured fields that hold instance-specific account details, for example, the source of funds. Optional for create requests.  # noqa: E501

        :return: The details of this InternalAccountsInternalAccount.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this InternalAccountsInternalAccount.

        A map of unstructured fields that hold instance-specific account details, for example, the source of funds. Optional for create requests.  # noqa: E501

        :param details: The details of this InternalAccountsInternalAccount.  # noqa: E501
        :type: dict(str, str)
        """

        self._details = details

    @property
    def accounting(self):
        """Gets the accounting of this InternalAccountsInternalAccount.  # noqa: E501


        :return: The accounting of this InternalAccountsInternalAccount.  # noqa: E501
        :rtype: AccountsCommonAccounting
        """
        return self._accounting

    @accounting.setter
    def accounting(self, accounting):
        """Sets the accounting of this InternalAccountsInternalAccount.


        :param accounting: The accounting of this InternalAccountsInternalAccount.  # noqa: E501
        :type: AccountsCommonAccounting
        """

        self._accounting = accounting

    @property
    def account_balance(self):
        """Gets the account_balance of this InternalAccountsInternalAccount.  # noqa: E501


        :return: The account_balance of this InternalAccountsInternalAccount.  # noqa: E501
        :rtype: AccountsCommonAccountBalance
        """
        return self._account_balance

    @account_balance.setter
    def account_balance(self, account_balance):
        """Sets the account_balance of this InternalAccountsInternalAccount.


        :param account_balance: The account_balance of this InternalAccountsInternalAccount.  # noqa: E501
        :type: AccountsCommonAccountBalance
        """

        self._account_balance = account_balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InternalAccountsInternalAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InternalAccountsInternalAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
