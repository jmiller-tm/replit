# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LedgerBalancesLedgerBalance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'account_id': 'str',
        'account_address': 'str',
        'phase': 'LedgerBalancesPostingPhase',
        'asset': 'str',
        'denomination': 'str',
        'amount': 'str',
        'total_debit': 'str',
        'total_credit': 'str'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'account_id',
        'account_address': 'account_address',
        'phase': 'phase',
        'asset': 'asset',
        'denomination': 'denomination',
        'amount': 'amount',
        'total_debit': 'total_debit',
        'total_credit': 'total_credit'
    }

    def __init__(self, id=None, account_id=None, account_address=None, phase=None, asset=None, denomination=None, amount=None, total_debit=None, total_credit=None):  # noqa: E501
        """LedgerBalancesLedgerBalance - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_id = None
        self._account_address = None
        self._phase = None
        self._asset = None
        self._denomination = None
        self._amount = None
        self._total_debit = None
        self._total_credit = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if account_address is not None:
            self.account_address = account_address
        if phase is not None:
            self.phase = phase
        if asset is not None:
            self.asset = asset
        if denomination is not None:
            self.denomination = denomination
        if amount is not None:
            self.amount = amount
        if total_debit is not None:
            self.total_debit = total_debit
        if total_credit is not None:
            self.total_credit = total_credit

    @property
    def id(self):
        """Gets the id of this LedgerBalancesLedgerBalance.  # noqa: E501

        The ID of the Ledger Balance. Output only.  # noqa: E501

        :return: The id of this LedgerBalancesLedgerBalance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LedgerBalancesLedgerBalance.

        The ID of the Ledger Balance. Output only.  # noqa: E501

        :param id: The id of this LedgerBalancesLedgerBalance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this LedgerBalancesLedgerBalance.  # noqa: E501

        The ID of the associated account.  # noqa: E501

        :return: The account_id of this LedgerBalancesLedgerBalance.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this LedgerBalancesLedgerBalance.

        The ID of the associated account.  # noqa: E501

        :param account_id: The account_id of this LedgerBalancesLedgerBalance.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_address(self):
        """Gets the account_address of this LedgerBalancesLedgerBalance.  # noqa: E501

        The account address, which represents one partition of the total balances held on the account.  # noqa: E501

        :return: The account_address of this LedgerBalancesLedgerBalance.  # noqa: E501
        :rtype: str
        """
        return self._account_address

    @account_address.setter
    def account_address(self, account_address):
        """Sets the account_address of this LedgerBalancesLedgerBalance.

        The account address, which represents one partition of the total balances held on the account.  # noqa: E501

        :param account_address: The account_address of this LedgerBalancesLedgerBalance.  # noqa: E501
        :type: str
        """

        self._account_address = account_address

    @property
    def phase(self):
        """Gets the phase of this LedgerBalancesLedgerBalance.  # noqa: E501


        :return: The phase of this LedgerBalancesLedgerBalance.  # noqa: E501
        :rtype: LedgerBalancesPostingPhase
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this LedgerBalancesLedgerBalance.


        :param phase: The phase of this LedgerBalancesLedgerBalance.  # noqa: E501
        :type: LedgerBalancesPostingPhase
        """

        self._phase = phase

    @property
    def asset(self):
        """Gets the asset of this LedgerBalancesLedgerBalance.  # noqa: E501

        The asset in which the balance is held.  # noqa: E501

        :return: The asset of this LedgerBalancesLedgerBalance.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this LedgerBalancesLedgerBalance.

        The asset in which the balance is held.  # noqa: E501

        :param asset: The asset of this LedgerBalancesLedgerBalance.  # noqa: E501
        :type: str
        """

        self._asset = asset

    @property
    def denomination(self):
        """Gets the denomination of this LedgerBalancesLedgerBalance.  # noqa: E501

        The denomination in which the balance is held for the given asset.  # noqa: E501

        :return: The denomination of this LedgerBalancesLedgerBalance.  # noqa: E501
        :rtype: str
        """
        return self._denomination

    @denomination.setter
    def denomination(self, denomination):
        """Sets the denomination of this LedgerBalancesLedgerBalance.

        The denomination in which the balance is held for the given asset.  # noqa: E501

        :param denomination: The denomination of this LedgerBalancesLedgerBalance.  # noqa: E501
        :type: str
        """

        self._denomination = denomination

    @property
    def amount(self):
        """Gets the amount of this LedgerBalancesLedgerBalance.  # noqa: E501

        The amount, which is the net value of the balance.  # noqa: E501

        :return: The amount of this LedgerBalancesLedgerBalance.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this LedgerBalancesLedgerBalance.

        The amount, which is the net value of the balance.  # noqa: E501

        :param amount: The amount of this LedgerBalancesLedgerBalance.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def total_debit(self):
        """Gets the total_debit of this LedgerBalancesLedgerBalance.  # noqa: E501

        The total sum of debits.  # noqa: E501

        :return: The total_debit of this LedgerBalancesLedgerBalance.  # noqa: E501
        :rtype: str
        """
        return self._total_debit

    @total_debit.setter
    def total_debit(self, total_debit):
        """Sets the total_debit of this LedgerBalancesLedgerBalance.

        The total sum of debits.  # noqa: E501

        :param total_debit: The total_debit of this LedgerBalancesLedgerBalance.  # noqa: E501
        :type: str
        """

        self._total_debit = total_debit

    @property
    def total_credit(self):
        """Gets the total_credit of this LedgerBalancesLedgerBalance.  # noqa: E501

        The total sum of credits.  # noqa: E501

        :return: The total_credit of this LedgerBalancesLedgerBalance.  # noqa: E501
        :rtype: str
        """
        return self._total_credit

    @total_credit.setter
    def total_credit(self, total_credit):
        """Sets the total_credit of this LedgerBalancesLedgerBalance.

        The total sum of credits.  # noqa: E501

        :param total_credit: The total_credit of this LedgerBalancesLedgerBalance.  # noqa: E501
        :type: str
        """

        self._total_credit = total_credit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LedgerBalancesLedgerBalance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LedgerBalancesLedgerBalance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
