# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ParamsParam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'display_name': 'str',
        'description': 'str',
        'value': 'str',
        'default_value': 'str',
        'effective_timestamp': 'datetime',
        'level': 'ParamsLevel',
        'update_permission': 'ParamsUpdatePermission',
        'derived': 'bool',
        'number': 'ParamsNumberField',
        'account': 'ParamsAccountField',
        'values': 'ParamsValueChoiceField',
        'denomination': 'ParamsDenominationField',
        '_date': 'ParamsDateField'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'display_name',
        'description': 'description',
        'value': 'value',
        'default_value': 'default_value',
        'effective_timestamp': 'effective_timestamp',
        'level': 'level',
        'update_permission': 'update_permission',
        'derived': 'derived',
        'number': 'number',
        'account': 'account',
        'values': 'values',
        'denomination': 'denomination',
        '_date': 'date'
    }

    def __init__(self, name=None, display_name=None, description=None, value=None, default_value=None, effective_timestamp=None, level=None, update_permission=None, derived=None, number=None, account=None, values=None, denomination=None, _date=None):  # noqa: E501
        """ParamsParam - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._display_name = None
        self._description = None
        self._value = None
        self._default_value = None
        self._effective_timestamp = None
        self._level = None
        self._update_permission = None
        self._derived = None
        self._number = None
        self._account = None
        self._values = None
        self._denomination = None
        self.__date = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if value is not None:
            self.value = value
        if default_value is not None:
            self.default_value = default_value
        if effective_timestamp is not None:
            self.effective_timestamp = effective_timestamp
        if level is not None:
            self.level = level
        if update_permission is not None:
            self.update_permission = update_permission
        if derived is not None:
            self.derived = derived
        if number is not None:
            self.number = number
        if account is not None:
            self.account = account
        if values is not None:
            self.values = values
        if denomination is not None:
            self.denomination = denomination
        if _date is not None:
            self._date = _date

    @property
    def name(self):
        """Gets the name of this ParamsParam.  # noqa: E501

        The name of the parameter.  # noqa: E501

        :return: The name of this ParamsParam.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ParamsParam.

        The name of the parameter.  # noqa: E501

        :param name: The name of this ParamsParam.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this ParamsParam.  # noqa: E501

        The name of the parameter to be displayed in the UI.  # noqa: E501

        :return: The display_name of this ParamsParam.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ParamsParam.

        The name of the parameter to be displayed in the UI.  # noqa: E501

        :param display_name: The display_name of this ParamsParam.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this ParamsParam.  # noqa: E501

        The description of the parameter.  # noqa: E501

        :return: The description of this ParamsParam.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ParamsParam.

        The description of the parameter.  # noqa: E501

        :param description: The description of this ParamsParam.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def value(self):
        """Gets the value of this ParamsParam.  # noqa: E501

        The current value of the parameter, populated only for product level parameters.  # noqa: E501

        :return: The value of this ParamsParam.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ParamsParam.

        The current value of the parameter, populated only for product level parameters.  # noqa: E501

        :param value: The value of this ParamsParam.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def default_value(self):
        """Gets the default_value of this ParamsParam.  # noqa: E501

        The default value of the parameter.  # noqa: E501

        :return: The default_value of this ParamsParam.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ParamsParam.

        The default value of the parameter.  # noqa: E501

        :param default_value: The default_value of this ParamsParam.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def effective_timestamp(self):
        """Gets the effective_timestamp of this ParamsParam.  # noqa: E501

        The timestamp the parameter is effective from.  # noqa: E501

        :return: The effective_timestamp of this ParamsParam.  # noqa: E501
        :rtype: datetime
        """
        return self._effective_timestamp

    @effective_timestamp.setter
    def effective_timestamp(self, effective_timestamp):
        """Sets the effective_timestamp of this ParamsParam.

        The timestamp the parameter is effective from.  # noqa: E501

        :param effective_timestamp: The effective_timestamp of this ParamsParam.  # noqa: E501
        :type: datetime
        """

        self._effective_timestamp = effective_timestamp

    @property
    def level(self):
        """Gets the level of this ParamsParam.  # noqa: E501


        :return: The level of this ParamsParam.  # noqa: E501
        :rtype: ParamsLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this ParamsParam.


        :param level: The level of this ParamsParam.  # noqa: E501
        :type: ParamsLevel
        """

        self._level = level

    @property
    def update_permission(self):
        """Gets the update_permission of this ParamsParam.  # noqa: E501


        :return: The update_permission of this ParamsParam.  # noqa: E501
        :rtype: ParamsUpdatePermission
        """
        return self._update_permission

    @update_permission.setter
    def update_permission(self, update_permission):
        """Sets the update_permission of this ParamsParam.


        :param update_permission: The update_permission of this ParamsParam.  # noqa: E501
        :type: ParamsUpdatePermission
        """

        self._update_permission = update_permission

    @property
    def derived(self):
        """Gets the derived of this ParamsParam.  # noqa: E501

        Indicates whether this parameter is derived or not. Only applicable to instance-level parameters.  # noqa: E501

        :return: The derived of this ParamsParam.  # noqa: E501
        :rtype: bool
        """
        return self._derived

    @derived.setter
    def derived(self, derived):
        """Sets the derived of this ParamsParam.

        Indicates whether this parameter is derived or not. Only applicable to instance-level parameters.  # noqa: E501

        :param derived: The derived of this ParamsParam.  # noqa: E501
        :type: bool
        """

        self._derived = derived

    @property
    def number(self):
        """Gets the number of this ParamsParam.  # noqa: E501


        :return: The number of this ParamsParam.  # noqa: E501
        :rtype: ParamsNumberField
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ParamsParam.


        :param number: The number of this ParamsParam.  # noqa: E501
        :type: ParamsNumberField
        """

        self._number = number

    @property
    def account(self):
        """Gets the account of this ParamsParam.  # noqa: E501


        :return: The account of this ParamsParam.  # noqa: E501
        :rtype: ParamsAccountField
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ParamsParam.


        :param account: The account of this ParamsParam.  # noqa: E501
        :type: ParamsAccountField
        """

        self._account = account

    @property
    def values(self):
        """Gets the values of this ParamsParam.  # noqa: E501


        :return: The values of this ParamsParam.  # noqa: E501
        :rtype: ParamsValueChoiceField
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ParamsParam.


        :param values: The values of this ParamsParam.  # noqa: E501
        :type: ParamsValueChoiceField
        """

        self._values = values

    @property
    def denomination(self):
        """Gets the denomination of this ParamsParam.  # noqa: E501


        :return: The denomination of this ParamsParam.  # noqa: E501
        :rtype: ParamsDenominationField
        """
        return self._denomination

    @denomination.setter
    def denomination(self, denomination):
        """Sets the denomination of this ParamsParam.


        :param denomination: The denomination of this ParamsParam.  # noqa: E501
        :type: ParamsDenominationField
        """

        self._denomination = denomination

    @property
    def _date(self):
        """Gets the _date of this ParamsParam.  # noqa: E501


        :return: The _date of this ParamsParam.  # noqa: E501
        :rtype: ParamsDateField
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ParamsParam.


        :param _date: The _date of this ParamsParam.  # noqa: E501
        :type: ParamsDateField
        """

        self.__date = _date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParamsParam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParamsParam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
