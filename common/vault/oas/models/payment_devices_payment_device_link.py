# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentDevicesPaymentDeviceLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'token': 'str',
        'payment_device_id': 'str',
        'account_id': 'str',
        'status': 'PaymentDevicesPaymentDeviceLinkStatus',
        'start_timestamp': 'datetime',
        'end_timestamp': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'token': 'token',
        'payment_device_id': 'payment_device_id',
        'account_id': 'account_id',
        'status': 'status',
        'start_timestamp': 'start_timestamp',
        'end_timestamp': 'end_timestamp'
    }

    def __init__(self, id=None, token=None, payment_device_id=None, account_id=None, status=None, start_timestamp=None, end_timestamp=None):  # noqa: E501
        """PaymentDevicesPaymentDeviceLink - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._token = None
        self._payment_device_id = None
        self._account_id = None
        self._status = None
        self._start_timestamp = None
        self._end_timestamp = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if token is not None:
            self.token = token
        if payment_device_id is not None:
            self.payment_device_id = payment_device_id
        if account_id is not None:
            self.account_id = account_id
        if status is not None:
            self.status = status
        if start_timestamp is not None:
            self.start_timestamp = start_timestamp
        if end_timestamp is not None:
            self.end_timestamp = end_timestamp

    @property
    def id(self):
        """Gets the id of this PaymentDevicesPaymentDeviceLink.  # noqa: E501

        A caller-injected or Vault auto-generated unique ID for the payment device link. When auto-generated, this is a UUID in the canonical 8-4-4-4-12 form.  Max length: 36 characters.  # noqa: E501

        :return: The id of this PaymentDevicesPaymentDeviceLink.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentDevicesPaymentDeviceLink.

        A caller-injected or Vault auto-generated unique ID for the payment device link. When auto-generated, this is a UUID in the canonical 8-4-4-4-12 form.  Max length: 36 characters.  # noqa: E501

        :param id: The id of this PaymentDevicesPaymentDeviceLink.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def token(self):
        """Gets the token of this PaymentDevicesPaymentDeviceLink.  # noqa: E501

        Token to identify this link. It has to be unique across active links. Required for create requests.  # noqa: E501

        :return: The token of this PaymentDevicesPaymentDeviceLink.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PaymentDevicesPaymentDeviceLink.

        Token to identify this link. It has to be unique across active links. Required for create requests.  # noqa: E501

        :param token: The token of this PaymentDevicesPaymentDeviceLink.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def payment_device_id(self):
        """Gets the payment_device_id of this PaymentDevicesPaymentDeviceLink.  # noqa: E501

        Payment device id this token connects an account to. Required for create requests.  # noqa: E501

        :return: The payment_device_id of this PaymentDevicesPaymentDeviceLink.  # noqa: E501
        :rtype: str
        """
        return self._payment_device_id

    @payment_device_id.setter
    def payment_device_id(self, payment_device_id):
        """Sets the payment_device_id of this PaymentDevicesPaymentDeviceLink.

        Payment device id this token connects an account to. Required for create requests.  # noqa: E501

        :param payment_device_id: The payment_device_id of this PaymentDevicesPaymentDeviceLink.  # noqa: E501
        :type: str
        """

        self._payment_device_id = payment_device_id

    @property
    def account_id(self):
        """Gets the account_id of this PaymentDevicesPaymentDeviceLink.  # noqa: E501

        Account ID this token connects a payment device to. Required for create requests.  # noqa: E501

        :return: The account_id of this PaymentDevicesPaymentDeviceLink.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this PaymentDevicesPaymentDeviceLink.

        Account ID this token connects a payment device to. Required for create requests.  # noqa: E501

        :param account_id: The account_id of this PaymentDevicesPaymentDeviceLink.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def status(self):
        """Gets the status of this PaymentDevicesPaymentDeviceLink.  # noqa: E501


        :return: The status of this PaymentDevicesPaymentDeviceLink.  # noqa: E501
        :rtype: PaymentDevicesPaymentDeviceLinkStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentDevicesPaymentDeviceLink.


        :param status: The status of this PaymentDevicesPaymentDeviceLink.  # noqa: E501
        :type: PaymentDevicesPaymentDeviceLinkStatus
        """

        self._status = status

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this PaymentDevicesPaymentDeviceLink.  # noqa: E501

        When the link became active. Required for create requests of payment device links with status `PAYMENT_DEVICE_LINK_STATUS_INACTIVE`, output only otherwise.  # noqa: E501

        :return: The start_timestamp of this PaymentDevicesPaymentDeviceLink.  # noqa: E501
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this PaymentDevicesPaymentDeviceLink.

        When the link became active. Required for create requests of payment device links with status `PAYMENT_DEVICE_LINK_STATUS_INACTIVE`, output only otherwise.  # noqa: E501

        :param start_timestamp: The start_timestamp of this PaymentDevicesPaymentDeviceLink.  # noqa: E501
        :type: datetime
        """

        self._start_timestamp = start_timestamp

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this PaymentDevicesPaymentDeviceLink.  # noqa: E501

        When the link became inactive. Required for create requests of payment device links with status `PAYMENT_DEVICE_LINK_STATUS_INACTIVE`, output only otherwise.  # noqa: E501

        :return: The end_timestamp of this PaymentDevicesPaymentDeviceLink.  # noqa: E501
        :rtype: datetime
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this PaymentDevicesPaymentDeviceLink.

        When the link became inactive. Required for create requests of payment device links with status `PAYMENT_DEVICE_LINK_STATUS_INACTIVE`, output only otherwise.  # noqa: E501

        :param end_timestamp: The end_timestamp of this PaymentDevicesPaymentDeviceLink.  # noqa: E501
        :type: datetime
        """

        self._end_timestamp = end_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentDevicesPaymentDeviceLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentDevicesPaymentDeviceLink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
