# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentOrdersFuturePaymentSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_date': 'str',
        'payment_amount': 'str'
    }

    attribute_map = {
        'payment_date': 'payment_date',
        'payment_amount': 'payment_amount'
    }

    def __init__(self, payment_date=None, payment_amount=None):  # noqa: E501
        """PaymentOrdersFuturePaymentSchedule - a model defined in Swagger"""  # noqa: E501
        self._payment_date = None
        self._payment_amount = None
        self.discriminator = None
        if payment_date is not None:
            self.payment_date = payment_date
        if payment_amount is not None:
            self.payment_amount = payment_amount

    @property
    def payment_date(self):
        """Gets the payment_date of this PaymentOrdersFuturePaymentSchedule.  # noqa: E501

        The date of the payment with format YYYY-MM-DDTHH:MM. A PaymentOrderExecution object with `payment_amount` will be streamed out on this date, and the PaymentOrderStatus will be set to COMPLETED. Required on resource creation.  # noqa: E501

        :return: The payment_date of this PaymentOrdersFuturePaymentSchedule.  # noqa: E501
        :rtype: str
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this PaymentOrdersFuturePaymentSchedule.

        The date of the payment with format YYYY-MM-DDTHH:MM. A PaymentOrderExecution object with `payment_amount` will be streamed out on this date, and the PaymentOrderStatus will be set to COMPLETED. Required on resource creation.  # noqa: E501

        :param payment_date: The payment_date of this PaymentOrdersFuturePaymentSchedule.  # noqa: E501
        :type: str
        """

        self._payment_date = payment_date

    @property
    def payment_amount(self):
        """Gets the payment_amount of this PaymentOrdersFuturePaymentSchedule.  # noqa: E501

        The amount of the payment. Required on resource creation.  # noqa: E501

        :return: The payment_amount of this PaymentOrdersFuturePaymentSchedule.  # noqa: E501
        :rtype: str
        """
        return self._payment_amount

    @payment_amount.setter
    def payment_amount(self, payment_amount):
        """Sets the payment_amount of this PaymentOrdersFuturePaymentSchedule.

        The amount of the payment. Required on resource creation.  # noqa: E501

        :param payment_amount: The payment_amount of this PaymentOrdersFuturePaymentSchedule.  # noqa: E501
        :type: str
        """

        self._payment_amount = payment_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentOrdersFuturePaymentSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentOrdersFuturePaymentSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
