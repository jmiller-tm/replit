# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentOrdersPaymentOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'create_request_id': 'str',
        'client_id': 'str',
        'client_order_id': 'str',
        'debtor_account_id': 'str',
        'debtor_party': 'PaymentOrdersParty',
        'creditor_party': 'PaymentOrdersParty',
        'denomination': 'str',
        'reference': 'str',
        'metadata': 'dict(str, str)',
        'type': 'PaymentOrdersPaymentOrderType',
        'current_status': 'PaymentOrdersPaymentOrderStatus',
        'create_timestamp': 'datetime',
        'update_timestamp': 'datetime',
        'calendar_operation': 'CalendarOperationsCalendarOperation',
        'future_schedule': 'PaymentOrdersFuturePaymentSchedule',
        'recurring_schedule': 'PaymentOrdersRecurringPaymentSchedule'
    }

    attribute_map = {
        'id': 'id',
        'create_request_id': 'create_request_id',
        'client_id': 'client_id',
        'client_order_id': 'client_order_id',
        'debtor_account_id': 'debtor_account_id',
        'debtor_party': 'debtor_party',
        'creditor_party': 'creditor_party',
        'denomination': 'denomination',
        'reference': 'reference',
        'metadata': 'metadata',
        'type': 'type',
        'current_status': 'current_status',
        'create_timestamp': 'create_timestamp',
        'update_timestamp': 'update_timestamp',
        'calendar_operation': 'calendar_operation',
        'future_schedule': 'future_schedule',
        'recurring_schedule': 'recurring_schedule'
    }

    def __init__(self, id=None, create_request_id=None, client_id=None, client_order_id=None, debtor_account_id=None, debtor_party=None, creditor_party=None, denomination=None, reference=None, metadata=None, type=None, current_status=None, create_timestamp=None, update_timestamp=None, calendar_operation=None, future_schedule=None, recurring_schedule=None):  # noqa: E501
        """PaymentOrdersPaymentOrder - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._create_request_id = None
        self._client_id = None
        self._client_order_id = None
        self._debtor_account_id = None
        self._debtor_party = None
        self._creditor_party = None
        self._denomination = None
        self._reference = None
        self._metadata = None
        self._type = None
        self._current_status = None
        self._create_timestamp = None
        self._update_timestamp = None
        self._calendar_operation = None
        self._future_schedule = None
        self._recurring_schedule = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if create_request_id is not None:
            self.create_request_id = create_request_id
        if client_id is not None:
            self.client_id = client_id
        if client_order_id is not None:
            self.client_order_id = client_order_id
        if debtor_account_id is not None:
            self.debtor_account_id = debtor_account_id
        if debtor_party is not None:
            self.debtor_party = debtor_party
        if creditor_party is not None:
            self.creditor_party = creditor_party
        if denomination is not None:
            self.denomination = denomination
        if reference is not None:
            self.reference = reference
        if metadata is not None:
            self.metadata = metadata
        if type is not None:
            self.type = type
        if current_status is not None:
            self.current_status = current_status
        if create_timestamp is not None:
            self.create_timestamp = create_timestamp
        if update_timestamp is not None:
            self.update_timestamp = update_timestamp
        if calendar_operation is not None:
            self.calendar_operation = calendar_operation
        if future_schedule is not None:
            self.future_schedule = future_schedule
        if recurring_schedule is not None:
            self.recurring_schedule = recurring_schedule

    @property
    def id(self):
        """Gets the id of this PaymentOrdersPaymentOrder.  # noqa: E501

        The UUID of the PaymentOrder inside Vault. Optional on resource creation; if it is not set, a UUID will be generated. Required for update calls. This field must contain a valid UUID in the canonical 8-4-4-4-12 form. Max length: 36 characters.  # noqa: E501

        :return: The id of this PaymentOrdersPaymentOrder.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentOrdersPaymentOrder.

        The UUID of the PaymentOrder inside Vault. Optional on resource creation; if it is not set, a UUID will be generated. Required for update calls. This field must contain a valid UUID in the canonical 8-4-4-4-12 form. Max length: 36 characters.  # noqa: E501

        :param id: The id of this PaymentOrdersPaymentOrder.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def create_request_id(self):
        """Gets the create_request_id of this PaymentOrdersPaymentOrder.  # noqa: E501

        The ID of the request that originally generated the payment. Used as idempotency key.  # noqa: E501

        :return: The create_request_id of this PaymentOrdersPaymentOrder.  # noqa: E501
        :rtype: str
        """
        return self._create_request_id

    @create_request_id.setter
    def create_request_id(self, create_request_id):
        """Sets the create_request_id of this PaymentOrdersPaymentOrder.

        The ID of the request that originally generated the payment. Used as idempotency key.  # noqa: E501

        :param create_request_id: The create_request_id of this PaymentOrdersPaymentOrder.  # noqa: E501
        :type: str
        """

        self._create_request_id = create_request_id

    @property
    def client_id(self):
        """Gets the client_id of this PaymentOrdersPaymentOrder.  # noqa: E501

        Uniquely identifies a client of the PaymentOrder endpoints. Required on resource creation.  # noqa: E501

        :return: The client_id of this PaymentOrdersPaymentOrder.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this PaymentOrdersPaymentOrder.

        Uniquely identifies a client of the PaymentOrder endpoints. Required on resource creation.  # noqa: E501

        :param client_id: The client_id of this PaymentOrdersPaymentOrder.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_order_id(self):
        """Gets the client_order_id of this PaymentOrdersPaymentOrder.  # noqa: E501

        An order ID set by the client. Optional on resource creation.  # noqa: E501

        :return: The client_order_id of this PaymentOrdersPaymentOrder.  # noqa: E501
        :rtype: str
        """
        return self._client_order_id

    @client_order_id.setter
    def client_order_id(self, client_order_id):
        """Sets the client_order_id of this PaymentOrdersPaymentOrder.

        An order ID set by the client. Optional on resource creation.  # noqa: E501

        :param client_order_id: The client_order_id of this PaymentOrdersPaymentOrder.  # noqa: E501
        :type: str
        """

        self._client_order_id = client_order_id

    @property
    def debtor_account_id(self):
        """Gets the debtor_account_id of this PaymentOrdersPaymentOrder.  # noqa: E501

        The debtor's Vault account ID. If the account does not exist or is not in a state which allows payment creation, an error is returned and no PaymentOrder will be created. Allowed account status is OPEN only. Required on resource creation.  # noqa: E501

        :return: The debtor_account_id of this PaymentOrdersPaymentOrder.  # noqa: E501
        :rtype: str
        """
        return self._debtor_account_id

    @debtor_account_id.setter
    def debtor_account_id(self, debtor_account_id):
        """Sets the debtor_account_id of this PaymentOrdersPaymentOrder.

        The debtor's Vault account ID. If the account does not exist or is not in a state which allows payment creation, an error is returned and no PaymentOrder will be created. Allowed account status is OPEN only. Required on resource creation.  # noqa: E501

        :param debtor_account_id: The debtor_account_id of this PaymentOrdersPaymentOrder.  # noqa: E501
        :type: str
        """

        self._debtor_account_id = debtor_account_id

    @property
    def debtor_party(self):
        """Gets the debtor_party of this PaymentOrdersPaymentOrder.  # noqa: E501


        :return: The debtor_party of this PaymentOrdersPaymentOrder.  # noqa: E501
        :rtype: PaymentOrdersParty
        """
        return self._debtor_party

    @debtor_party.setter
    def debtor_party(self, debtor_party):
        """Sets the debtor_party of this PaymentOrdersPaymentOrder.


        :param debtor_party: The debtor_party of this PaymentOrdersPaymentOrder.  # noqa: E501
        :type: PaymentOrdersParty
        """

        self._debtor_party = debtor_party

    @property
    def creditor_party(self):
        """Gets the creditor_party of this PaymentOrdersPaymentOrder.  # noqa: E501


        :return: The creditor_party of this PaymentOrdersPaymentOrder.  # noqa: E501
        :rtype: PaymentOrdersParty
        """
        return self._creditor_party

    @creditor_party.setter
    def creditor_party(self, creditor_party):
        """Sets the creditor_party of this PaymentOrdersPaymentOrder.


        :param creditor_party: The creditor_party of this PaymentOrdersPaymentOrder.  # noqa: E501
        :type: PaymentOrdersParty
        """

        self._creditor_party = creditor_party

    @property
    def denomination(self):
        """Gets the denomination of this PaymentOrdersPaymentOrder.  # noqa: E501

        The three-letter alphabetic currency code based on ISO 4217, for example GBP and USD. Required on resource creation.  # noqa: E501

        :return: The denomination of this PaymentOrdersPaymentOrder.  # noqa: E501
        :rtype: str
        """
        return self._denomination

    @denomination.setter
    def denomination(self, denomination):
        """Sets the denomination of this PaymentOrdersPaymentOrder.

        The three-letter alphabetic currency code based on ISO 4217, for example GBP and USD. Required on resource creation.  # noqa: E501

        :param denomination: The denomination of this PaymentOrdersPaymentOrder.  # noqa: E501
        :type: str
        """

        self._denomination = denomination

    @property
    def reference(self):
        """Gets the reference of this PaymentOrdersPaymentOrder.  # noqa: E501

        Reference information associated with the payment that will be passed to the beneficiary. Optional on resource creation.  Max length: 512 characters.  # noqa: E501

        :return: The reference of this PaymentOrdersPaymentOrder.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PaymentOrdersPaymentOrder.

        Reference information associated with the payment that will be passed to the beneficiary. Optional on resource creation.  Max length: 512 characters.  # noqa: E501

        :param reference: The reference of this PaymentOrdersPaymentOrder.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def metadata(self):
        """Gets the metadata of this PaymentOrdersPaymentOrder.  # noqa: E501

        Metadata related to the payment. Optional on resource creation.  # noqa: E501

        :return: The metadata of this PaymentOrdersPaymentOrder.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PaymentOrdersPaymentOrder.

        Metadata related to the payment. Optional on resource creation.  # noqa: E501

        :param metadata: The metadata of this PaymentOrdersPaymentOrder.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def type(self):
        """Gets the type of this PaymentOrdersPaymentOrder.  # noqa: E501


        :return: The type of this PaymentOrdersPaymentOrder.  # noqa: E501
        :rtype: PaymentOrdersPaymentOrderType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentOrdersPaymentOrder.


        :param type: The type of this PaymentOrdersPaymentOrder.  # noqa: E501
        :type: PaymentOrdersPaymentOrderType
        """

        self._type = type

    @property
    def current_status(self):
        """Gets the current_status of this PaymentOrdersPaymentOrder.  # noqa: E501


        :return: The current_status of this PaymentOrdersPaymentOrder.  # noqa: E501
        :rtype: PaymentOrdersPaymentOrderStatus
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this PaymentOrdersPaymentOrder.


        :param current_status: The current_status of this PaymentOrdersPaymentOrder.  # noqa: E501
        :type: PaymentOrdersPaymentOrderStatus
        """

        self._current_status = current_status

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this PaymentOrdersPaymentOrder.  # noqa: E501

        The timestamp indicating when the PaymentOrder was created.  # noqa: E501

        :return: The create_timestamp of this PaymentOrdersPaymentOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this PaymentOrdersPaymentOrder.

        The timestamp indicating when the PaymentOrder was created.  # noqa: E501

        :param create_timestamp: The create_timestamp of this PaymentOrdersPaymentOrder.  # noqa: E501
        :type: datetime
        """

        self._create_timestamp = create_timestamp

    @property
    def update_timestamp(self):
        """Gets the update_timestamp of this PaymentOrdersPaymentOrder.  # noqa: E501

        The timestamp indicating when the last change to the PaymentOrder occurred.  # noqa: E501

        :return: The update_timestamp of this PaymentOrdersPaymentOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._update_timestamp

    @update_timestamp.setter
    def update_timestamp(self, update_timestamp):
        """Sets the update_timestamp of this PaymentOrdersPaymentOrder.

        The timestamp indicating when the last change to the PaymentOrder occurred.  # noqa: E501

        :param update_timestamp: The update_timestamp of this PaymentOrdersPaymentOrder.  # noqa: E501
        :type: datetime
        """

        self._update_timestamp = update_timestamp

    @property
    def calendar_operation(self):
        """Gets the calendar_operation of this PaymentOrdersPaymentOrder.  # noqa: E501


        :return: The calendar_operation of this PaymentOrdersPaymentOrder.  # noqa: E501
        :rtype: CalendarOperationsCalendarOperation
        """
        return self._calendar_operation

    @calendar_operation.setter
    def calendar_operation(self, calendar_operation):
        """Sets the calendar_operation of this PaymentOrdersPaymentOrder.


        :param calendar_operation: The calendar_operation of this PaymentOrdersPaymentOrder.  # noqa: E501
        :type: CalendarOperationsCalendarOperation
        """

        self._calendar_operation = calendar_operation

    @property
    def future_schedule(self):
        """Gets the future_schedule of this PaymentOrdersPaymentOrder.  # noqa: E501


        :return: The future_schedule of this PaymentOrdersPaymentOrder.  # noqa: E501
        :rtype: PaymentOrdersFuturePaymentSchedule
        """
        return self._future_schedule

    @future_schedule.setter
    def future_schedule(self, future_schedule):
        """Sets the future_schedule of this PaymentOrdersPaymentOrder.


        :param future_schedule: The future_schedule of this PaymentOrdersPaymentOrder.  # noqa: E501
        :type: PaymentOrdersFuturePaymentSchedule
        """

        self._future_schedule = future_schedule

    @property
    def recurring_schedule(self):
        """Gets the recurring_schedule of this PaymentOrdersPaymentOrder.  # noqa: E501


        :return: The recurring_schedule of this PaymentOrdersPaymentOrder.  # noqa: E501
        :rtype: PaymentOrdersRecurringPaymentSchedule
        """
        return self._recurring_schedule

    @recurring_schedule.setter
    def recurring_schedule(self, recurring_schedule):
        """Sets the recurring_schedule of this PaymentOrdersPaymentOrder.


        :param recurring_schedule: The recurring_schedule of this PaymentOrdersPaymentOrder.  # noqa: E501
        :type: PaymentOrdersRecurringPaymentSchedule
        """

        self._recurring_schedule = recurring_schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentOrdersPaymentOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentOrdersPaymentOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
