# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentOrdersRecurringPaymentSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_payment_date': 'str',
        'first_payment_amount': 'str',
        'last_payment_amount': 'str',
        'recurring_schedule_start_date': 'str',
        'recurring_schedule_expression': 'str',
        'recurring_amount': 'str',
        'last_payment_date': 'LastPaymentDate',
        'number_of_payments': 'NumberOfPayments'
    }

    attribute_map = {
        'first_payment_date': 'first_payment_date',
        'first_payment_amount': 'first_payment_amount',
        'last_payment_amount': 'last_payment_amount',
        'recurring_schedule_start_date': 'recurring_schedule_start_date',
        'recurring_schedule_expression': 'recurring_schedule_expression',
        'recurring_amount': 'recurring_amount',
        'last_payment_date': 'last_payment_date',
        'number_of_payments': 'number_of_payments'
    }

    def __init__(self, first_payment_date=None, first_payment_amount=None, last_payment_amount=None, recurring_schedule_start_date=None, recurring_schedule_expression=None, recurring_amount=None, last_payment_date=None, number_of_payments=None):  # noqa: E501
        """PaymentOrdersRecurringPaymentSchedule - a model defined in Swagger"""  # noqa: E501
        self._first_payment_date = None
        self._first_payment_amount = None
        self._last_payment_amount = None
        self._recurring_schedule_start_date = None
        self._recurring_schedule_expression = None
        self._recurring_amount = None
        self._last_payment_date = None
        self._number_of_payments = None
        self.discriminator = None
        if first_payment_date is not None:
            self.first_payment_date = first_payment_date
        if first_payment_amount is not None:
            self.first_payment_amount = first_payment_amount
        if last_payment_amount is not None:
            self.last_payment_amount = last_payment_amount
        if recurring_schedule_start_date is not None:
            self.recurring_schedule_start_date = recurring_schedule_start_date
        if recurring_schedule_expression is not None:
            self.recurring_schedule_expression = recurring_schedule_expression
        if recurring_amount is not None:
            self.recurring_amount = recurring_amount
        if last_payment_date is not None:
            self.last_payment_date = last_payment_date
        if number_of_payments is not None:
            self.number_of_payments = number_of_payments

    @property
    def first_payment_date(self):
        """Gets the first_payment_date of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501

        The date of the first payment with format YYYY-MM-DDTHH:MM. A PaymentOrderExecution object with `first_payment_amount` (or `recurring_amount` if it is not set) will be streamed on this date. Required on resource creation.  # noqa: E501

        :return: The first_payment_date of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501
        :rtype: str
        """
        return self._first_payment_date

    @first_payment_date.setter
    def first_payment_date(self, first_payment_date):
        """Sets the first_payment_date of this PaymentOrdersRecurringPaymentSchedule.

        The date of the first payment with format YYYY-MM-DDTHH:MM. A PaymentOrderExecution object with `first_payment_amount` (or `recurring_amount` if it is not set) will be streamed on this date. Required on resource creation.  # noqa: E501

        :param first_payment_date: The first_payment_date of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501
        :type: str
        """

        self._first_payment_date = first_payment_date

    @property
    def first_payment_amount(self):
        """Gets the first_payment_amount of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501

        The amount of the first payment. Optional on resource creation.  # noqa: E501

        :return: The first_payment_amount of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501
        :rtype: str
        """
        return self._first_payment_amount

    @first_payment_amount.setter
    def first_payment_amount(self, first_payment_amount):
        """Sets the first_payment_amount of this PaymentOrdersRecurringPaymentSchedule.

        The amount of the first payment. Optional on resource creation.  # noqa: E501

        :param first_payment_amount: The first_payment_amount of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501
        :type: str
        """

        self._first_payment_amount = first_payment_amount

    @property
    def last_payment_amount(self):
        """Gets the last_payment_amount of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501

        The amount of the last payment. Optional on resource creation.  # noqa: E501

        :return: The last_payment_amount of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501
        :rtype: str
        """
        return self._last_payment_amount

    @last_payment_amount.setter
    def last_payment_amount(self, last_payment_amount):
        """Sets the last_payment_amount of this PaymentOrdersRecurringPaymentSchedule.

        The amount of the last payment. Optional on resource creation.  # noqa: E501

        :param last_payment_amount: The last_payment_amount of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501
        :type: str
        """

        self._last_payment_amount = last_payment_amount

    @property
    def recurring_schedule_start_date(self):
        """Gets the recurring_schedule_start_date of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501

        The recurring schedule start date with format YYYY-MM-DDTHH:MM. This field should be set as part of a `recurring_schedule_expression` update to specify when the new expression should be applied from. A PaymentOrderExecution object with `recurring_amount` will be streamed on this date and then at regular intervals according to the new `recurring_schedule_expression`. This field cannot be set if the `first_payment_date` has not yet been reached. The date must be in the future.  # noqa: E501

        :return: The recurring_schedule_start_date of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501
        :rtype: str
        """
        return self._recurring_schedule_start_date

    @recurring_schedule_start_date.setter
    def recurring_schedule_start_date(self, recurring_schedule_start_date):
        """Sets the recurring_schedule_start_date of this PaymentOrdersRecurringPaymentSchedule.

        The recurring schedule start date with format YYYY-MM-DDTHH:MM. This field should be set as part of a `recurring_schedule_expression` update to specify when the new expression should be applied from. A PaymentOrderExecution object with `recurring_amount` will be streamed on this date and then at regular intervals according to the new `recurring_schedule_expression`. This field cannot be set if the `first_payment_date` has not yet been reached. The date must be in the future.  # noqa: E501

        :param recurring_schedule_start_date: The recurring_schedule_start_date of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501
        :type: str
        """

        self._recurring_schedule_start_date = recurring_schedule_start_date

    @property
    def recurring_schedule_expression(self):
        """Gets the recurring_schedule_expression of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501

        The cron expression for the recurring payment. The recurring schedule will generate PaymentOrderExecution events with `recurring_amount` after `first_payment_date` (or `recurring_schedule_expression` on updates). Required on resource creation.  # noqa: E501

        :return: The recurring_schedule_expression of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501
        :rtype: str
        """
        return self._recurring_schedule_expression

    @recurring_schedule_expression.setter
    def recurring_schedule_expression(self, recurring_schedule_expression):
        """Sets the recurring_schedule_expression of this PaymentOrdersRecurringPaymentSchedule.

        The cron expression for the recurring payment. The recurring schedule will generate PaymentOrderExecution events with `recurring_amount` after `first_payment_date` (or `recurring_schedule_expression` on updates). Required on resource creation.  # noqa: E501

        :param recurring_schedule_expression: The recurring_schedule_expression of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501
        :type: str
        """

        self._recurring_schedule_expression = recurring_schedule_expression

    @property
    def recurring_amount(self):
        """Gets the recurring_amount of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501

        The amount of the recurring payment. Required on resource creation.  # noqa: E501

        :return: The recurring_amount of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501
        :rtype: str
        """
        return self._recurring_amount

    @recurring_amount.setter
    def recurring_amount(self, recurring_amount):
        """Sets the recurring_amount of this PaymentOrdersRecurringPaymentSchedule.

        The amount of the recurring payment. Required on resource creation.  # noqa: E501

        :param recurring_amount: The recurring_amount of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501
        :type: str
        """

        self._recurring_amount = recurring_amount

    @property
    def last_payment_date(self):
        """Gets the last_payment_date of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501


        :return: The last_payment_date of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501
        :rtype: LastPaymentDate
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """Sets the last_payment_date of this PaymentOrdersRecurringPaymentSchedule.


        :param last_payment_date: The last_payment_date of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501
        :type: LastPaymentDate
        """

        self._last_payment_date = last_payment_date

    @property
    def number_of_payments(self):
        """Gets the number_of_payments of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501


        :return: The number_of_payments of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501
        :rtype: NumberOfPayments
        """
        return self._number_of_payments

    @number_of_payments.setter
    def number_of_payments(self, number_of_payments):
        """Sets the number_of_payments of this PaymentOrdersRecurringPaymentSchedule.


        :param number_of_payments: The number_of_payments of this PaymentOrdersRecurringPaymentSchedule.  # noqa: E501
        :type: NumberOfPayments
        """

        self._number_of_payments = number_of_payments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentOrdersRecurringPaymentSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentOrdersRecurringPaymentSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
