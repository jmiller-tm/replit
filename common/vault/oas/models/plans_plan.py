# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlansPlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'supervisor_contract_version_id': 'str',
        'create_timestamp': 'datetime',
        'status': 'PlansPlanStatus',
        'opening_timestamp': 'datetime',
        'activation_completed_timestamp': 'datetime',
        'closing_timestamp': 'datetime',
        'closure_completed_timestamp': 'datetime',
        'details': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'supervisor_contract_version_id': 'supervisor_contract_version_id',
        'create_timestamp': 'create_timestamp',
        'status': 'status',
        'opening_timestamp': 'opening_timestamp',
        'activation_completed_timestamp': 'activation_completed_timestamp',
        'closing_timestamp': 'closing_timestamp',
        'closure_completed_timestamp': 'closure_completed_timestamp',
        'details': 'details'
    }

    def __init__(self, id=None, supervisor_contract_version_id=None, create_timestamp=None, status=None, opening_timestamp=None, activation_completed_timestamp=None, closing_timestamp=None, closure_completed_timestamp=None, details=None):  # noqa: E501
        """PlansPlan - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._supervisor_contract_version_id = None
        self._create_timestamp = None
        self._status = None
        self._opening_timestamp = None
        self._activation_completed_timestamp = None
        self._closing_timestamp = None
        self._closure_completed_timestamp = None
        self._details = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if supervisor_contract_version_id is not None:
            self.supervisor_contract_version_id = supervisor_contract_version_id
        if create_timestamp is not None:
            self.create_timestamp = create_timestamp
        if status is not None:
            self.status = status
        if opening_timestamp is not None:
            self.opening_timestamp = opening_timestamp
        if activation_completed_timestamp is not None:
            self.activation_completed_timestamp = activation_completed_timestamp
        if closing_timestamp is not None:
            self.closing_timestamp = closing_timestamp
        if closure_completed_timestamp is not None:
            self.closure_completed_timestamp = closure_completed_timestamp
        if details is not None:
            self.details = details

    @property
    def id(self):
        """Gets the id of this PlansPlan.  # noqa: E501

        A unique ID for a plan. Optional for create requests.  Max length: 36 characters.  # noqa: E501

        :return: The id of this PlansPlan.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlansPlan.

        A unique ID for a plan. Optional for create requests.  Max length: 36 characters.  # noqa: E501

        :param id: The id of this PlansPlan.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def supervisor_contract_version_id(self):
        """Gets the supervisor_contract_version_id of this PlansPlan.  # noqa: E501

        The ID of the Supervisor Contract version. Required for create requests.  # noqa: E501

        :return: The supervisor_contract_version_id of this PlansPlan.  # noqa: E501
        :rtype: str
        """
        return self._supervisor_contract_version_id

    @supervisor_contract_version_id.setter
    def supervisor_contract_version_id(self, supervisor_contract_version_id):
        """Sets the supervisor_contract_version_id of this PlansPlan.

        The ID of the Supervisor Contract version. Required for create requests.  # noqa: E501

        :param supervisor_contract_version_id: The supervisor_contract_version_id of this PlansPlan.  # noqa: E501
        :type: str
        """

        self._supervisor_contract_version_id = supervisor_contract_version_id

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this PlansPlan.  # noqa: E501

        A timestamp indicating when the plan was created.  # noqa: E501

        :return: The create_timestamp of this PlansPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this PlansPlan.

        A timestamp indicating when the plan was created.  # noqa: E501

        :param create_timestamp: The create_timestamp of this PlansPlan.  # noqa: E501
        :type: datetime
        """

        self._create_timestamp = create_timestamp

    @property
    def status(self):
        """Gets the status of this PlansPlan.  # noqa: E501


        :return: The status of this PlansPlan.  # noqa: E501
        :rtype: PlansPlanStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PlansPlan.


        :param status: The status of this PlansPlan.  # noqa: E501
        :type: PlansPlanStatus
        """

        self._status = status

    @property
    def opening_timestamp(self):
        """Gets the opening_timestamp of this PlansPlan.  # noqa: E501

        A timestamp indicating when the plan status was updated to `PLAN_STATUS_OPEN`.  # noqa: E501

        :return: The opening_timestamp of this PlansPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._opening_timestamp

    @opening_timestamp.setter
    def opening_timestamp(self, opening_timestamp):
        """Sets the opening_timestamp of this PlansPlan.

        A timestamp indicating when the plan status was updated to `PLAN_STATUS_OPEN`.  # noqa: E501

        :param opening_timestamp: The opening_timestamp of this PlansPlan.  # noqa: E501
        :type: datetime
        """

        self._opening_timestamp = opening_timestamp

    @property
    def activation_completed_timestamp(self):
        """Gets the activation_completed_timestamp of this PlansPlan.  # noqa: E501

        A timestamp indicating when the activation PlanUpdate for the Plan succeeded and its status was updated to `PLAN_UPDATE_STATUS_COMPLETED`.  # noqa: E501

        :return: The activation_completed_timestamp of this PlansPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._activation_completed_timestamp

    @activation_completed_timestamp.setter
    def activation_completed_timestamp(self, activation_completed_timestamp):
        """Sets the activation_completed_timestamp of this PlansPlan.

        A timestamp indicating when the activation PlanUpdate for the Plan succeeded and its status was updated to `PLAN_UPDATE_STATUS_COMPLETED`.  # noqa: E501

        :param activation_completed_timestamp: The activation_completed_timestamp of this PlansPlan.  # noqa: E501
        :type: datetime
        """

        self._activation_completed_timestamp = activation_completed_timestamp

    @property
    def closing_timestamp(self):
        """Gets the closing_timestamp of this PlansPlan.  # noqa: E501

        A timestamp indicating when the plan status was updated to `PLAN_STATUS_CLOSED`.  # noqa: E501

        :return: The closing_timestamp of this PlansPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._closing_timestamp

    @closing_timestamp.setter
    def closing_timestamp(self, closing_timestamp):
        """Sets the closing_timestamp of this PlansPlan.

        A timestamp indicating when the plan status was updated to `PLAN_STATUS_CLOSED`.  # noqa: E501

        :param closing_timestamp: The closing_timestamp of this PlansPlan.  # noqa: E501
        :type: datetime
        """

        self._closing_timestamp = closing_timestamp

    @property
    def closure_completed_timestamp(self):
        """Gets the closure_completed_timestamp of this PlansPlan.  # noqa: E501

        A timestamp indicating when the closure PlanUpdate for the Plan succeeded and its status was updated to `PLAN_UPDATE_STATUS_COMPLETED`.  # noqa: E501

        :return: The closure_completed_timestamp of this PlansPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._closure_completed_timestamp

    @closure_completed_timestamp.setter
    def closure_completed_timestamp(self, closure_completed_timestamp):
        """Sets the closure_completed_timestamp of this PlansPlan.

        A timestamp indicating when the closure PlanUpdate for the Plan succeeded and its status was updated to `PLAN_UPDATE_STATUS_COMPLETED`.  # noqa: E501

        :param closure_completed_timestamp: The closure_completed_timestamp of this PlansPlan.  # noqa: E501
        :type: datetime
        """

        self._closure_completed_timestamp = closure_completed_timestamp

    @property
    def details(self):
        """Gets the details of this PlansPlan.  # noqa: E501

        Map of unstructured fields that hold instance-specific plan metadata.  # noqa: E501

        :return: The details of this PlansPlan.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PlansPlan.

        Map of unstructured fields that hold instance-specific plan metadata.  # noqa: E501

        :param details: The details of this PlansPlan.  # noqa: E501
        :type: dict(str, str)
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlansPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlansPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
