# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlansPlanSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'plan_id': 'str',
        'name': 'str',
        'group_name': 'str',
        'time_expression': 'str',
        'schedule_tag_ids': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'plan_id': 'plan_id',
        'name': 'name',
        'group_name': 'group_name',
        'time_expression': 'time_expression',
        'schedule_tag_ids': 'schedule_tag_ids'
    }

    def __init__(self, id=None, plan_id=None, name=None, group_name=None, time_expression=None, schedule_tag_ids=None):  # noqa: E501
        """PlansPlanSchedule - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._plan_id = None
        self._name = None
        self._group_name = None
        self._time_expression = None
        self._schedule_tag_ids = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if plan_id is not None:
            self.plan_id = plan_id
        if name is not None:
            self.name = name
        if group_name is not None:
            self.group_name = group_name
        if time_expression is not None:
            self.time_expression = time_expression
        if schedule_tag_ids is not None:
            self.schedule_tag_ids = schedule_tag_ids

    @property
    def id(self):
        """Gets the id of this PlansPlanSchedule.  # noqa: E501

        The ID of the plan schedule.  # noqa: E501

        :return: The id of this PlansPlanSchedule.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlansPlanSchedule.

        The ID of the plan schedule.  # noqa: E501

        :param id: The id of this PlansPlanSchedule.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def plan_id(self):
        """Gets the plan_id of this PlansPlanSchedule.  # noqa: E501

        The plan ID associated with the plan schedule.  # noqa: E501

        :return: The plan_id of this PlansPlanSchedule.  # noqa: E501
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this PlansPlanSchedule.

        The plan ID associated with the plan schedule.  # noqa: E501

        :param plan_id: The plan_id of this PlansPlanSchedule.  # noqa: E501
        :type: str
        """

        self._plan_id = plan_id

    @property
    def name(self):
        """Gets the name of this PlansPlanSchedule.  # noqa: E501

        The name of the plan schedule.  # noqa: E501

        :return: The name of this PlansPlanSchedule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlansPlanSchedule.

        The name of the plan schedule.  # noqa: E501

        :param name: The name of this PlansPlanSchedule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def group_name(self):
        """Gets the group_name of this PlansPlanSchedule.  # noqa: E501

        The name of the group associated with the plan schedule.  # noqa: E501

        :return: The group_name of this PlansPlanSchedule.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this PlansPlanSchedule.

        The name of the group associated with the plan schedule.  # noqa: E501

        :param group_name: The group_name of this PlansPlanSchedule.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def time_expression(self):
        """Gets the time_expression of this PlansPlanSchedule.  # noqa: E501

        The time expression that defines when Jobs will be run. This could be a CRON expression or a single timestamp.  # noqa: E501

        :return: The time_expression of this PlansPlanSchedule.  # noqa: E501
        :rtype: str
        """
        return self._time_expression

    @time_expression.setter
    def time_expression(self, time_expression):
        """Sets the time_expression of this PlansPlanSchedule.

        The time expression that defines when Jobs will be run. This could be a CRON expression or a single timestamp.  # noqa: E501

        :param time_expression: The time_expression of this PlansPlanSchedule.  # noqa: E501
        :type: str
        """

        self._time_expression = time_expression

    @property
    def schedule_tag_ids(self):
        """Gets the schedule_tag_ids of this PlansPlanSchedule.  # noqa: E501

        The schedule tag IDs for a given plan schedule.  # noqa: E501

        :return: The schedule_tag_ids of this PlansPlanSchedule.  # noqa: E501
        :rtype: list[str]
        """
        return self._schedule_tag_ids

    @schedule_tag_ids.setter
    def schedule_tag_ids(self, schedule_tag_ids):
        """Sets the schedule_tag_ids of this PlansPlanSchedule.

        The schedule tag IDs for a given plan schedule.  # noqa: E501

        :param schedule_tag_ids: The schedule_tag_ids of this PlansPlanSchedule.  # noqa: E501
        :type: list[str]
        """

        self._schedule_tag_ids = schedule_tag_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlansPlanSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlansPlanSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
