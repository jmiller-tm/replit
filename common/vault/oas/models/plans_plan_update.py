# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlansPlanUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'plan_id': 'str',
        'job_id': 'str',
        'status': 'PlansPlanUpdateStatus',
        'create_timestamp': 'datetime',
        'last_status_update_timestamp': 'datetime',
        'failure_reason': 'str',
        'associate_account_update': 'PlansAssociateAccountUpdate',
        'disassociate_account_update': 'PlansDisassociateAccountUpdate',
        'activation_update': 'PlansActivationUpdate',
        'supervisor_contract_version_update': 'PlansSupervisorContractVersionUpdate',
        'closure_update': 'PlansClosureUpdate'
    }

    attribute_map = {
        'id': 'id',
        'plan_id': 'plan_id',
        'job_id': 'job_id',
        'status': 'status',
        'create_timestamp': 'create_timestamp',
        'last_status_update_timestamp': 'last_status_update_timestamp',
        'failure_reason': 'failure_reason',
        'associate_account_update': 'associate_account_update',
        'disassociate_account_update': 'disassociate_account_update',
        'activation_update': 'activation_update',
        'supervisor_contract_version_update': 'supervisor_contract_version_update',
        'closure_update': 'closure_update'
    }

    def __init__(self, id=None, plan_id=None, job_id=None, status=None, create_timestamp=None, last_status_update_timestamp=None, failure_reason=None, associate_account_update=None, disassociate_account_update=None, activation_update=None, supervisor_contract_version_update=None, closure_update=None):  # noqa: E501
        """PlansPlanUpdate - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._plan_id = None
        self._job_id = None
        self._status = None
        self._create_timestamp = None
        self._last_status_update_timestamp = None
        self._failure_reason = None
        self._associate_account_update = None
        self._disassociate_account_update = None
        self._activation_update = None
        self._supervisor_contract_version_update = None
        self._closure_update = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if plan_id is not None:
            self.plan_id = plan_id
        if job_id is not None:
            self.job_id = job_id
        if status is not None:
            self.status = status
        if create_timestamp is not None:
            self.create_timestamp = create_timestamp
        if last_status_update_timestamp is not None:
            self.last_status_update_timestamp = last_status_update_timestamp
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if associate_account_update is not None:
            self.associate_account_update = associate_account_update
        if disassociate_account_update is not None:
            self.disassociate_account_update = disassociate_account_update
        if activation_update is not None:
            self.activation_update = activation_update
        if supervisor_contract_version_update is not None:
            self.supervisor_contract_version_update = supervisor_contract_version_update
        if closure_update is not None:
            self.closure_update = closure_update

    @property
    def id(self):
        """Gets the id of this PlansPlanUpdate.  # noqa: E501

        A unique ID for a plan. Optional for create requests.  Max length: 36 characters.  # noqa: E501

        :return: The id of this PlansPlanUpdate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlansPlanUpdate.

        A unique ID for a plan. Optional for create requests.  Max length: 36 characters.  # noqa: E501

        :param id: The id of this PlansPlanUpdate.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def plan_id(self):
        """Gets the plan_id of this PlansPlanUpdate.  # noqa: E501

        The ID of the plan. Required for create requests.  # noqa: E501

        :return: The plan_id of this PlansPlanUpdate.  # noqa: E501
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this PlansPlanUpdate.

        The ID of the plan. Required for create requests.  # noqa: E501

        :param plan_id: The plan_id of this PlansPlanUpdate.  # noqa: E501
        :type: str
        """

        self._plan_id = plan_id

    @property
    def job_id(self):
        """Gets the job_id of this PlansPlanUpdate.  # noqa: E501

        The job ID the plan update belongs to.  # noqa: E501

        :return: The job_id of this PlansPlanUpdate.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this PlansPlanUpdate.

        The job ID the plan update belongs to.  # noqa: E501

        :param job_id: The job_id of this PlansPlanUpdate.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def status(self):
        """Gets the status of this PlansPlanUpdate.  # noqa: E501


        :return: The status of this PlansPlanUpdate.  # noqa: E501
        :rtype: PlansPlanUpdateStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PlansPlanUpdate.


        :param status: The status of this PlansPlanUpdate.  # noqa: E501
        :type: PlansPlanUpdateStatus
        """

        self._status = status

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this PlansPlanUpdate.  # noqa: E501

        The timestamp indicating when this plan update was created.  # noqa: E501

        :return: The create_timestamp of this PlansPlanUpdate.  # noqa: E501
        :rtype: datetime
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this PlansPlanUpdate.

        The timestamp indicating when this plan update was created.  # noqa: E501

        :param create_timestamp: The create_timestamp of this PlansPlanUpdate.  # noqa: E501
        :type: datetime
        """

        self._create_timestamp = create_timestamp

    @property
    def last_status_update_timestamp(self):
        """Gets the last_status_update_timestamp of this PlansPlanUpdate.  # noqa: E501

        The timestamp indicating when the status was last updated.  # noqa: E501

        :return: The last_status_update_timestamp of this PlansPlanUpdate.  # noqa: E501
        :rtype: datetime
        """
        return self._last_status_update_timestamp

    @last_status_update_timestamp.setter
    def last_status_update_timestamp(self, last_status_update_timestamp):
        """Sets the last_status_update_timestamp of this PlansPlanUpdate.

        The timestamp indicating when the status was last updated.  # noqa: E501

        :param last_status_update_timestamp: The last_status_update_timestamp of this PlansPlanUpdate.  # noqa: E501
        :type: datetime
        """

        self._last_status_update_timestamp = last_status_update_timestamp

    @property
    def failure_reason(self):
        """Gets the failure_reason of this PlansPlanUpdate.  # noqa: E501

        The reason a plan update was not completed successfully. This will only be populated if the plan update status is either `PLAN_UPDATE_STATUS_REJECTED` or `PLAN_UPDATE_STATUS_ERRORED`.  # noqa: E501

        :return: The failure_reason of this PlansPlanUpdate.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this PlansPlanUpdate.

        The reason a plan update was not completed successfully. This will only be populated if the plan update status is either `PLAN_UPDATE_STATUS_REJECTED` or `PLAN_UPDATE_STATUS_ERRORED`.  # noqa: E501

        :param failure_reason: The failure_reason of this PlansPlanUpdate.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def associate_account_update(self):
        """Gets the associate_account_update of this PlansPlanUpdate.  # noqa: E501


        :return: The associate_account_update of this PlansPlanUpdate.  # noqa: E501
        :rtype: PlansAssociateAccountUpdate
        """
        return self._associate_account_update

    @associate_account_update.setter
    def associate_account_update(self, associate_account_update):
        """Sets the associate_account_update of this PlansPlanUpdate.


        :param associate_account_update: The associate_account_update of this PlansPlanUpdate.  # noqa: E501
        :type: PlansAssociateAccountUpdate
        """

        self._associate_account_update = associate_account_update

    @property
    def disassociate_account_update(self):
        """Gets the disassociate_account_update of this PlansPlanUpdate.  # noqa: E501


        :return: The disassociate_account_update of this PlansPlanUpdate.  # noqa: E501
        :rtype: PlansDisassociateAccountUpdate
        """
        return self._disassociate_account_update

    @disassociate_account_update.setter
    def disassociate_account_update(self, disassociate_account_update):
        """Sets the disassociate_account_update of this PlansPlanUpdate.


        :param disassociate_account_update: The disassociate_account_update of this PlansPlanUpdate.  # noqa: E501
        :type: PlansDisassociateAccountUpdate
        """

        self._disassociate_account_update = disassociate_account_update

    @property
    def activation_update(self):
        """Gets the activation_update of this PlansPlanUpdate.  # noqa: E501


        :return: The activation_update of this PlansPlanUpdate.  # noqa: E501
        :rtype: PlansActivationUpdate
        """
        return self._activation_update

    @activation_update.setter
    def activation_update(self, activation_update):
        """Sets the activation_update of this PlansPlanUpdate.


        :param activation_update: The activation_update of this PlansPlanUpdate.  # noqa: E501
        :type: PlansActivationUpdate
        """

        self._activation_update = activation_update

    @property
    def supervisor_contract_version_update(self):
        """Gets the supervisor_contract_version_update of this PlansPlanUpdate.  # noqa: E501


        :return: The supervisor_contract_version_update of this PlansPlanUpdate.  # noqa: E501
        :rtype: PlansSupervisorContractVersionUpdate
        """
        return self._supervisor_contract_version_update

    @supervisor_contract_version_update.setter
    def supervisor_contract_version_update(self, supervisor_contract_version_update):
        """Sets the supervisor_contract_version_update of this PlansPlanUpdate.


        :param supervisor_contract_version_update: The supervisor_contract_version_update of this PlansPlanUpdate.  # noqa: E501
        :type: PlansSupervisorContractVersionUpdate
        """

        self._supervisor_contract_version_update = supervisor_contract_version_update

    @property
    def closure_update(self):
        """Gets the closure_update of this PlansPlanUpdate.  # noqa: E501


        :return: The closure_update of this PlansPlanUpdate.  # noqa: E501
        :rtype: PlansClosureUpdate
        """
        return self._closure_update

    @closure_update.setter
    def closure_update(self, closure_update):
        """Sets the closure_update of this PlansPlanUpdate.


        :param closure_update: The closure_update of this PlansPlanUpdate.  # noqa: E501
        :type: PlansClosureUpdate
        """

        self._closure_update = closure_update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlansPlanUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlansPlanUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
