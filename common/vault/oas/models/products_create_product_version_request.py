# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductsCreateProductVersionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'product_version': 'ProductsProductVersion',
        'migration_strategy': 'ProductsProductVersionMigrationStrategy',
        'is_internal': 'bool'
    }

    attribute_map = {
        'request_id': 'request_id',
        'product_version': 'product_version',
        'migration_strategy': 'migration_strategy',
        'is_internal': 'is_internal'
    }

    def __init__(self, request_id=None, product_version=None, migration_strategy=None, is_internal=None):  # noqa: E501
        """ProductsCreateProductVersionRequest - a model defined in Swagger"""  # noqa: E501
        self._request_id = None
        self._product_version = None
        self._migration_strategy = None
        self._is_internal = None
        self.discriminator = None
        self.request_id = request_id
        if product_version is not None:
            self.product_version = product_version
        if migration_strategy is not None:
            self.migration_strategy = migration_strategy
        if is_internal is not None:
            self.is_internal = is_internal

    @property
    def request_id(self):
        """Gets the request_id of this ProductsCreateProductVersionRequest.  # noqa: E501

        A unique string ID that is used to ensure the request is idempotent.  Required. Max length: 256 characters.  # noqa: E501

        :return: The request_id of this ProductsCreateProductVersionRequest.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ProductsCreateProductVersionRequest.

        A unique string ID that is used to ensure the request is idempotent.  Required. Max length: 256 characters.  # noqa: E501

        :param request_id: The request_id of this ProductsCreateProductVersionRequest.  # noqa: E501
        :type: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def product_version(self):
        """Gets the product_version of this ProductsCreateProductVersionRequest.  # noqa: E501


        :return: The product_version of this ProductsCreateProductVersionRequest.  # noqa: E501
        :rtype: ProductsProductVersion
        """
        return self._product_version

    @product_version.setter
    def product_version(self, product_version):
        """Sets the product_version of this ProductsCreateProductVersionRequest.


        :param product_version: The product_version of this ProductsCreateProductVersionRequest.  # noqa: E501
        :type: ProductsProductVersion
        """

        self._product_version = product_version

    @property
    def migration_strategy(self):
        """Gets the migration_strategy of this ProductsCreateProductVersionRequest.  # noqa: E501


        :return: The migration_strategy of this ProductsCreateProductVersionRequest.  # noqa: E501
        :rtype: ProductsProductVersionMigrationStrategy
        """
        return self._migration_strategy

    @migration_strategy.setter
    def migration_strategy(self, migration_strategy):
        """Sets the migration_strategy of this ProductsCreateProductVersionRequest.


        :param migration_strategy: The migration_strategy of this ProductsCreateProductVersionRequest.  # noqa: E501
        :type: ProductsProductVersionMigrationStrategy
        """

        self._migration_strategy = migration_strategy

    @property
    def is_internal(self):
        """Gets the is_internal of this ProductsCreateProductVersionRequest.  # noqa: E501

        When creating a new product, used to indicate if the new product is for internal accounts only and not available to customers.  # noqa: E501

        :return: The is_internal of this ProductsCreateProductVersionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this ProductsCreateProductVersionRequest.

        When creating a new product, used to indicate if the new product is for internal accounts only and not available to customers.  # noqa: E501

        :param is_internal: The is_internal of this ProductsCreateProductVersionRequest.  # noqa: E501
        :type: bool
        """

        self._is_internal = is_internal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductsCreateProductVersionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductsCreateProductVersionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
