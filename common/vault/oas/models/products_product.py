# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductsProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'display_name': 'str',
        'is_active': 'bool',
        'is_internal': 'bool',
        'current_version_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'display_name': 'display_name',
        'is_active': 'is_active',
        'is_internal': 'is_internal',
        'current_version_id': 'current_version_id'
    }

    def __init__(self, id=None, display_name=None, is_active=None, is_internal=None, current_version_id=None):  # noqa: E501
        """ProductsProduct - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._display_name = None
        self._is_active = None
        self._is_internal = None
        self._current_version_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if display_name is not None:
            self.display_name = display_name
        if is_active is not None:
            self.is_active = is_active
        if is_internal is not None:
            self.is_internal = is_internal
        if current_version_id is not None:
            self.current_version_id = current_version_id

    @property
    def id(self):
        """Gets the id of this ProductsProduct.  # noqa: E501

        A globally-unique ID for the product.  # noqa: E501

        :return: The id of this ProductsProduct.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductsProduct.

        A globally-unique ID for the product.  # noqa: E501

        :param id: The id of this ProductsProduct.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this ProductsProduct.  # noqa: E501

        The name of the product displayed to the customer.  # noqa: E501

        :return: The display_name of this ProductsProduct.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ProductsProduct.

        The name of the product displayed to the customer.  # noqa: E501

        :param display_name: The display_name of this ProductsProduct.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def is_active(self):
        """Gets the is_active of this ProductsProduct.  # noqa: E501

        Indicates whether the product is available for customers to sign up to.  # noqa: E501

        :return: The is_active of this ProductsProduct.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ProductsProduct.

        Indicates whether the product is available for customers to sign up to.  # noqa: E501

        :param is_active: The is_active of this ProductsProduct.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_internal(self):
        """Gets the is_internal of this ProductsProduct.  # noqa: E501

        Indicates if the product is meant for customers to sign up to (external) or if it used to model internal bank accounts (internal).  # noqa: E501

        :return: The is_internal of this ProductsProduct.  # noqa: E501
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this ProductsProduct.

        Indicates if the product is meant for customers to sign up to (external) or if it used to model internal bank accounts (internal).  # noqa: E501

        :param is_internal: The is_internal of this ProductsProduct.  # noqa: E501
        :type: bool
        """

        self._is_internal = is_internal

    @property
    def current_version_id(self):
        """Gets the current_version_id of this ProductsProduct.  # noqa: E501

        The ID of the current version of the product.  # noqa: E501

        :return: The current_version_id of this ProductsProduct.  # noqa: E501
        :rtype: str
        """
        return self._current_version_id

    @current_version_id.setter
    def current_version_id(self, current_version_id):
        """Sets the current_version_id of this ProductsProduct.

        The ID of the current version of the product.  # noqa: E501

        :param current_version_id: The current_version_id of this ProductsProduct.  # noqa: E501
        :type: str
        """

        self._current_version_id = current_version_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductsProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductsProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
