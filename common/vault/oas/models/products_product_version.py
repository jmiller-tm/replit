# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductsProductVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'display_name': 'str',
        'display_version_number': 'VersionSemVer',
        'create_timestamp': 'datetime',
        'is_current': 'bool',
        'description': 'str',
        'summary': 'str',
        'features': 'list[ProductsProductVersionFeature]',
        'wallet_provider': 'str',
        'tags': 'list[str]',
        'core_tags': 'list[ProductsProductVersionCoreTag]',
        'params': 'list[ParamsParam]',
        'code': 'str',
        'product_id': 'str',
        'tside': 'AccountingTside',
        'supported_denominations': 'list[str]',
        'address_details': 'list[ProductsAddressDetails]',
        'contract_module_details': 'ProductsContractModuleDetails',
        'entity_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'display_name': 'display_name',
        'display_version_number': 'display_version_number',
        'create_timestamp': 'create_timestamp',
        'is_current': 'is_current',
        'description': 'description',
        'summary': 'summary',
        'features': 'features',
        'wallet_provider': 'wallet_provider',
        'tags': 'tags',
        'core_tags': 'core_tags',
        'params': 'params',
        'code': 'code',
        'product_id': 'product_id',
        'tside': 'tside',
        'supported_denominations': 'supported_denominations',
        'address_details': 'address_details',
        'contract_module_details': 'contract_module_details',
        'entity_id': 'entity_id'
    }

    def __init__(self, id=None, display_name=None, display_version_number=None, create_timestamp=None, is_current=None, description=None, summary=None, features=None, wallet_provider=None, tags=None, core_tags=None, params=None, code=None, product_id=None, tside=None, supported_denominations=None, address_details=None, contract_module_details=None, entity_id=None):  # noqa: E501
        """ProductsProductVersion - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._display_name = None
        self._display_version_number = None
        self._create_timestamp = None
        self._is_current = None
        self._description = None
        self._summary = None
        self._features = None
        self._wallet_provider = None
        self._tags = None
        self._core_tags = None
        self._params = None
        self._code = None
        self._product_id = None
        self._tside = None
        self._supported_denominations = None
        self._address_details = None
        self._contract_module_details = None
        self._entity_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if display_name is not None:
            self.display_name = display_name
        if display_version_number is not None:
            self.display_version_number = display_version_number
        if create_timestamp is not None:
            self.create_timestamp = create_timestamp
        if is_current is not None:
            self.is_current = is_current
        if description is not None:
            self.description = description
        if summary is not None:
            self.summary = summary
        if features is not None:
            self.features = features
        if wallet_provider is not None:
            self.wallet_provider = wallet_provider
        if tags is not None:
            self.tags = tags
        if core_tags is not None:
            self.core_tags = core_tags
        if params is not None:
            self.params = params
        if code is not None:
            self.code = code
        if product_id is not None:
            self.product_id = product_id
        if tside is not None:
            self.tside = tside
        if supported_denominations is not None:
            self.supported_denominations = supported_denominations
        if address_details is not None:
            self.address_details = address_details
        if contract_module_details is not None:
            self.contract_module_details = contract_module_details
        if entity_id is not None:
            self.entity_id = entity_id

    @property
    def id(self):
        """Gets the id of this ProductsProductVersion.  # noqa: E501

        A globally-unique ID for the product version.  # noqa: E501

        :return: The id of this ProductsProductVersion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductsProductVersion.

        A globally-unique ID for the product version.  # noqa: E501

        :param id: The id of this ProductsProductVersion.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this ProductsProductVersion.  # noqa: E501

        The name of the product displayed to the customer. This can be set in the contract code. Optional.  # noqa: E501

        :return: The display_name of this ProductsProductVersion.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ProductsProductVersion.

        The name of the product displayed to the customer. This can be set in the contract code. Optional.  # noqa: E501

        :param display_name: The display_name of this ProductsProductVersion.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def display_version_number(self):
        """Gets the display_version_number of this ProductsProductVersion.  # noqa: E501


        :return: The display_version_number of this ProductsProductVersion.  # noqa: E501
        :rtype: VersionSemVer
        """
        return self._display_version_number

    @display_version_number.setter
    def display_version_number(self, display_version_number):
        """Sets the display_version_number of this ProductsProductVersion.


        :param display_version_number: The display_version_number of this ProductsProductVersion.  # noqa: E501
        :type: VersionSemVer
        """

        self._display_version_number = display_version_number

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this ProductsProductVersion.  # noqa: E501

        Timestamp indicating when the product version was created.  # noqa: E501

        :return: The create_timestamp of this ProductsProductVersion.  # noqa: E501
        :rtype: datetime
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this ProductsProductVersion.

        Timestamp indicating when the product version was created.  # noqa: E501

        :param create_timestamp: The create_timestamp of this ProductsProductVersion.  # noqa: E501
        :type: datetime
        """

        self._create_timestamp = create_timestamp

    @property
    def is_current(self):
        """Gets the is_current of this ProductsProductVersion.  # noqa: E501

        Indicates whether this is the current version of the product.  # noqa: E501

        :return: The is_current of this ProductsProductVersion.  # noqa: E501
        :rtype: bool
        """
        return self._is_current

    @is_current.setter
    def is_current(self, is_current):
        """Sets the is_current of this ProductsProductVersion.

        Indicates whether this is the current version of the product.  # noqa: E501

        :param is_current: The is_current of this ProductsProductVersion.  # noqa: E501
        :type: bool
        """

        self._is_current = is_current

    @property
    def description(self):
        """Gets the description of this ProductsProductVersion.  # noqa: E501

        A description of the product version. If set on creation, this will override any description set in the Smart Contract code. Optional.  # noqa: E501

        :return: The description of this ProductsProductVersion.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductsProductVersion.

        A description of the product version. If set on creation, this will override any description set in the Smart Contract code. Optional.  # noqa: E501

        :param description: The description of this ProductsProductVersion.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def summary(self):
        """Gets the summary of this ProductsProductVersion.  # noqa: E501

        A summary of the product version. If set on creation, this will override the summary set in the Smart Contract code. Optional.  # noqa: E501

        :return: The summary of this ProductsProductVersion.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this ProductsProductVersion.

        A summary of the product version. If set on creation, this will override the summary set in the Smart Contract code. Optional.  # noqa: E501

        :param summary: The summary of this ProductsProductVersion.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def features(self):
        """Gets the features of this ProductsProductVersion.  # noqa: E501


        :return: The features of this ProductsProductVersion.  # noqa: E501
        :rtype: list[ProductsProductVersionFeature]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this ProductsProductVersion.


        :param features: The features of this ProductsProductVersion.  # noqa: E501
        :type: list[ProductsProductVersionFeature]
        """

        self._features = features

    @property
    def wallet_provider(self):
        """Gets the wallet_provider of this ProductsProductVersion.  # noqa: E501

        Deprecated. Wallets are no longer supported.  # noqa: E501

        :return: The wallet_provider of this ProductsProductVersion.  # noqa: E501
        :rtype: str
        """
        return self._wallet_provider

    @wallet_provider.setter
    def wallet_provider(self, wallet_provider):
        """Sets the wallet_provider of this ProductsProductVersion.

        Deprecated. Wallets are no longer supported.  # noqa: E501

        :param wallet_provider: The wallet_provider of this ProductsProductVersion.  # noqa: E501
        :type: str
        """

        self._wallet_provider = wallet_provider

    @property
    def tags(self):
        """Gets the tags of this ProductsProductVersion.  # noqa: E501

        Tags for the product version; these are created by users of Vault and simplify searching. Optional.  # noqa: E501

        :return: The tags of this ProductsProductVersion.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ProductsProductVersion.

        Tags for the product version; these are created by users of Vault and simplify searching. Optional.  # noqa: E501

        :param tags: The tags of this ProductsProductVersion.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def core_tags(self):
        """Gets the core_tags of this ProductsProductVersion.  # noqa: E501

        Core tags for the product version; these are created by Vault and could be, for example, savings or loan. Optional.  # noqa: E501

        :return: The core_tags of this ProductsProductVersion.  # noqa: E501
        :rtype: list[ProductsProductVersionCoreTag]
        """
        return self._core_tags

    @core_tags.setter
    def core_tags(self, core_tags):
        """Sets the core_tags of this ProductsProductVersion.

        Core tags for the product version; these are created by Vault and could be, for example, savings or loan. Optional.  # noqa: E501

        :param core_tags: The core_tags of this ProductsProductVersion.  # noqa: E501
        :type: list[ProductsProductVersionCoreTag]
        """

        self._core_tags = core_tags

    @property
    def params(self):
        """Gets the params of this ProductsProductVersion.  # noqa: E501

        The parameter values for the product version. Required in a POST product-versions request when the contract has product level parameters (only name and value attributes of parameters need to be provided).  # noqa: E501

        :return: The params of this ProductsProductVersion.  # noqa: E501
        :rtype: list[ParamsParam]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ProductsProductVersion.

        The parameter values for the product version. Required in a POST product-versions request when the contract has product level parameters (only name and value attributes of parameters need to be provided).  # noqa: E501

        :param params: The params of this ProductsProductVersion.  # noqa: E501
        :type: list[ParamsParam]
        """

        self._params = params

    @property
    def code(self):
        """Gets the code of this ProductsProductVersion.  # noqa: E501

        The Smart Contract code for the product version. Required.  # noqa: E501

        :return: The code of this ProductsProductVersion.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ProductsProductVersion.

        The Smart Contract code for the product version. Required.  # noqa: E501

        :param code: The code of this ProductsProductVersion.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def product_id(self):
        """Gets the product_id of this ProductsProductVersion.  # noqa: E501

        Used as the product_id when the migration strategy is set to NEW_PRODUCT; otherwise this will add product_version to a specified product. Required.  # noqa: E501

        :return: The product_id of this ProductsProductVersion.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductsProductVersion.

        Used as the product_id when the migration strategy is set to NEW_PRODUCT; otherwise this will add product_version to a specified product. Required.  # noqa: E501

        :param product_id: The product_id of this ProductsProductVersion.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def tside(self):
        """Gets the tside of this ProductsProductVersion.  # noqa: E501


        :return: The tside of this ProductsProductVersion.  # noqa: E501
        :rtype: AccountingTside
        """
        return self._tside

    @tside.setter
    def tside(self, tside):
        """Sets the tside of this ProductsProductVersion.


        :param tside: The tside of this ProductsProductVersion.  # noqa: E501
        :type: AccountingTside
        """

        self._tside = tside

    @property
    def supported_denominations(self):
        """Gets the supported_denominations of this ProductsProductVersion.  # noqa: E501

        The denominations supported by this product version. Required for non-internal products.  # noqa: E501

        :return: The supported_denominations of this ProductsProductVersion.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_denominations

    @supported_denominations.setter
    def supported_denominations(self, supported_denominations):
        """Sets the supported_denominations of this ProductsProductVersion.

        The denominations supported by this product version. Required for non-internal products.  # noqa: E501

        :param supported_denominations: The supported_denominations of this ProductsProductVersion.  # noqa: E501
        :type: list[str]
        """

        self._supported_denominations = supported_denominations

    @property
    def address_details(self):
        """Gets the address_details of this ProductsProductVersion.  # noqa: E501

        The address details described in this product version.  # noqa: E501

        :return: The address_details of this ProductsProductVersion.  # noqa: E501
        :rtype: list[ProductsAddressDetails]
        """
        return self._address_details

    @address_details.setter
    def address_details(self, address_details):
        """Sets the address_details of this ProductsProductVersion.

        The address details described in this product version.  # noqa: E501

        :param address_details: The address_details of this ProductsProductVersion.  # noqa: E501
        :type: list[ProductsAddressDetails]
        """

        self._address_details = address_details

    @property
    def contract_module_details(self):
        """Gets the contract_module_details of this ProductsProductVersion.  # noqa: E501


        :return: The contract_module_details of this ProductsProductVersion.  # noqa: E501
        :rtype: ProductsContractModuleDetails
        """
        return self._contract_module_details

    @contract_module_details.setter
    def contract_module_details(self, contract_module_details):
        """Sets the contract_module_details of this ProductsProductVersion.


        :param contract_module_details: The contract_module_details of this ProductsProductVersion.  # noqa: E501
        :type: ProductsContractModuleDetails
        """

        self._contract_module_details = contract_module_details

    @property
    def entity_id(self):
        """Gets the entity_id of this ProductsProductVersion.  # noqa: E501

        The entity ID for the product version.  # noqa: E501

        :return: The entity_id of this ProductsProductVersion.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this ProductsProductVersion.

        The entity ID for the product version.  # noqa: E501

        :param entity_id: The entity_id of this ProductsProductVersion.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductsProductVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductsProductVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
