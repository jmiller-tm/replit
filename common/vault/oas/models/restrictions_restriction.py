# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RestrictionsRestriction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'restriction_type': 'RestrictionsRestrictionType',
        'parameters': 'dict(str, str)',
        'customer_id': 'str',
        'account_id': 'str',
        'payment_device_id': 'str',
        'effective_timestamp': 'datetime',
        'expiry_timestamp': 'datetime',
        'id': 'str'
    }

    attribute_map = {
        'restriction_type': 'restriction_type',
        'parameters': 'parameters',
        'customer_id': 'customer_id',
        'account_id': 'account_id',
        'payment_device_id': 'payment_device_id',
        'effective_timestamp': 'effective_timestamp',
        'expiry_timestamp': 'expiry_timestamp',
        'id': 'id'
    }

    def __init__(self, restriction_type=None, parameters=None, customer_id=None, account_id=None, payment_device_id=None, effective_timestamp=None, expiry_timestamp=None, id=None):  # noqa: E501
        """RestrictionsRestriction - a model defined in Swagger"""  # noqa: E501
        self._restriction_type = None
        self._parameters = None
        self._customer_id = None
        self._account_id = None
        self._payment_device_id = None
        self._effective_timestamp = None
        self._expiry_timestamp = None
        self._id = None
        self.discriminator = None
        if restriction_type is not None:
            self.restriction_type = restriction_type
        if parameters is not None:
            self.parameters = parameters
        if customer_id is not None:
            self.customer_id = customer_id
        if account_id is not None:
            self.account_id = account_id
        if payment_device_id is not None:
            self.payment_device_id = payment_device_id
        if effective_timestamp is not None:
            self.effective_timestamp = effective_timestamp
        if expiry_timestamp is not None:
            self.expiry_timestamp = expiry_timestamp
        if id is not None:
            self.id = id

    @property
    def restriction_type(self):
        """Gets the restriction_type of this RestrictionsRestriction.  # noqa: E501


        :return: The restriction_type of this RestrictionsRestriction.  # noqa: E501
        :rtype: RestrictionsRestrictionType
        """
        return self._restriction_type

    @restriction_type.setter
    def restriction_type(self, restriction_type):
        """Sets the restriction_type of this RestrictionsRestriction.


        :param restriction_type: The restriction_type of this RestrictionsRestriction.  # noqa: E501
        :type: RestrictionsRestrictionType
        """

        self._restriction_type = restriction_type

    @property
    def parameters(self):
        """Gets the parameters of this RestrictionsRestriction.  # noqa: E501


        :return: The parameters of this RestrictionsRestriction.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this RestrictionsRestriction.


        :param parameters: The parameters of this RestrictionsRestriction.  # noqa: E501
        :type: dict(str, str)
        """

        self._parameters = parameters

    @property
    def customer_id(self):
        """Gets the customer_id of this RestrictionsRestriction.  # noqa: E501

        The customer ID this restriction applies to.  # noqa: E501

        :return: The customer_id of this RestrictionsRestriction.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this RestrictionsRestriction.

        The customer ID this restriction applies to.  # noqa: E501

        :param customer_id: The customer_id of this RestrictionsRestriction.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def account_id(self):
        """Gets the account_id of this RestrictionsRestriction.  # noqa: E501

        The account ID this restriction applies to.  # noqa: E501

        :return: The account_id of this RestrictionsRestriction.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this RestrictionsRestriction.

        The account ID this restriction applies to.  # noqa: E501

        :param account_id: The account_id of this RestrictionsRestriction.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def payment_device_id(self):
        """Gets the payment_device_id of this RestrictionsRestriction.  # noqa: E501

        The payment device ID this restriction applies to.  # noqa: E501

        :return: The payment_device_id of this RestrictionsRestriction.  # noqa: E501
        :rtype: str
        """
        return self._payment_device_id

    @payment_device_id.setter
    def payment_device_id(self, payment_device_id):
        """Sets the payment_device_id of this RestrictionsRestriction.

        The payment device ID this restriction applies to.  # noqa: E501

        :param payment_device_id: The payment_device_id of this RestrictionsRestriction.  # noqa: E501
        :type: str
        """

        self._payment_device_id = payment_device_id

    @property
    def effective_timestamp(self):
        """Gets the effective_timestamp of this RestrictionsRestriction.  # noqa: E501

        The time the restriction applies from.  # noqa: E501

        :return: The effective_timestamp of this RestrictionsRestriction.  # noqa: E501
        :rtype: datetime
        """
        return self._effective_timestamp

    @effective_timestamp.setter
    def effective_timestamp(self, effective_timestamp):
        """Sets the effective_timestamp of this RestrictionsRestriction.

        The time the restriction applies from.  # noqa: E501

        :param effective_timestamp: The effective_timestamp of this RestrictionsRestriction.  # noqa: E501
        :type: datetime
        """

        self._effective_timestamp = effective_timestamp

    @property
    def expiry_timestamp(self):
        """Gets the expiry_timestamp of this RestrictionsRestriction.  # noqa: E501

        The time the restriction will expire. If empty, the restriction will not expire automatically.  # noqa: E501

        :return: The expiry_timestamp of this RestrictionsRestriction.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry_timestamp

    @expiry_timestamp.setter
    def expiry_timestamp(self, expiry_timestamp):
        """Sets the expiry_timestamp of this RestrictionsRestriction.

        The time the restriction will expire. If empty, the restriction will not expire automatically.  # noqa: E501

        :param expiry_timestamp: The expiry_timestamp of this RestrictionsRestriction.  # noqa: E501
        :type: datetime
        """

        self._expiry_timestamp = expiry_timestamp

    @property
    def id(self):
        """Gets the id of this RestrictionsRestriction.  # noqa: E501

        The unique identifier for this restriction.  # noqa: E501

        :return: The id of this RestrictionsRestriction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RestrictionsRestriction.

        The unique identifier for this restriction.  # noqa: E501

        :param id: The id of this RestrictionsRestriction.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestrictionsRestriction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestrictionsRestriction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
