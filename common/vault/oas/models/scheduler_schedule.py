# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SchedulerSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'display_name': 'str',
        'status': 'SchedulerScheduleStatus',
        'create_timestamp': 'datetime',
        'start_timestamp': 'datetime',
        'end_timestamp': 'datetime',
        'next_run_timestamp': 'datetime',
        'disabled_timestamp': 'datetime',
        'time_expression': 'str',
        'timezone': 'str',
        'tags': 'list[str]',
        'group': 'SchedulerScheduleGroupMembership'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'display_name': 'display_name',
        'status': 'status',
        'create_timestamp': 'create_timestamp',
        'start_timestamp': 'start_timestamp',
        'end_timestamp': 'end_timestamp',
        'next_run_timestamp': 'next_run_timestamp',
        'disabled_timestamp': 'disabled_timestamp',
        'time_expression': 'time_expression',
        'timezone': 'timezone',
        'tags': 'tags',
        'group': 'group'
    }

    def __init__(self, id=None, name=None, display_name=None, status=None, create_timestamp=None, start_timestamp=None, end_timestamp=None, next_run_timestamp=None, disabled_timestamp=None, time_expression=None, timezone=None, tags=None, group=None):  # noqa: E501
        """SchedulerSchedule - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._display_name = None
        self._status = None
        self._create_timestamp = None
        self._start_timestamp = None
        self._end_timestamp = None
        self._next_run_timestamp = None
        self._disabled_timestamp = None
        self._time_expression = None
        self._timezone = None
        self._tags = None
        self._group = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if status is not None:
            self.status = status
        if create_timestamp is not None:
            self.create_timestamp = create_timestamp
        if start_timestamp is not None:
            self.start_timestamp = start_timestamp
        if end_timestamp is not None:
            self.end_timestamp = end_timestamp
        if next_run_timestamp is not None:
            self.next_run_timestamp = next_run_timestamp
        if disabled_timestamp is not None:
            self.disabled_timestamp = disabled_timestamp
        if time_expression is not None:
            self.time_expression = time_expression
        if timezone is not None:
            self.timezone = timezone
        if tags is not None:
            self.tags = tags
        if group is not None:
            self.group = group

    @property
    def id(self):
        """Gets the id of this SchedulerSchedule.  # noqa: E501

        The UUID of the Schedule.  # noqa: E501

        :return: The id of this SchedulerSchedule.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SchedulerSchedule.

        The UUID of the Schedule.  # noqa: E501

        :param id: The id of this SchedulerSchedule.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SchedulerSchedule.  # noqa: E501

        The name of the Schedule.  # noqa: E501

        :return: The name of this SchedulerSchedule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SchedulerSchedule.

        The name of the Schedule.  # noqa: E501

        :param name: The name of this SchedulerSchedule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this SchedulerSchedule.  # noqa: E501

        The user-friendly display name for the Schedule.  # noqa: E501

        :return: The display_name of this SchedulerSchedule.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SchedulerSchedule.

        The user-friendly display name for the Schedule.  # noqa: E501

        :param display_name: The display_name of this SchedulerSchedule.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def status(self):
        """Gets the status of this SchedulerSchedule.  # noqa: E501


        :return: The status of this SchedulerSchedule.  # noqa: E501
        :rtype: SchedulerScheduleStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SchedulerSchedule.


        :param status: The status of this SchedulerSchedule.  # noqa: E501
        :type: SchedulerScheduleStatus
        """

        self._status = status

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this SchedulerSchedule.  # noqa: E501

        The time the Schedule was created.  # noqa: E501

        :return: The create_timestamp of this SchedulerSchedule.  # noqa: E501
        :rtype: datetime
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this SchedulerSchedule.

        The time the Schedule was created.  # noqa: E501

        :param create_timestamp: The create_timestamp of this SchedulerSchedule.  # noqa: E501
        :type: datetime
        """

        self._create_timestamp = create_timestamp

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this SchedulerSchedule.  # noqa: E501

        The time that the Schedule will first run.  # noqa: E501

        :return: The start_timestamp of this SchedulerSchedule.  # noqa: E501
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this SchedulerSchedule.

        The time that the Schedule will first run.  # noqa: E501

        :param start_timestamp: The start_timestamp of this SchedulerSchedule.  # noqa: E501
        :type: datetime
        """

        self._start_timestamp = start_timestamp

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this SchedulerSchedule.  # noqa: E501


        :return: The end_timestamp of this SchedulerSchedule.  # noqa: E501
        :rtype: datetime
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this SchedulerSchedule.


        :param end_timestamp: The end_timestamp of this SchedulerSchedule.  # noqa: E501
        :type: datetime
        """

        self._end_timestamp = end_timestamp

    @property
    def next_run_timestamp(self):
        """Gets the next_run_timestamp of this SchedulerSchedule.  # noqa: E501

        The next time the Schedule will run, calculated from the Time Expression.  # noqa: E501

        :return: The next_run_timestamp of this SchedulerSchedule.  # noqa: E501
        :rtype: datetime
        """
        return self._next_run_timestamp

    @next_run_timestamp.setter
    def next_run_timestamp(self, next_run_timestamp):
        """Sets the next_run_timestamp of this SchedulerSchedule.

        The next time the Schedule will run, calculated from the Time Expression.  # noqa: E501

        :param next_run_timestamp: The next_run_timestamp of this SchedulerSchedule.  # noqa: E501
        :type: datetime
        """

        self._next_run_timestamp = next_run_timestamp

    @property
    def disabled_timestamp(self):
        """Gets the disabled_timestamp of this SchedulerSchedule.  # noqa: E501

        The time the Schedule became disabled.  # noqa: E501

        :return: The disabled_timestamp of this SchedulerSchedule.  # noqa: E501
        :rtype: datetime
        """
        return self._disabled_timestamp

    @disabled_timestamp.setter
    def disabled_timestamp(self, disabled_timestamp):
        """Sets the disabled_timestamp of this SchedulerSchedule.

        The time the Schedule became disabled.  # noqa: E501

        :param disabled_timestamp: The disabled_timestamp of this SchedulerSchedule.  # noqa: E501
        :type: datetime
        """

        self._disabled_timestamp = disabled_timestamp

    @property
    def time_expression(self):
        """Gets the time_expression of this SchedulerSchedule.  # noqa: E501

        The time expression that defines when Jobs will be run. This could be a CRON expression or a single timestamp.  # noqa: E501

        :return: The time_expression of this SchedulerSchedule.  # noqa: E501
        :rtype: str
        """
        return self._time_expression

    @time_expression.setter
    def time_expression(self, time_expression):
        """Sets the time_expression of this SchedulerSchedule.

        The time expression that defines when Jobs will be run. This could be a CRON expression or a single timestamp.  # noqa: E501

        :param time_expression: The time_expression of this SchedulerSchedule.  # noqa: E501
        :type: str
        """

        self._time_expression = time_expression

    @property
    def timezone(self):
        """Gets the timezone of this SchedulerSchedule.  # noqa: E501

        The timezone the Schedule is in. All timestamps attached to a Schedule are in UTC. The timezone reflects when the `next_run_timestamp` is calculated according to the time expression.  # noqa: E501

        :return: The timezone of this SchedulerSchedule.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this SchedulerSchedule.

        The timezone the Schedule is in. All timestamps attached to a Schedule are in UTC. The timezone reflects when the `next_run_timestamp` is calculated according to the time expression.  # noqa: E501

        :param timezone: The timezone of this SchedulerSchedule.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def tags(self):
        """Gets the tags of this SchedulerSchedule.  # noqa: E501

        The tags for a given Schedule.  # noqa: E501

        :return: The tags of this SchedulerSchedule.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SchedulerSchedule.

        The tags for a given Schedule.  # noqa: E501

        :param tags: The tags of this SchedulerSchedule.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def group(self):
        """Gets the group of this SchedulerSchedule.  # noqa: E501


        :return: The group of this SchedulerSchedule.  # noqa: E501
        :rtype: SchedulerScheduleGroupMembership
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this SchedulerSchedule.


        :param group: The group of this SchedulerSchedule.  # noqa: E501
        :type: SchedulerScheduleGroupMembership
        """

        self._group = group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchedulerSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchedulerSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
