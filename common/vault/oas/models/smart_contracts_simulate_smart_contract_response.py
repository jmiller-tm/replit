# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SmartContractsSimulateSmartContractResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_notes': 'list[AccountsCommonAccountNote]',
        'scheduled_events': 'list[SmartContractsScheduledEvent]',
        'workflows': 'list[SmartContractsStartedWorkflow]',
        'postings_batches': 'list[V1PostingInstructionBatch]',
        'v3_balance_timeseries': 'list[BalancesPostingBalance]',
        'derived_parameters_values': 'list[SmartContractsDerivedParametersValues]',
        'event_log_json': 'str'
    }

    attribute_map = {
        'account_notes': 'account_notes',
        'scheduled_events': 'scheduled_events',
        'workflows': 'workflows',
        'postings_batches': 'postings_batches',
        'v3_balance_timeseries': 'v3_balance_timeseries',
        'derived_parameters_values': 'derived_parameters_values',
        'event_log_json': 'event_log_json'
    }

    def __init__(self, account_notes=None, scheduled_events=None, workflows=None, postings_batches=None, v3_balance_timeseries=None, derived_parameters_values=None, event_log_json=None):  # noqa: E501
        """SmartContractsSimulateSmartContractResponse - a model defined in Swagger"""  # noqa: E501
        self._account_notes = None
        self._scheduled_events = None
        self._workflows = None
        self._postings_batches = None
        self._v3_balance_timeseries = None
        self._derived_parameters_values = None
        self._event_log_json = None
        self.discriminator = None
        if account_notes is not None:
            self.account_notes = account_notes
        if scheduled_events is not None:
            self.scheduled_events = scheduled_events
        if workflows is not None:
            self.workflows = workflows
        if postings_batches is not None:
            self.postings_batches = postings_batches
        if v3_balance_timeseries is not None:
            self.v3_balance_timeseries = v3_balance_timeseries
        if derived_parameters_values is not None:
            self.derived_parameters_values = derived_parameters_values
        if event_log_json is not None:
            self.event_log_json = event_log_json

    @property
    def account_notes(self):
        """Gets the account_notes of this SmartContractsSimulateSmartContractResponse.  # noqa: E501

        All notes added to the simulated account.  # noqa: E501

        :return: The account_notes of this SmartContractsSimulateSmartContractResponse.  # noqa: E501
        :rtype: list[AccountsCommonAccountNote]
        """
        return self._account_notes

    @account_notes.setter
    def account_notes(self, account_notes):
        """Sets the account_notes of this SmartContractsSimulateSmartContractResponse.

        All notes added to the simulated account.  # noqa: E501

        :param account_notes: The account_notes of this SmartContractsSimulateSmartContractResponse.  # noqa: E501
        :type: list[AccountsCommonAccountNote]
        """

        self._account_notes = account_notes

    @property
    def scheduled_events(self):
        """Gets the scheduled_events of this SmartContractsSimulateSmartContractResponse.  # noqa: E501

        All scheduled events on the simulated account (these are schedules and not all materialised times).  # noqa: E501

        :return: The scheduled_events of this SmartContractsSimulateSmartContractResponse.  # noqa: E501
        :rtype: list[SmartContractsScheduledEvent]
        """
        return self._scheduled_events

    @scheduled_events.setter
    def scheduled_events(self, scheduled_events):
        """Sets the scheduled_events of this SmartContractsSimulateSmartContractResponse.

        All scheduled events on the simulated account (these are schedules and not all materialised times).  # noqa: E501

        :param scheduled_events: The scheduled_events of this SmartContractsSimulateSmartContractResponse.  # noqa: E501
        :type: list[SmartContractsScheduledEvent]
        """

        self._scheduled_events = scheduled_events

    @property
    def workflows(self):
        """Gets the workflows of this SmartContractsSimulateSmartContractResponse.  # noqa: E501

        All instructions to start Workflows that were created by the simulated account.  # noqa: E501

        :return: The workflows of this SmartContractsSimulateSmartContractResponse.  # noqa: E501
        :rtype: list[SmartContractsStartedWorkflow]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """Sets the workflows of this SmartContractsSimulateSmartContractResponse.

        All instructions to start Workflows that were created by the simulated account.  # noqa: E501

        :param workflows: The workflows of this SmartContractsSimulateSmartContractResponse.  # noqa: E501
        :type: list[SmartContractsStartedWorkflow]
        """

        self._workflows = workflows

    @property
    def postings_batches(self):
        """Gets the postings_batches of this SmartContractsSimulateSmartContractResponse.  # noqa: E501

        Return all of the Posting instruction batches that were simulated.  # noqa: E501

        :return: The postings_batches of this SmartContractsSimulateSmartContractResponse.  # noqa: E501
        :rtype: list[V1PostingInstructionBatch]
        """
        return self._postings_batches

    @postings_batches.setter
    def postings_batches(self, postings_batches):
        """Sets the postings_batches of this SmartContractsSimulateSmartContractResponse.

        Return all of the Posting instruction batches that were simulated.  # noqa: E501

        :param postings_batches: The postings_batches of this SmartContractsSimulateSmartContractResponse.  # noqa: E501
        :type: list[V1PostingInstructionBatch]
        """

        self._postings_batches = postings_batches

    @property
    def v3_balance_timeseries(self):
        """Gets the v3_balance_timeseries of this SmartContractsSimulateSmartContractResponse.  # noqa: E501

        Return the balance timeseries for the simulation.  # noqa: E501

        :return: The v3_balance_timeseries of this SmartContractsSimulateSmartContractResponse.  # noqa: E501
        :rtype: list[BalancesPostingBalance]
        """
        return self._v3_balance_timeseries

    @v3_balance_timeseries.setter
    def v3_balance_timeseries(self, v3_balance_timeseries):
        """Sets the v3_balance_timeseries of this SmartContractsSimulateSmartContractResponse.

        Return the balance timeseries for the simulation.  # noqa: E501

        :param v3_balance_timeseries: The v3_balance_timeseries of this SmartContractsSimulateSmartContractResponse.  # noqa: E501
        :type: list[BalancesPostingBalance]
        """

        self._v3_balance_timeseries = v3_balance_timeseries

    @property
    def derived_parameters_values(self):
        """Gets the derived_parameters_values of this SmartContractsSimulateSmartContractResponse.  # noqa: E501

        Return all derived Smart Contract parameter values that were simulated.  # noqa: E501

        :return: The derived_parameters_values of this SmartContractsSimulateSmartContractResponse.  # noqa: E501
        :rtype: list[SmartContractsDerivedParametersValues]
        """
        return self._derived_parameters_values

    @derived_parameters_values.setter
    def derived_parameters_values(self, derived_parameters_values):
        """Sets the derived_parameters_values of this SmartContractsSimulateSmartContractResponse.

        Return all derived Smart Contract parameter values that were simulated.  # noqa: E501

        :param derived_parameters_values: The derived_parameters_values of this SmartContractsSimulateSmartContractResponse.  # noqa: E501
        :type: list[SmartContractsDerivedParametersValues]
        """

        self._derived_parameters_values = derived_parameters_values

    @property
    def event_log_json(self):
        """Gets the event_log_json of this SmartContractsSimulateSmartContractResponse.  # noqa: E501

        Return the event log.  # noqa: E501

        :return: The event_log_json of this SmartContractsSimulateSmartContractResponse.  # noqa: E501
        :rtype: str
        """
        return self._event_log_json

    @event_log_json.setter
    def event_log_json(self, event_log_json):
        """Sets the event_log_json of this SmartContractsSimulateSmartContractResponse.

        Return the event log.  # noqa: E501

        :param event_log_json: The event_log_json of this SmartContractsSimulateSmartContractResponse.  # noqa: E501
        :type: str
        """

        self._event_log_json = event_log_json

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmartContractsSimulateSmartContractResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartContractsSimulateSmartContractResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
