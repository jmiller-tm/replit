# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SmartContractsStartedWorkflow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'workflow_definition_id': 'str',
        'context': 'dict(str, str)',
        'start_timestamp': 'datetime'
    }

    attribute_map = {
        'account_id': 'account_id',
        'workflow_definition_id': 'workflow_definition_id',
        'context': 'context',
        'start_timestamp': 'start_timestamp'
    }

    def __init__(self, account_id=None, workflow_definition_id=None, context=None, start_timestamp=None):  # noqa: E501
        """SmartContractsStartedWorkflow - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._workflow_definition_id = None
        self._context = None
        self._start_timestamp = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if workflow_definition_id is not None:
            self.workflow_definition_id = workflow_definition_id
        if context is not None:
            self.context = context
        if start_timestamp is not None:
            self.start_timestamp = start_timestamp

    @property
    def account_id(self):
        """Gets the account_id of this SmartContractsStartedWorkflow.  # noqa: E501

        The ID of the account that started the Workflow.  # noqa: E501

        :return: The account_id of this SmartContractsStartedWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SmartContractsStartedWorkflow.

        The ID of the account that started the Workflow.  # noqa: E501

        :param account_id: The account_id of this SmartContractsStartedWorkflow.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def workflow_definition_id(self):
        """Gets the workflow_definition_id of this SmartContractsStartedWorkflow.  # noqa: E501

        The ID of the Workflow that the account started.  # noqa: E501

        :return: The workflow_definition_id of this SmartContractsStartedWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._workflow_definition_id

    @workflow_definition_id.setter
    def workflow_definition_id(self, workflow_definition_id):
        """Sets the workflow_definition_id of this SmartContractsStartedWorkflow.

        The ID of the Workflow that the account started.  # noqa: E501

        :param workflow_definition_id: The workflow_definition_id of this SmartContractsStartedWorkflow.  # noqa: E501
        :type: str
        """

        self._workflow_definition_id = workflow_definition_id

    @property
    def context(self):
        """Gets the context of this SmartContractsStartedWorkflow.  # noqa: E501

        The initial data that was sent to the Workflow.  # noqa: E501

        :return: The context of this SmartContractsStartedWorkflow.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this SmartContractsStartedWorkflow.

        The initial data that was sent to the Workflow.  # noqa: E501

        :param context: The context of this SmartContractsStartedWorkflow.  # noqa: E501
        :type: dict(str, str)
        """

        self._context = context

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this SmartContractsStartedWorkflow.  # noqa: E501

        The time the Workflow was started.  # noqa: E501

        :return: The start_timestamp of this SmartContractsStartedWorkflow.  # noqa: E501
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this SmartContractsStartedWorkflow.

        The time the Workflow was started.  # noqa: E501

        :param start_timestamp: The start_timestamp of this SmartContractsStartedWorkflow.  # noqa: E501
        :type: datetime
        """

        self._start_timestamp = start_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmartContractsStartedWorkflow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartContractsStartedWorkflow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
