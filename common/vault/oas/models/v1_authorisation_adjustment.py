# coding: utf-8

"""
    vault/kernel/core_api/proto/v1/accounts/core_api_account_schedule_tags.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1AuthorisationAdjustment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'denomination': 'str',
        'advice': 'bool',
        'target_account_id': 'str',
        'internal_account_id': 'str',
        'authorised_amount': 'str',
        'delta_amount': 'str',
        'amount': 'Amount',
        'replacement_amount': 'ReplacementAmount'
    }

    attribute_map = {
        'denomination': 'denomination',
        'advice': 'advice',
        'target_account_id': 'target_account_id',
        'internal_account_id': 'internal_account_id',
        'authorised_amount': 'authorised_amount',
        'delta_amount': 'delta_amount',
        'amount': 'amount',
        'replacement_amount': 'replacement_amount'
    }

    def __init__(self, denomination=None, advice=None, target_account_id=None, internal_account_id=None, authorised_amount=None, delta_amount=None, amount=None, replacement_amount=None):  # noqa: E501
        """V1AuthorisationAdjustment - a model defined in Swagger"""  # noqa: E501
        self._denomination = None
        self._advice = None
        self._target_account_id = None
        self._internal_account_id = None
        self._authorised_amount = None
        self._delta_amount = None
        self._amount = None
        self._replacement_amount = None
        self.discriminator = None
        if denomination is not None:
            self.denomination = denomination
        if advice is not None:
            self.advice = advice
        if target_account_id is not None:
            self.target_account_id = target_account_id
        if internal_account_id is not None:
            self.internal_account_id = internal_account_id
        if authorised_amount is not None:
            self.authorised_amount = authorised_amount
        if delta_amount is not None:
            self.delta_amount = delta_amount
        if amount is not None:
            self.amount = amount
        if replacement_amount is not None:
            self.replacement_amount = replacement_amount

    @property
    def denomination(self):
        """Gets the denomination of this V1AuthorisationAdjustment.  # noqa: E501

        The instruction denomination.  # noqa: E501

        :return: The denomination of this V1AuthorisationAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._denomination

    @denomination.setter
    def denomination(self, denomination):
        """Sets the denomination of this V1AuthorisationAdjustment.

        The instruction denomination.  # noqa: E501

        :param denomination: The denomination of this V1AuthorisationAdjustment.  # noqa: E501
        :type: str
        """

        self._denomination = denomination

    @property
    def advice(self):
        """Gets the advice of this V1AuthorisationAdjustment.  # noqa: E501

        Can be set to true to ensure that funds are ringfenced regardless of the outcome of balance checks. To ensure that posting instructions with `advice` set to true are excluded from the contract balance check, the flag `exclude_advice` must also be set to true. See [Balance check](/reference/contracts/common_examples/#balance_check).  # noqa: E501

        :return: The advice of this V1AuthorisationAdjustment.  # noqa: E501
        :rtype: bool
        """
        return self._advice

    @advice.setter
    def advice(self, advice):
        """Sets the advice of this V1AuthorisationAdjustment.

        Can be set to true to ensure that funds are ringfenced regardless of the outcome of balance checks. To ensure that posting instructions with `advice` set to true are excluded from the contract balance check, the flag `exclude_advice` must also be set to true. See [Balance check](/reference/contracts/common_examples/#balance_check).  # noqa: E501

        :param advice: The advice of this V1AuthorisationAdjustment.  # noqa: E501
        :type: bool
        """

        self._advice = advice

    @property
    def target_account_id(self):
        """Gets the target_account_id of this V1AuthorisationAdjustment.  # noqa: E501

        The `account_id` of the `target_account` for this `client_transaction`.  # noqa: E501

        :return: The target_account_id of this V1AuthorisationAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._target_account_id

    @target_account_id.setter
    def target_account_id(self, target_account_id):
        """Sets the target_account_id of this V1AuthorisationAdjustment.

        The `account_id` of the `target_account` for this `client_transaction`.  # noqa: E501

        :param target_account_id: The target_account_id of this V1AuthorisationAdjustment.  # noqa: E501
        :type: str
        """

        self._target_account_id = target_account_id

    @property
    def internal_account_id(self):
        """Gets the internal_account_id of this V1AuthorisationAdjustment.  # noqa: E501

        The `account_id` of the `internal_account` for this `client_transaction`.  # noqa: E501

        :return: The internal_account_id of this V1AuthorisationAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._internal_account_id

    @internal_account_id.setter
    def internal_account_id(self, internal_account_id):
        """Sets the internal_account_id of this V1AuthorisationAdjustment.

        The `account_id` of the `internal_account` for this `client_transaction`.  # noqa: E501

        :param internal_account_id: The internal_account_id of this V1AuthorisationAdjustment.  # noqa: E501
        :type: str
        """

        self._internal_account_id = internal_account_id

    @property
    def authorised_amount(self):
        """Gets the authorised_amount of this V1AuthorisationAdjustment.  # noqa: E501

        The total amount authorised for this client transaction after the accepted instruction was accepted. This field is not returned if the instruction is rejected.  # noqa: E501

        :return: The authorised_amount of this V1AuthorisationAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._authorised_amount

    @authorised_amount.setter
    def authorised_amount(self, authorised_amount):
        """Sets the authorised_amount of this V1AuthorisationAdjustment.

        The total amount authorised for this client transaction after the accepted instruction was accepted. This field is not returned if the instruction is rejected.  # noqa: E501

        :param authorised_amount: The authorised_amount of this V1AuthorisationAdjustment.  # noqa: E501
        :type: str
        """

        self._authorised_amount = authorised_amount

    @property
    def delta_amount(self):
        """Gets the delta_amount of this V1AuthorisationAdjustment.  # noqa: E501

        The change the accepted instruction has made to the amount authorised for this client transaction. This field is not returned if the instruction is rejected.  # noqa: E501

        :return: The delta_amount of this V1AuthorisationAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._delta_amount

    @delta_amount.setter
    def delta_amount(self, delta_amount):
        """Sets the delta_amount of this V1AuthorisationAdjustment.

        The change the accepted instruction has made to the amount authorised for this client transaction. This field is not returned if the instruction is rejected.  # noqa: E501

        :param delta_amount: The delta_amount of this V1AuthorisationAdjustment.  # noqa: E501
        :type: str
        """

        self._delta_amount = delta_amount

    @property
    def amount(self):
        """Gets the amount of this V1AuthorisationAdjustment.  # noqa: E501


        :return: The amount of this V1AuthorisationAdjustment.  # noqa: E501
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this V1AuthorisationAdjustment.


        :param amount: The amount of this V1AuthorisationAdjustment.  # noqa: E501
        :type: Amount
        """

        self._amount = amount

    @property
    def replacement_amount(self):
        """Gets the replacement_amount of this V1AuthorisationAdjustment.  # noqa: E501


        :return: The replacement_amount of this V1AuthorisationAdjustment.  # noqa: E501
        :rtype: ReplacementAmount
        """
        return self._replacement_amount

    @replacement_amount.setter
    def replacement_amount(self, replacement_amount):
        """Sets the replacement_amount of this V1AuthorisationAdjustment.


        :param replacement_amount: The replacement_amount of this V1AuthorisationAdjustment.  # noqa: E501
        :type: ReplacementAmount
        """

        self._replacement_amount = replacement_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1AuthorisationAdjustment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AuthorisationAdjustment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
